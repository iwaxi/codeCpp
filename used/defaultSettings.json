{
	// Specifies the style of the gravatar default (fallback) images
	//  - identicon: A geometric pattern
	//  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
	//  - monsterid: A monster with different colors, faces, etc
	//  - retro: 8-bit arcade-style pixelated faces
	//  - robohash: A robot with different colors, faces, etc
	//  - wavatar: A face with differing features and backgrounds
	"gitlens.defaultGravatarsStyle": "robohash",

	// Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
	//  - null: Shows a menu to choose which file annotations to toggle
	//  - blame: Toggles file blame annotations
	//  - heatmap: Toggles file heatmap annotations
	//  - changes: Toggles file changes annotations
	"gitlens.fileAnnotations.command": null,

	// Deprecated. Use the [Insiders edition](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) of GitLens instead
	// 
	"gitlens.insiders": null,

	// Specifies how much (if any) output will be sent to the GitLens output channel
	//  - silent: Logs nothing
	//  - errors: Logs only errors
	//  - verbose: Logs all errors, warnings, and messages
	//  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
	"gitlens.outputLevel": "errors",

	// Specifies whether to enable GitLens+ features
	"gitlens.plusFeatures.enabled": true,

	// Specifies the proxy configuration to use. If not specified, the proxy configuration will be determined based on VS Code or OS settings
	"gitlens.proxy": null,

	// Specifies whether to show the Welcome (Quick Setup) experience on first install
	"gitlens.showWelcomeOnInstall": true,

	// Specifies whether to show the What's New notification after upgrading to new feature releases
	"gitlens.showWhatsNewAfterUpgrades": true,

	// Specifies whether to enable virtual repositories support
	"gitlens.virtualRepositories.enabled": true,

	// 控制是否在编辑器中显示 CodeLens。
	"diffEditor.codeLens": false,

	// 
	//  - smart: 使用默认的差异算法。
	//  - experimental: 使用实验性差异算法。
	"diffEditor.diffAlgorithm": "smart",

	// 启用后，差异编辑器将忽略前导空格或尾随空格中的更改。
	"diffEditor.ignoreTrimWhitespace": true,

	// 超时(以毫秒为单位)，之后将取消差异计算。使用0表示没有超时。
	"diffEditor.maxComputationTime": 5000,

	// 要为其计算差异的最大文件大小(MB)。使用 0 表示无限制。
	"diffEditor.maxFileSize": 50,

	// 控制差异编辑器是否为添加/删除的更改显示 +/- 指示符号。
	"diffEditor.renderIndicators": true,

	// 启用后，差异编辑器会在其字形边距中显示箭头以还原更改。
	"diffEditor.renderMarginRevertIcon": true,

	// 控制差异编辑器的显示方式是并排还是内联。
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: 永不换行。
	//  - on: 将在视区宽度处换行。
	//  - inherit: 行将根据 `editor.wordWrap` 设置进行换行。
	"diffEditor.wordWrap": "inherit",

	// 控制是否应在提交字符时接受建议。例如，在 JavaScript 中，半角分号(`;`)可以为提交字符，能够接受建议并键入该字符。
	"editor.acceptSuggestionOnCommitCharacter": true,

	// 控制除了 `Tab` 键以外， `Enter` 键是否同样可以接受建议。这能减少“插入新行”和“接受建议”命令之间的歧义。
	//  - on
	//  - smart: 仅当建议包含文本改动时才可使用 `Enter` 键进行接受。
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// 控制编辑器中可由屏幕阅读器一次读出的行数。我们检测到屏幕阅读器时，会自动将默认值设置为 500。警告: 如果行数大于默认值，可能会影响性能。
	"editor.accessibilityPageSize": 10,

	// 控制编辑器是否应在对屏幕阅读器进行了优化的模式下运行。设置为“开”将禁用自动换行。
	//  - auto: 编辑器将使用平台 API 以检测是否附加了屏幕阅读器。
	//  - on: 编辑器将针对与屏幕阅读器搭配使用进行永久优化。将禁用自动换行。
	//  - off: 编辑器将不再对屏幕阅读器的使用进行优化。
	"editor.accessibilitySupport": "auto",

	// 控制编辑器是否在左括号后自动插入右括号。
	//  - always
	//  - languageDefined: 使用语言配置确定何时自动闭合括号。
	//  - beforeWhitespace: 仅当光标位于空白字符左侧时，才自动闭合括号。
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// 控制在删除时编辑器是否应删除相邻的右引号或右方括号。
	//  - always
	//  - auto: 仅在自动插入时才删除相邻的右引号或右括号。
	//  - never
	"editor.autoClosingDelete": "auto",

	// 控制编辑器是否应改写右引号或右括号。
	//  - always
	//  - auto: 仅在自动插入时才改写右引号或右括号。
	//  - never
	"editor.autoClosingOvertype": "auto",

	// 控制编辑器是否在左引号后自动插入右引号。
	//  - always
	//  - languageDefined: 使用语言配置确定何时自动闭合引号。
	//  - beforeWhitespace: 仅当光标位于空白字符左侧时，才自动闭合引号。
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// 控制编辑器是否应在用户键入、粘贴、移动或缩进行时自动调整缩进。
	//  - none: 编辑器不会自动插入缩进。
	//  - keep: 编辑器将保留当前行的缩进。
	//  - brackets: 编辑器将保留当前行的缩进并遵循语言定义的括号。
	//  - advanced: 编辑器将保留当前行的缩进、使用语言定义的括号并调用语言定义的特定 onEnterRules。
	//  - full: 编辑器将保留当前行的缩进，使用语言定义的括号，调用由语言定义的特殊输入规则，并遵循由语言定义的缩进规则。
	"editor.autoIndent": "full",

	// 控制在键入引号或方括号时，编辑器是否应自动将所选内容括起来。
	//  - languageDefined: 使用语言配置确定何时自动包住所选内容。
	//  - quotes: 使用引号而非括号来包住所选内容。
	//  - brackets: 使用括号而非引号来包住所选内容。
	//  - never
	"editor.autoSurround": "languageDefined",

	// 控制是否启用括号对着色。请使用 `workbench.colorCustomizations` 重写括号突出显示颜色。
	"editor.bracketPairColorization.enabled": true,

	// 控制每个方括号类型是否具有自己的独立颜色池。
	"editor.bracketPairColorization.independentColorPoolPerBracketType": false,

	// 在保存时运行的代码操作类型。
	"editor.codeActionsOnSave": {},

	// 控制是否在编辑器中显示 CodeLens。
	"editor.codeLens": true,

	// 控制 CodeLens 的字体系列。
	"editor.codeLensFontFamily": "",

	// 控制 CodeLens 的字号(以像素为单位)。设置为 `0` 时，将使用 90% 的 `editor.fontSize`。
	"editor.codeLensFontSize": 0,

	// 控制编辑器是否显示内联颜色修饰器和颜色选取器。
	"editor.colorDecorators": true,

	// 启用使用鼠标和键进行列选择。
	"editor.columnSelection": false,

	// 控制在对行注释执行切换、添加或删除操作时，是否应忽略空行。
	"editor.comments.ignoreEmptyLines": true,

	// 控制在注释时是否插入空格字符。
	"editor.comments.insertSpace": true,

	// 控制在复制时是否同时复制语法高亮。
	"editor.copyWithSyntaxHighlighting": true,

	// 控制光标的动画样式。
	"editor.cursorBlinking": "blink",

	// 控制是否启用平滑插入动画。
	"editor.cursorSmoothCaretAnimation": false,

	// 控制光标样式。
	"editor.cursorStyle": "line",

	// 控制光标周围可见的前置行和尾随行的最小数目。在其他一些编辑器中称为 "scrollOff" 或 "scrollOffset"。
	"editor.cursorSurroundingLines": 0,

	// 控制何时应强制执行"光标环绕行"。
	//  - default: 仅当通过键盘或 API 触发时，才会强制执行"光标环绕行"。
	//  - all: 始终强制执行 "cursorSurroundingLines"
	"editor.cursorSurroundingLinesStyle": "default",

	// 当 `editor.cursorStyle` 设置为 `line` 时，控制光标的宽度。
	"editor.cursorWidth": 0,

	// 如果启用了自定义代码操作菜单，则启用此项将显示包含组标头的代码操作菜单。
	"editor.customCodeActionMenu.showHeaders": true,

	// 定义一个默认格式化程序, 该格式化程序优先于所有其他格式化程序设置。必须是提供格式化程序的扩展的标识符。
	//  - null: 没有
	//  - danielpinto8zz6.c-cpp-compile-run: Compile & Run single c/c++ files easly
	//  - franneck94.c-cpp-runner: 🚀 Compile, run and debug single or multiple C/C++ files with ease. 🚀
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - vscode.css-language-features: 为 CSS、LESS 和 SCSS 文件提供丰富的语言支持。
	//  - vscode.html-language-features: 为 HTML 和 Handlebar 文件提供丰富的语言支持
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: 为 JSON 文件提供丰富的语言支持
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - vscode.markdown-language-features: 为 Markdown 提供丰富的语言支持。
	//  - vscode.php-language-features: 为 PHP 文件提供丰富的语言支持。
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - vscode.references-view: 在边栏中以独立稳定的视图引用搜索结果
	//  - vscode.search-result: 为选项卡搜索结果中提供语法突出显示和语言功能。
	//  - vscode.typescript-language-features: 为 JavaScript 和 TypeScript 提供丰富的语言支持。
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: 管理 Maven 项目，执行命令，从原型生成项目，改善 Java 开发人员的用户体验。
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - twxs.cmake: CMake langage support for Visual Studio Code
	//  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
	//  - vscode.configuration-editing: 在配置文件 (如设置、启动和扩展推荐文件) 中提供高级 IntelliSense、自动修复等功能
	//  - ms-vscode.cpptools-extension-pack: Popular extensions for C++ development in Visual Studio Code.
	//  - vscode.debug-auto-launch: 当 node-debug 扩展未启用时提供自动附加的辅助程序。
	//  - vscode.debug-server-ready: 如果正在调试的服务器已准备就绪，在浏览器中打开 URI。
	//  - vscode.emmet: 适用于 VS Code 的 Emmet 支持
	//  - vscode.extension-editing: 在创建扩展时提供 linting 功能。
	//  - vscode.git: Git 源代码管理集成
	//  - vscode.git-base: Git 静态贡献和选取器。
	//  - vscode.github: 适用于 VS Code 的 GitHub 功能
	//  - vscode.github-authentication: GitHub 身份验证提供程序
	//  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: 向 VSCode 提供 Gulp 功能的扩展。
	//  - vscode.image-preview: 提供 VS Code的内置图像预览
	//  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
	//  - vscode.ipynb: 为打开和读取 Jupyter 的 .ipynb 笔记本文件提供基本支持
	//  - vscode.jake: 向 VS Code 提供 Jake 功能的扩展。
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - vscode.markdown-math: 在笔记本中向 Markdown 添加数学支持。
	//  - vscode.merge-conflict: 为内联合并冲突提供高亮和命令。
	//  - vscode.microsoft-authentication: Microsoft 身份验证提供程序
	//  - vscode.npm: 为 npm 脚本提供任务支持的扩展。
	//  - ms-vscode-remote.remote-wsl-recommender: Recommends using the Windows Subsystem for Linux (WSL) and the Remote WSL extension.
	//  - vscode.simple-browser: 一个非常基本的内置 Web 视图，用于显示 Web 内容。
	//  - vscjava.vscode-java-dependency: 在 Visual Studio Code 中管理 Java 项目
	//  - vscjava.vscode-java-test: 运行并调试 JUnit 或 TestNG 测试用例
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - vadimcn.vscode-lldb: A native debugger powered by LLDB.  Debug C++, Rust and other compiled languages.
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	//  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
	"editor.defaultFormatter": null,

	// 控制"转到定义"鼠标手势是否始终打开预览小部件。
	"editor.definitionLinkOpensInPeek": false,

	// 控制在基于文件内容打开文件时是否自动检测 `editor.tabSize#` 和 `#editor.insertSpaces`。
	"editor.detectIndentation": true,

	// 控制在编辑器中是否允许通过拖放来移动选中内容。
	"editor.dragAndDrop": true,

	// 控制是否可以通过按住 `Shift` (而不是在编辑器中打开文件)将文件拖放到编辑器中。
	"editor.dropIntoEditor.enabled": true,

	// 控制在没有选择内容时进行复制是否复制当前行。
	"editor.emptySelectionClipboard": true,

	// 启用/禁用粘贴时从扩展运行编辑。
	"editor.experimental.pasteActions.enabled": false,

	// 按下"Alt"时滚动速度倍增。
	"editor.fastScrollSensitivity": 5,

	// 控制 "查找小部件" 是否应在编辑器顶部添加额外的行。如果为 true, 则可以在 "查找小工具" 可见时滚动到第一行之外。
	"editor.find.addExtraSpaceOnTop": true,

	// 控制自动打开“在选定内容中查找”的条件。
	//  - never: 从不自动打开“在选定内容中查找”(默认)。
	//  - always: 始终自动打开“在选定内容中查找”。
	//  - multiline: 选择多行内容时，自动打开“在选定内容中查找”。
	"editor.find.autoFindInSelection": "never",

	// 控制在键入时光标是否应跳转以查找匹配项。
	"editor.find.cursorMoveOnType": true,

	// 控制在找不到其他匹配项时，是否自动从开头(或结尾)重新开始搜索。
	"editor.find.loop": true,

	// 控制是否将编辑器选中内容作为搜索词填入到查找小组件中。
	//  - never: 切勿为编辑器选择中的搜索字符串设定种子。
	//  - always: 始终为编辑器选择中的搜索字符串设定种子，包括光标位置的字词。
	//  - selection: 仅为编辑器选择中的搜索字符串设定种子。
	"editor.find.seedSearchStringFromSelection": "always",

	// 控制编辑器是否启用了代码折叠。
	"editor.folding": true,

	// 控制编辑器是否应突出显示折叠范围。
	"editor.foldingHighlight": true,

	// 控制编辑器是否自动折叠导入范围。
	"editor.foldingImportsByDefault": false,

	// 可折叠区域的最大数量。如果当前源具有大量可折叠区域，那么增加此值可能会导致编辑器的响应速度变慢。
	"editor.foldingMaximumRegions": 5000,

	// 控制计算折叠范围的策略。
	//  - auto: 使用特定于语言的折叠策略(如果可用)，否则使用基于缩进的策略。
	//  - indentation: 使用基于缩进的折叠策略。
	"editor.foldingStrategy": "auto",

	// 控制字体系列。
	"editor.fontFamily": "Consolas, 'Courier New', monospace",

	// 配置字体连字或字体特性。可以是用于启用/禁用连字的布尔值，或用于设置 CSS "font-feature-settings" 属性值的字符串。
	"editor.fontLigatures": false,

	// 控制字体大小(像素)。
	"editor.fontSize": 14,

	// 控制字体粗细。接受关键字“正常”和“加粗”，或者接受介于 1 至 1000 之间的数字。
	"editor.fontWeight": "normal",

	// 控制编辑器是否自动格式化粘贴的内容。格式化程序必须可用，并且能针对文档中的某一范围进行格式化。
	"editor.formatOnPaste": false,

	// 在保存时格式化文件。格式化程序必须可用，延迟后文件不能保存，并且编辑器不能关闭。
	"editor.formatOnSave": false,

	// 控制在保存时设置格式是设置整个文件格式还是仅设置修改内容的格式。仅当 "#editor.formatOnSave#" 处于启用状态时适用。
	//  - file: 设置整个文件的格式。
	//  - modifications: 格式修改(需要源代码管理)。
	//  - modificationsIfAvailable: 将尝试只对修改进行格式化(需要源代码管理)。如果无法使用源代码管理，则将格式化整个文件。
	"editor.formatOnSaveMode": "file",

	// 控制编辑器在键入一行后是否自动格式化该行。
	"editor.formatOnType": false,

	// 控制编辑器是否应呈现垂直字形边距。字形边距最常用于调试。
	"editor.glyphMargin": true,

	// 当"转到声明"的结果为当前位置时将要执行的替代命令的 ID。
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// 当"转到定义"的结果为当前位置时将要执行的替代命令的 ID。
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// 当"转到实现"的结果为当前位置时将要执行的替代命令的 ID。
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// 当"转到引用"的结果是当前位置时正在执行的替代命令 ID。
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// 当"转到类型定义"的结果是当前位置时正在执行的备用命令 ID。
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// 此设置已弃用，请改用单独的设置，如"editor.editor.gotoLocation.multipleDefinitions"或"editor.editor.gotoLocation.multipleImplementations"。
	// 
	"editor.gotoLocation.multiple": null,

	// 控制存在多个目标位置时"转到声明"命令的行为。
	//  - peek: 显示结果的预览视图 (默认值)
	//  - gotoAndPeek: 转到主结果并显示预览视图
	//  - goto: 转到主结果，并对其他人启用防偷窥导航
	"editor.gotoLocation.multipleDeclarations": "peek",

	// 控制存在多个目标位置时"转到定义"命令的行为。
	//  - peek: 显示结果的预览视图 (默认值)
	//  - gotoAndPeek: 转到主结果并显示预览视图
	//  - goto: 转到主结果，并对其他人启用防偷窥导航
	"editor.gotoLocation.multipleDefinitions": "peek",

	// 控制存在多个目标位置时"转到实现"命令的行为。
	//  - peek: 显示结果的预览视图 (默认值)
	//  - gotoAndPeek: 转到主结果并显示预览视图
	//  - goto: 转到主结果，并对其他人启用防偷窥导航
	"editor.gotoLocation.multipleImplementations": "peek",

	// 控制存在多个目标位置时"转到引用"命令的行为。
	//  - peek: 显示结果的预览视图 (默认值)
	//  - gotoAndPeek: 转到主结果并显示预览视图
	//  - goto: 转到主结果，并对其他人启用防偷窥导航
	"editor.gotoLocation.multipleReferences": "peek",

	// 控制存在多个目标位置时"转到类型定义"命令的行为。
	//  - peek: 显示结果的预览视图 (默认值)
	//  - gotoAndPeek: 转到主结果并显示预览视图
	//  - goto: 转到主结果，并对其他人启用防偷窥导航
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// 控制是否启用括号对指南。
	//  - true: 启用括号对参考线。
	//  - active: 仅为活动括号对启用括号对参考线。
	//  - false: 禁用括号对参考线。
	"editor.guides.bracketPairs": false,

	// 控制是否启用水平括号对指南。
	//  - true: 启用水平参考线作为垂直括号对参考线的添加项。
	//  - active: 仅为活动括号对启用水平参考线。
	//  - false: 禁用水平括号对参考线。
	"editor.guides.bracketPairsHorizontal": "active",

	// 控制编辑器是否应突出显示活动的括号对。
	"editor.guides.highlightActiveBracketPair": true,

	// 控制是否突出显示编辑器中活动的缩进参考线。
	//  - true: 突出显示活动缩进参考线。
	//  - always: 突出显示活动缩进参考线，即使突出显示了括号参考线。
	//  - false: 不要突出显示活动缩进参考线。
	"editor.guides.highlightActiveIndentation": true,

	// 控制编辑器是否显示缩进参考线。
	"editor.guides.indentation": true,

	// 控制是否在概览标尺中隐藏光标。
	"editor.hideCursorInOverviewRuler": false,

	// 如果有空间，首选在线条上方显示悬停。
	"editor.hover.above": true,

	// 控制显示悬停提示前的等待时间 (毫秒)。
	"editor.hover.delay": 300,

	// 控制是否显示悬停提示。
	"editor.hover.enabled": true,

	// 控制当鼠标移动到悬停提示上时，其是否保持可见。
	"editor.hover.sticky": true,

	// 在编辑器中启用内联提示。
	//  - on: 已启用内嵌提示
	//  - onUnlessPressed: 默认情况下显示内嵌提示，并在按住 Ctrl+Alt 时隐藏
	//  - offUnlessPressed: 默认情况下隐藏内嵌提示，并在按住 Ctrl+Alt 时显示
	//  - off: 已禁用内嵌提示
	"editor.inlayHints.enabled": "on",

	// 控制编辑器中嵌入提示的字体系列。设置为空时，将使用 `editor.fontFamily`。
	"editor.inlayHints.fontFamily": "",

	// 控制编辑器中嵌入提示的字号。默认情况下，当配置的值小于 `5` 或大于编辑器字号时，将使用 `editor.fontSize`。
	"editor.inlayHints.fontSize": 0,

	// 在编辑器中启用叠加提示周围的填充。
	"editor.inlayHints.padding": false,

	// 控制是否在编辑器中自动显示内联建议。
	"editor.inlineSuggest.enabled": true,

	// 按 `Tab` 时插入空格。当 `editor.detectIndentation` 打开时，将根据文件内容替代此设置。
	"editor.insertSpaces": true,

	// 定义增加和减少缩进的括号。
	"editor.language.brackets": null,

	// 如果启用方括号对着色，则按照其嵌套级别定义已着色的方括号对。
	"editor.language.colorizedBracketPairs": null,

	// 对大型文件进行特殊处理，禁用某些内存密集型功能。
	"editor.largeFileOptimizations": true,

	// 控制字母间距(像素)。
	"editor.letterSpacing": 0,

	// 在编辑器中启用代码操作小灯泡提示。
	"editor.lightbulb.enabled": true,

	// 控制行高。
	//  - 使用 0 根据字号自动计算行高。
	//  - 介于 0 和 8 之间的值将用作字号的乘数。
	//  - 大于或等于 8 的值将用作有效值。
	"editor.lineHeight": 0,

	// 控制行号的显示。
	//  - off: 不显示行号。
	//  - on: 将行号显示为绝对行数。
	//  - relative: 将行号显示为与光标相隔的行数。
	//  - interval: 每 10 行显示一次行号。
	"editor.lineNumbers": "on",

	// 控制编辑器是否已启用链接编辑。相关符号(如 HTML 标记)在编辑时进行更新，具体由语言而定。
	"editor.linkedEditing": false,

	// 控制是否在编辑器中检测链接并使其可被点击。
	"editor.links": true,

	// 突出显示匹配的括号。
	"editor.matchBrackets": "always",

	// 由于性能原因，超过这个长度的行将不会被标记
	"editor.maxTokenizationLineLength": 20000,

	// 控制是否自动隐藏缩略图。
	"editor.minimap.autohide": false,

	// 控制是否显示缩略图。
	"editor.minimap.enabled": true,

	// 限制缩略图的宽度，控制其最多显示的列数。
	"editor.minimap.maxColumn": 120,

	// 渲染每行的实际字符，而不是色块。
	"editor.minimap.renderCharacters": true,

	// 在迷你地图中绘制的内容比例: 1、2 或 3。
	"editor.minimap.scale": 1,

	// 控制何时显示迷你地图滑块。
	"editor.minimap.showSlider": "mouseover",

	// 控制在哪一侧显示缩略图。
	"editor.minimap.side": "right",

	// 控制迷你地图的大小。
	//  - proportional: 迷你地图的大小与编辑器内容相同(并且可能滚动)。
	//  - fill: 迷你地图将根据需要拉伸或缩小以填充编辑器的高度(不滚动)。
	//  - fit: 迷你地图将根据需要缩小，永远不会大于编辑器(不滚动)。
	"editor.minimap.size": "proportional",

	// 对鼠标滚轮滚动事件的 `deltaX` 和 `deltaY` 乘上的系数。
	"editor.mouseWheelScrollSensitivity": 1,

	// 按住 `Ctrl` 键并滚动鼠标滚轮时对编辑器字体大小进行缩放。
	"editor.mouseWheelZoom": false,

	// 当多个光标重叠时进行合并。
	"editor.multiCursorMergeOverlapping": true,

	// 用于使用鼠标添加多个游标的修饰符。“转到定义”和“打开链接”鼠标手势将进行调整，使其不与 [多光标修饰符](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)冲突。
	//  - ctrlCmd: 映射为 `Ctrl` (Windows 和 Linux) 或 `Command` (macOS)。
	//  - alt: 映射为 `Alt` (Windows 和 Linux) 或 `Option` (macOS)。
	"editor.multiCursorModifier": "alt",

	// 控制粘贴时粘贴文本的行计数与光标计数相匹配。
	//  - spread: 每个光标粘贴一行文本。
	//  - full: 每个光标粘贴全文。
	"editor.multiCursorPaste": "spread",

	// 控制编辑器是否突出显示语义符号的匹配项。
	"editor.occurrencesHighlight": true,

	// 控制是否在概览标尺周围绘制边框。
	"editor.overviewRulerBorder": true,

	// 控制编辑器的底边和最后一行之间的间距量。
	"editor.padding.bottom": 0,

	// 控制编辑器的顶边和第一行之间的间距量。
	"editor.padding.top": 0,

	// 控制参数提示菜单在到达列表末尾时进行循环还是关闭。
	"editor.parameterHints.cycle": false,

	// 在输入时显示含有参数文档和类型信息的小面板。
	"editor.parameterHints.enabled": true,

	// 控制是将焦点放在内联编辑器上还是放在预览小部件中的树上。
	//  - tree: 打开速览时聚焦树
	//  - editor: 打开预览时将焦点放在编辑器上
	"editor.peekWidgetDefaultFocus": "tree",

	// 控制键入时是否应自动显示建议。这可以用于在注释、字符串和其他代码中键入时进行控制。可配置快速建议以显示为虚影文本或建议小组件。另请注意控制建议是否由特殊字符触发的“#editor.suggestOnTriggerCharacters#”设置。
	"editor.quickSuggestions": {
		"other": "on",
		"comments": "off",
		"strings": "off"
	},

	// 控制显示快速建议前的等待时间 (毫秒)。
	"editor.quickSuggestionsDelay": 10,

	// 启用/禁用重命名之前预览更改的功能
	"editor.rename.enablePreview": true,

	// 已弃用，请改用 "editor.linkedEditing"。
	// 控制是否在编辑器中输入时自动重命名。
	"editor.renameOnType": false,

	// 控制编辑器是否显示控制字符。
	"editor.renderControlCharacters": true,

	// 当文件以换行符结束时, 呈现最后一行的行号。
	"editor.renderFinalNewline": true,

	// 控制编辑器的当前行进行高亮显示的方式。
	//  - none
	//  - gutter
	//  - line
	//  - all: 同时突出显示导航线和当前行。
	"editor.renderLineHighlight": "line",

	// 控制编辑器是否仅在焦点在编辑器时突出显示当前行。
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// 控制编辑器在空白字符上显示符号的方式。
	//  - none
	//  - boundary: 呈现空格字符(字词之间的单个空格除外)。
	//  - selection: 仅在选定文本上呈现空白字符。
	//  - trailing: 仅呈现尾随空格字符。
	//  - all
	"editor.renderWhitespace": "selection",

	// 控制选区是否有圆角。
	"editor.roundedSelection": true,

	// 在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。若数组为空，则不绘制标尺。
	"editor.rulers": [],

	// 控制水平滚动条的可见性。
	//  - auto: 水平滚动条仅在必要时可见。
	//  - visible: 水平滚动条将始终可见。
	//  - hidden: 水平滚动条将始终隐藏。
	"editor.scrollbar.horizontal": "auto",

	// 水平滚动条的高度。
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// 控制单击按页滚动还是跳转到单击位置。
	"editor.scrollbar.scrollByPage": false,

	// 控制垂直滚动条的可见性。
	//  - auto: 垂直滚动条仅在必要时可见。
	//  - visible: 垂直滚动条将始终可见。
	//  - hidden: 垂直滚动条将始终隐藏。
	"editor.scrollbar.vertical": "auto",

	// 垂直滚动条的宽度。
	"editor.scrollbar.verticalScrollbarSize": 14,

	// 控制编辑器水平滚动时可以超过范围的字符数。
	"editor.scrollBeyondLastColumn": 4,

	// 控制编辑器是否可以滚动到最后一行之后。
	"editor.scrollBeyondLastLine": true,

	// 同时垂直和水平滚动时，仅沿主轴滚动。在触控板上垂直滚动时，可防止水平漂移。
	"editor.scrollPredominantAxis": true,

	// 控制编辑器是否应突出显示与所选内容类似的匹配项。
	"editor.selectionHighlight": true,

	// 控制是否为支持它的语言显示语义突出显示。
	//  - true: 对所有颜色主题启用语义突出显示。
	//  - false: 对所有颜色主题禁用语义突出显示。
	//  - configuredByTheme: 语义突出显示是由当前颜色主题的 "semanticHighlighting" 设置配置的。
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// 从当前所选颜色主题重写编辑器语义标记颜色和样式。
	"editor.semanticTokenColorCustomizations": {},

	// 控制加删除线被弃用的变量。
	"editor.showDeprecated": true,

	// 控制何时显示行号槽上的折叠控件。
	//  - always: 始终显示折叠控件。
	//  - never: 切勿显示折叠控件并减小装订线大小。
	//  - mouseover: 仅在鼠标位于装订线上方时显示折叠控件。
	"editor.showFoldingControls": "mouseover",

	// 控制是否淡化未使用的代码。
	"editor.showUnused": true,

	// 是否应始终选择前导和尾随空格。
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// 控制编辑器是否使用动画滚动。
	"editor.smoothScrolling": false,

	// 控制外围代码段或文件模板片段是否显示为代码操作。
	"editor.snippets.codeActions.enabled": true,

	// 控制代码片段是否与其他建议一起显示及其排列的位置。
	//  - top: 在其他建议上方显示代码片段建议。
	//  - bottom: 在其他建议下方显示代码片段建议。
	//  - inline: 在其他建议中穿插显示代码片段建议。
	//  - none: 不显示代码片段建议。
	"editor.snippetSuggestions": "inline",

	// 在速览编辑器中，即使双击其中的内容或者按 `Esc` 键，也保持其打开状态。
	"editor.stablePeek": false,

	// 在编辑器顶部的滚动过程中显示嵌套的当前作用域。
	"editor.stickyScroll.enabled": false,

	// 定义要显示的最大粘滞行数。
	"editor.stickyScroll.maxLineCount": 5,

	// 在使用空格进行缩进时模拟制表符的选择行为。所选内容将始终使用制表符停止位。
	"editor.stickyTabStops": false,

	// 此设置已弃用，请改用单独的设置，如"editor.suggest.showKeywords"或"editor.suggest.showSnippets"。
	// 
	"editor.suggest.filteredTypes": {},

	// 控制对建议的筛选和排序是否考虑小的拼写错误。
	"editor.suggest.filterGraceful": true,

	// 控制接受补全时是否覆盖单词。请注意，这取决于扩展选择使用此功能。
	//  - insert: 插入建议而不覆盖光标右侧的文本。
	//  - replace: 插入建议并覆盖光标右侧的文本。
	"editor.suggest.insertMode": "insert",

	// 控制排序时是否首选光标附近的字词。
	"editor.suggest.localityBonus": false,

	// 启用后，IntelliSense 筛选要求第一个字符在单词开头匹配，例如 “Console” 或 “WebContext” 上的 “c”，但 “description” 上的 _not_。禁用后，IntelliSense 将显示更多结果，但仍按匹配质量对其进行排序。
	"editor.suggest.matchOnWordStartOnly": true,

	// 此设置已弃用。现在可以调整建议小组件的大小。
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// 控制是否在编辑器中预览建议结果。
	"editor.suggest.preview": false,

	// 控制是否在多个工作区和窗口间共享记忆的建议选项(需要 `editor.suggestSelection`)。
	"editor.suggest.shareSuggestSelections": false,

	// 启用后，IntelliSense 将显示“类”建议。
	"editor.suggest.showClasses": true,

	// 启用后，IntelliSense 将显示“颜色”建议。
	"editor.suggest.showColors": true,

	// 启用后，IntelliSense 将显示“常量”建议。
	"editor.suggest.showConstants": true,

	// 启用后，IntelliSense 将显示“构造函数”建议。
	"editor.suggest.showConstructors": true,

	// 启用后，IntelliSense 将显示“自定义颜色”建议。
	"editor.suggest.showCustomcolors": true,

	// 启用后，IntelliSense 将显示`已弃用`建议。
	"editor.suggest.showDeprecated": true,

	// 启用后，IntelliSense 将显示 "enumMember" 建议。
	"editor.suggest.showEnumMembers": true,

	// 启用后，IntelliSense 将显示“枚举”建议。
	"editor.suggest.showEnums": true,

	// 启用后，IntelliSense 将显示“事件”建议。
	"editor.suggest.showEvents": true,

	// 启用后，IntelliSense 将显示“字段”建议。
	"editor.suggest.showFields": true,

	// 启用后，IntelliSense 将显示“文件”建议。
	"editor.suggest.showFiles": true,

	// 启用后，IntelliSense 将显示“文件夹”建议。
	"editor.suggest.showFolders": true,

	// 启用后，IntelliSense 将显示“函数”建议。
	"editor.suggest.showFunctions": true,

	// 控制是否在建议中显示或隐藏图标。
	"editor.suggest.showIcons": true,

	// 控制建议详细信息是随标签一起显示还是仅显示在详细信息小组件中
	"editor.suggest.showInlineDetails": true,

	// 启用后，IntelliSense 将显示“接口”建议。
	"editor.suggest.showInterfaces": true,

	// 启用后，IntelliSense 将显示"问题"建议。
	"editor.suggest.showIssues": true,

	// 启用后，IntelliSense 将显示“关键字”建议。
	"editor.suggest.showKeywords": true,

	// 启用后，IntelliSense 将显示“方法”建议。
	"editor.suggest.showMethods": true,

	// 启用后，IntelliSense 将显示“模块”建议。
	"editor.suggest.showModules": true,

	// 启用后，IntelliSense 将显示“操作符”建议。
	"editor.suggest.showOperators": true,

	// 启用后，IntelliSense 将显示“属性”建议。
	"editor.suggest.showProperties": true,

	// 启用后，IntelliSense 将显示“参考”建议。
	"editor.suggest.showReferences": true,

	// 启用后，IntelliSense 将显示“片段”建议。
	"editor.suggest.showSnippets": true,

	// 控制建议小部件底部的状态栏的可见性。
	"editor.suggest.showStatusBar": false,

	// 启用后，IntelliSense 将显示“结构”建议。
	"editor.suggest.showStructs": true,

	// 启用后，IntelliSense 将显示 "typeParameter" 建议。
	"editor.suggest.showTypeParameters": true,

	// 启用后，IntelliSense 将显示“单位”建议。
	"editor.suggest.showUnits": true,

	// 启用后，IntelliSense 将显示"用户"建议。
	"editor.suggest.showUsers": true,

	// 启用后，IntelliSense 将显示“值”建议。
	"editor.suggest.showValues": true,

	// 启用后，IntelliSense 将显示“变量”建议。
	"editor.suggest.showVariables": true,

	// 启用后，IntelliSense 将显示“文本”建议。
	"editor.suggest.showWords": true,

	// 控制活动代码段是否阻止快速建议。
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// 建议小组件的字号。设置为 `0` 时，将使用 `editor.fontSize` 的值。
	"editor.suggestFontSize": 0,

	// 建议小组件的行高。设置为 `0` 时，将使用 `editor.lineHeight` 的值。最小值为 8。
	"editor.suggestLineHeight": 0,

	// 控制在键入触发字符后是否自动显示建议。
	"editor.suggestOnTriggerCharacters": true,

	// 控制在建议列表中如何预先选择建议。
	//  - first: 始终选择第一个建议。
	//  - recentlyUsed: 选择最近的建议，除非进一步键入选择其他项。例如 `console. -> console.log`，因为最近补全过 `log`。
	//  - recentlyUsedByPrefix: 根据之前补全过的建议的前缀来进行选择。例如，`co -> console`、`con -> const`。
	"editor.suggestSelection": "first",

	// 启用 Tab 补全。
	//  - on: 在按下 Tab 键时进行 Tab 补全，将插入最佳匹配建议。
	//  - off: 禁用 Tab 补全。
	//  - onlySnippets: 在前缀匹配时进行 Tab 补全。在 "quickSuggestions" 未启用时体验最好。
	"editor.tabCompletion": "off",

	// 一个制表符等于的空格数。当 `editor.detectIndentation` 打开时，将根据文件内容替代此设置。
	"editor.tabSize": 4,

	// 替代当前所选颜色主题中的编辑器语法颜色和字形。
	"editor.tokenColorCustomizations": {},

	// 删除自动插入的尾随空白符号。
	"editor.trimAutoWhitespace": true,

	// 控制单击已折叠的行后面的空内容是否会展开该行。
	"editor.unfoldOnClickAfterEndOfLine": false,

	// 定义未突出显示的允许字符。
	"editor.unicodeHighlight.allowedCharacters": {},

	// 未突出显示在允许区域设置中常见的 Unicode 字符。
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},

	// 控制是否突出显示可能与基本 ASCII 字符混淆的字符，但当前用户区域设置中常见的字符除外。
	"editor.unicodeHighlight.ambiguousCharacters": true,

	// 控制注释中的字符是否也应进行 Unicode 突出显示。
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

	// 控制字符串中的字符是否也应进行 unicode 突出显示。
	"editor.unicodeHighlight.includeStrings": true,

	// 控制是否突出显示仅保留空格或完全没有宽度的字符。
	"editor.unicodeHighlight.invisibleCharacters": true,

	// 控制是否突出显示所有非基本 ASCII 字符。只有介于 U+0020 到 U+007E 之间的字符、制表符、换行符和回车符才被视为基本 ASCII。
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

	// 删除可能导致问题的异常行终止符。
	//  - auto: 自动删除异常的行终止符。
	//  - off: 忽略异常的行终止符。
	//  - prompt: 提示删除异常的行终止符。
	"editor.unusualLineTerminators": "prompt",

	// 启用此选项可调整代码操作菜单的呈现方式。
	"editor.useCustomCodeActionMenu": true,

	// 根据制表位插入和删除空格。
	"editor.useTabStops": true,

	// 控制是否根据文档中的文字计算自动完成列表。
	"editor.wordBasedSuggestions": true,

	// 控制通过哪些文档计算基于字词的补全。
	//  - currentDocument: 仅建议活动文档中的字词。
	//  - matchingDocuments: 建议使用同一语言的所有打开的文档中的字词。
	//  - allDocuments: 建议所有打开的文档中的字词。
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// 执行单词相关的导航或操作时作为单词分隔符的字符。
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// 控制折行的方式。
	//  - off: 永不换行。
	//  - on: 将在视区宽度处换行。
	//  - wordWrapColumn: 在 `editor.wordWrapColumn` 处折行。
	//  - bounded: 在视区宽度和 `editor.wordWrapColumn` 中的较小值处折行。
	"editor.wordWrap": "off",

	// 在 `editor.wordWrap` 为 `wordWrapColumn` 或 `bounded` 时，控制编辑器的折行列。
	"editor.wordWrapColumn": 80,

	// 控制折行的缩进。
	//  - none: 没有缩进。折行从第 1 列开始。
	//  - same: 折行的缩进量与其父级相同。
	//  - indent: 折行的缩进量比其父级多 1。
	//  - deepIndent: 折行的缩进量比其父级多 2。
	"editor.wrappingIndent": "same",

	// 控制计算包裹点的算法。
	//  - simple: 假定所有字符的宽度相同。这是一种快速算法，适用于等宽字体和某些字形宽度相等的文字(如拉丁字符)。
	//  - advanced: 将包装点计算委托给浏览器。这是一个缓慢算法，可能会导致大型文件被冻结，但它在所有情况下都正常工作。
	"editor.wrappingStrategy": "simple",

	// 控制是否在“源代码管理”视图中始终显示内联操作。
	"scm.alwaysShowActions": false,

	// 控制存储库是否应在源代码管理视图中始终可见。
	"scm.alwaysShowRepositories": false,

	// 控制源代码管理视图在打开文件时是否应自动显示和选择文件。
	"scm.autoReveal": true,

	// 控制活动栏上源代码管理图标上的计数锁屏提醒。
	//  - all: 显示所有源代码管理提供程序计数锁屏提醒的总和。
	//  - focused: 显示焦点源控制提供程序的计数标记。
	//  - off: 禁用源代码管理计数徽章。
	"scm.countBadge": "all",

	// 控制默认的源代码管理仓库视图模式。
	//  - tree: 将仓库更改显示为树。
	//  - list: 将仓库更改显示为列表。
	"scm.defaultViewMode": "list",

	// 控制默认的源代码管理仓库在被视为列表时的更改排序顺序。
	//  - name: 按文件名对仓库更改进行排序。
	//  - path: 按路径对仓库更改进行排序。
	//  - status: 按源代码管理状态对仓库更改进行排序。
	"scm.defaultViewSortKey": "path",

	// 控制编辑器中差异的显示效果。
	//  - all: 显示所有可用位置中的差异装饰。
	//  - gutter: 仅在编辑器行号槽中显示差异装饰。
	//  - overview: 仅在概览标尺中显示差异装饰。
	//  - minimap: 仅在缩略图中显示差异装饰。
	//  - none: 不要显示差异装饰。
	"scm.diffDecorations": "all",

	// 控制源代码管理差异装订线修饰的行为。
	//  - diff: 单击时显示内联差异一览视图。
	//  - none: 不执行任何操作。
	"scm.diffDecorationsGutterAction": "diff",

	// 控制是否将模式用于装订线中的差异修饰。
	"scm.diffDecorationsGutterPattern": {
		"added": false,
		"modified": true
	},

	// 控制行号槽中源代码管理差异装饰器的可见性。
	//  - always: 始终显示行号槽中的差异装饰器。
	//  - hover: 仅在悬停时显示行号槽中的差异装饰器。
	"scm.diffDecorationsGutterVisibility": "always",

	// 控制装订线中差异修饰的宽度(px)(已添加或已修改)。
	"scm.diffDecorationsGutterWidth": 3,

	// 控制在源代码管理差异装订线修饰中是否忽略前导空格和尾随空格。
	//  - true: 忽略前导空格和尾随空格。
	//  - false: 不要忽略前导空格和尾随空格。
	//  - inherit: 继承自 `diffEditor.ignoreTrimWhitespace`。
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",

	// 控制输入消息的字体。将 `default` 用于工作台用户界面字体系列，将 `editor` 用于 `editor.fontFamily` 的值，或者使用自定义字体系列。
	"scm.inputFontFamily": "default",

	// 控制输入消息的字号(以像素为单位)。
	"scm.inputFontSize": 13,

	// 控制源代码管理提供程序标头的计数锁屏提醒。仅在有多个提供程序时才显示这些标头。
	//  - hidden: 隐藏源代码管理提供程序计数锁屏提醒。
	//  - auto: 仅显示非零时源代码管理提供程序的计数锁屏提醒。
	//  - visible: 显示源代码管理提供程序计数锁屏提醒。
	"scm.providerCountBadge": "hidden",

	// 控制源代码管理存储库视图中存储库的排序顺序。
	//  - discovery time: 按发现时间对源代码管理存储库视图中的存储库排序。按所选顺序对源代码管理视图中的存储库排序。
	//  - name: 按仓库名称对源代码管理仓库和源代码管理视图中的仓库排序。
	//  - path: 按仓库路径对源代码管理仓库和源代码管理视图中的仓库排序。
	"scm.repositories.sortOrder": "discovery time",

	// 控制在“源代码管理存储库”部分中可见的存储库数。设置为 "0", 以便能够手动调整视图的大小。
	"scm.repositories.visible": 10,

	// 控制是否可以在源代码管理视图中显示操作按钮。
	"scm.showActionButton": true,

	// 控制何时显示受限模式横幅。
	//  - always: 每次打开不受信任的工作区时显示横幅。
	//  - untilDismissed: 打开不受信任的工作区时显示横幅，直到关闭为止。
	//  - never: 打开不受信任的工作区时，不要显示横幅。
	"security.workspace.trust.banner": "untilDismissed",

	// 控制空窗口在 VS Code 中是否默认受信任。当与 `security.workspace.trust.untrustedFiles` 一起使用时，可以启用 VS Code 的完整功能，而无需在空窗口中进行提示。
	"security.workspace.trust.emptyWindow": true,

	// 控制是否在 VS Code 内启用工作区信任。
	"security.workspace.trust.enabled": true,

	// 控制何时显示信任工作区的启动提示。
	//  - always: 每次打开不受信任的工作区时请求信任。
	//  - once: 首次打开不受信任的工作区时请求信任。
	//  - never: 每次打开不受信任的工作区时不请求信任。
	"security.workspace.trust.startupPrompt": "once",

	// 控制如何处理在受信任的工作区中打开不受信任的文件。此设置也适用于通过 `#security.workspace.trust.emptyWindow#" 打开的空窗口中的文件。
	//  - prompt: 询问每个工作区如何处理不受信任文件。将不受信任的文件引入受信任的工作区后，将不会再次提示你。
	//  - open: 始终允许不受信任的文件引入受信任的工作区，而不显示提示。
	//  - newWindow: 在受限模式下的独立窗口中始终打开不受信任的文件，而不显示提示。
	"security.workspace.trust.untrustedFiles": "prompt",

	// 控制在工作台中单击活动栏图标时出现的行为。
	//  - toggle: 如果单击的项已可见，则隐藏边栏。
	//  - focus: 如果单击的项已可见，则将焦点放在边栏上。
	"workbench.activityBar.iconClickBehavior": "toggle",

	// 控制工作台中活动栏的可见性。
	"workbench.activityBar.visible": true,

	// 覆盖当前所选颜色主题的颜色。
	"workbench.colorCustomizations": {},

	// 指定用在工作台中的颜色主题。
	"workbench.colorTheme": "Default Dark+",

	// 控制命令面板中保留最近使用命令的数量。设置为 0 时禁用命令历史功能。
	"workbench.commandPalette.history": 50,

	// 当再次打开命令面板时，控制是否恢复上一次输入的内容。
	"workbench.commandPalette.preserveInput": false,

	// 如果与列出的其中一个类型匹配的编辑器作为编辑器组中的第一个编辑器打开，且打开了多个组，则该组会自动锁定。锁定的组仅用于在用户手势(例如拖放)显式选择时打开编辑器，默认情况下不使用。因此，锁定的组中的活动编辑器不太可能被意外替换为其他编辑器。
	"workbench.editor.autoLockGroups": {
		"default": false,
		"vscode-interactive-input": false,
		"interactive": false,
		"workbench.editorinputs.searchEditorInput": false,
		"imagePreview.previewEditor": false,
		"vscode.markdown.preview.editor": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"jsProfileVisualizer.heapprofile.table": false,
		"gitlens.rebase": false,
		"java.formatterSettingsEditor": false,
		"terminalEditor": true,
		"jupyter-notebook": false,
		"mainThreadWebview-markdown.preview": false
	},

	// 如果在居中布局中打开了超过一组编辑器，控制是否自动将宽度调整为最大宽度值。当回到只打开了一组编辑器的状态，将自动将宽度调整为原始的居中宽度值。
	"workbench.editor.centeredLayoutAutoResize": true,

	// 控制编辑器组中最后一个选项卡关闭时这个空组的行为。若启用，将自动关闭空组。若禁用，空组仍将保留在网格布局中。
	"workbench.editor.closeEmptyGroups": true,

	// 控制在会话期间显示已打开文件的编辑器是否应在被其他进程删除或重命名时自动关闭。禁用此功能将使编辑器在此类事件中保持打开状态。请注意，从应用程序内删除将始终关闭编辑器，且永远不会关闭具有未保存更改的编辑器以保留数据。
	"workbench.editor.closeOnFileDelete": false,

	// 控制编辑器文件修饰是否应使用徽章。
	"workbench.editor.decorations.badges": true,

	// 控制编辑器文件修饰是否应使用颜色。
	"workbench.editor.decorations.colors": true,

	// 检测为二进制文件的默认编辑器。如果未定义，将向用户显示选取器。
	"workbench.editor.defaultBinaryEditor": "",

	// 控制打开的编辑器是否显示为预览编辑器。预览编辑器不会保持打开状态，在将其显式设置为保持打开(例如通过双击或编辑)前将会重复使用，其文件名显示样式为斜体。
	"workbench.editor.enablePreview": true,

	// 控制当从编辑器开始进行代码导航时，编辑器是否保持为预览状态。预览编辑器不会保持打开状态，在将其显式设置为保持打开(例如通过双击或编辑)前将会重复使用。当 "#workbench.editor.enablePreview#" 处于禁用状态时，将忽略此值。
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// 控制通过 Quick Open 打开的编辑器是否显示为预览编辑器。预览编辑器不会保持打开状态，在将其显式设置为保持打开(例如通过双击或编辑)前将会重复使用。当 "#workbench.editor.enablePreview#" 处于禁用状态时，将忽略此值。
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// 控制是否按最常使用的顺序或从左到右的顺序关闭选项卡。
	"workbench.editor.focusRecentEditorAfterClose": true,

	// 控制是否在具有未保存更改的编辑器的选项卡上绘制顶部边框。当禁用 `workbench.editor.showTabs` 时，会忽略此值。
	"workbench.editor.highlightModifiedTabs": false,

	// 允许在语言检测中使用编辑器历史记录。这会导致自动语言检测偏向于最近打开的语言，并允许自动语言检测使用较小的输入进行操作。
	"workbench.editor.historyBasedLanguageDetection": true,

	// 控制编辑器标签的格式。
	//  - default: 显示文件名。当启用选项卡且在同一组内有两个相同名称的文件时，将添加每个文件路径中可以用于区分的部分。在选项卡被禁用且编辑器活动时，将显示相对于工作区文件夹的路径。
	//  - short: 在文件的目录名之后显示文件名。
	//  - medium: 在文件相对当前工作区文件夹的路径之后显示文件名。
	//  - long: 在文件的绝对路径之后显示文件名。
	"workbench.editor.labelFormat": "default",

	// 控制是否自动检测文本编辑器中的语言，除非该语言已由语言选择器显式设置。这也可以按语言确定范围，以便你可以指定不希望关闭的语言。这对于像 Markdown 这样的语言很有用，因为它通常包含可能会欺骗语言检测的其他语言，使其认为它是嵌入语言而不是 Markdown。
	"workbench.editor.languageDetection": true,

	// 启用后，当编辑器语言与检测到的内容语言不匹配时，显示状态栏快速修复。
	"workbench.editor.languageDetectionHints": {
		"untitledEditors": true,
		"notebookEditors": true
	},

	// 控制打开的编辑器数是否应受限制。启用后，最近使用较少的编辑器将关闭，以为新打开的编辑器腾出空间。
	"workbench.editor.limit.enabled": false,

	// 控制打开的编辑器的最大数目是否应排除脏编辑器以计入配置的限制。
	"workbench.editor.limit.excludeDirty": false,

	// 控制最大打开的编辑器的限制是否应应用于每个编辑器组或所有编辑器组。
	"workbench.editor.limit.perEditorGroup": false,

	// 控制打开编辑器的最大数量。使用 `workbench.editor.limit.perEditorGroup` 设置控制每个编辑器组或跨所有组的限制。
	"workbench.editor.limit.value": 10,

	// 允许使用鼠标按钮四和五执行“返回”和“前进”命令。
	"workbench.editor.mouseBackForwardToNavigate": true,

	// 控制编辑器中“返回”和“前进”等命令的历史导航范围。
	//  - default: 浏览所有打开的编辑器和编辑器组。
	//  - editorGroup: 仅在活动编辑器组的编辑器中导航。
	//  - editor: 仅在活动编辑器中导航。
	"workbench.editor.navigationScope": "default",

	// 控制编辑器打开的位置。选择 `left` 或 `right` 可分别在当前活动编辑器的左侧或右侧打开。选择 `first` (最前) 或 `last` (最后) 打开的位置与当前活动编辑器无关。
	"workbench.editor.openPositioning": "right",

	// 控制编辑器在并排打开时(例如从资源管理器)出现的默认位置。默认在当前活动编辑器右侧打开。若更改为 "down"，则在当前活动编辑器下方打开。
	"workbench.editor.openSideBySideDirection": "right",

	// 控制固定的编辑器选项卡的大小。固定的选项卡排在所有打开的选项卡的开头，并且在取消固定之前，通常不会关闭。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
	//  - normal: 固定的选项卡会继承未固定的选项卡的外观。
	//  - compact: 固定的选项卡将以紧凑形式显示，其中只包含图标或编辑器名称的第一个字母。
	//  - shrink: 固定的选项卡缩小至紧凑的固定大小，显示编辑器名称的各部分。
	"workbench.editor.pinnedTabSizing": "normal",

	// 启用后，将编辑器历史记录考虑在内的语言检测模型将获得更高的优先级。
	"workbench.editor.preferHistoryBasedLanguageDetection": false,

	// 关闭编辑器后，当重新打开时，还原最后的编辑器视图状态(例如滚动位置)。编辑器视图状态存储在每个编辑器组中，且会在组关闭时被放弃。使用 `workbench.editor.sharedViewState` 设置以跨所有编辑器组使用最后已知的视图状态，以防未找到编辑器组之前的视图状态。
	"workbench.editor.restoreViewState": true,

	// 控制是否在打开的任何可见组中显示编辑器。如果禁用，编辑器将优先在当前活动的编辑器组中打开。如果启用，将会显示在已打开的编辑器，而不是在当前活动的编辑器组中再次打开。请注意，有些情况下会忽略此设置，例如，强制编辑器在特定组中打开或当前活动组的一侧时。
	"workbench.editor.revealIfOpen": false,

	// 控制在滚动到选项卡上方时是否打开这些选项卡。默认情况下，选项卡仅在鼠标滚动时呈现，但不打开。可通过在滚动时按住 Shift 键来更改滚动期间的此行为。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
	"workbench.editor.scrollToSwitchTabs": false,

	// 跨所有编辑器组保留最新的编辑器视图状态(例如滚动位置)，并在未找到编辑器组的特定编辑器视图状态时进行还原。
	"workbench.editor.sharedViewState": false,

	// 控制是否在打开的编辑器中显示图标。这要求同时启用文件图标主题。
	"workbench.editor.showIcons": true,

	// 控制打开的编辑器是否显示在选项卡中。
	"workbench.editor.showTabs": true,

	// 控制在编辑器组中垂直或水平拆分编辑器时的布局。
	//  - vertical: 从上到下定位编辑器。
	//  - horizontal: 从左到右定位编辑器。
	"workbench.editor.splitInGroupLayout": "horizontal",

	// 通过将编辑器或文件放到编辑器区域的边缘，控制是否可以由拖放操作拆分编辑器组。
	"workbench.editor.splitOnDragAndDrop": true,

	// 拆分编辑器组时控制编辑器组大小。
	//  - distribute: 将所有编辑器组拆分为相等的部分。
	//  - split: 将活动编辑器组拆分为相等的部分。
	"workbench.editor.splitSizing": "distribute",

	// 控制编辑器的选项卡关闭按钮的位置，或者在设置为 "off" 时禁用它们。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
	"workbench.editor.tabCloseButton": "right",

	// 控制编辑器选项卡的大小调整。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
	//  - fit: 始终将标签页保持足够大，能够完全显示编辑器标签。
	//  - shrink: 在不能同时显示所有选项卡时，允许选项卡缩小。
	"workbench.editor.tabSizing": "fit",

	// 控制编辑器标题区域中用于选项卡和面包屑的滚动条的高度。
	//  - default: 默认大小。
	//  - large: 增加大小，以便更轻松地通过鼠标抓取。
	"workbench.editor.titleScrollbarSizing": "default",

	// 控制编辑器中是否应显示无标题文本提示。
	"workbench.editor.untitled.hint": "text",

	// 控制无标题编辑器的标签格式。
	//  - content: 无标题文件的名称派生自其第一行的内容，除非它有关联的文件路径。如果行为空或不包含单词字符，它将回退到名称。
	//  - name: 无标题文件的名称不是从文件的内容派生的。
	"workbench.editor.untitled.labelFormat": "content",

	// 控制当超出可用空间时，选项卡是否应在多行之间换行，或者是否应显示滚动条。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
	"workbench.editor.wrapTabs": false,

	// 将 glob 模式配置到编辑器(例如 `"*.hex": "hexEditor.hexEdit"`)。这些优先顺序高于默认行为。
	"workbench.editorAssociations": {},

	// 从 Microsoft 联机服务中获取要进行的实验。
	"workbench.enableExperiments": true,

	// 控制是否自动继续当前工作区的可用编辑会话。
	//  - onReload: 在窗口重新加载时自动恢复可用的编辑会话。
	//  - off: 切勿尝试恢复编辑会话。
	"workbench.experimental.editSessions.autoResume": "onReload",

	// 控制是否自动存储当前工作区的可用编辑会话。
	//  - onShutdown: 在窗口关闭时自动存储当前编辑会话。
	//  - off: 从不尝试自动存储编辑会话。
	"workbench.experimental.editSessions.autoStore": "off",

	// 控制在 Web、桌面或设备之间切换时是否显示启用云的操作来存储和继续未提交的更改。
	"workbench.experimental.editSessions.enabled": false,

	// 已弃用此设置，以支持 `workbench.layoutControl.enabled`
	// 控制是否通过 `window.titleBarStyle` 启用自定义标题栏中的布局控件。
	"workbench.experimental.layoutControl.enabled": false,

	// 已弃用此设置，以支持 `workbench.layoutControl.type`
	// 控制自定义标题栏中的布局控件是显示为单个菜单按钮还是多个 UI 切换。
	//  - menu: 显示包含布局选项下拉列表的单个按钮。
	//  - toggles: 显示用于切换面板和侧边栏可见性的多个按钮。
	//  - both: 显示下拉列表和切换按钮。
	"workbench.experimental.layoutControl.type": "both",

	// 控制是否启用“设置配置文件”预览功能。
	"workbench.experimental.settingsProfiles.enabled": false,

	// 配置开启程序以用于外部 URI (即 http、https)。
	"workbench.externalUriOpeners": {},

	// 控制为工作台项显示悬停之前的延迟时间(以毫秒为单位)(例如，一些扩展提供了树状视图项)。已经可见的项可能需要刷新，然后才会反映出此设置更改。
	"workbench.hover.delay": 500,

	// 指定工作台中使用的文件图标主题；若指定为 "null"，则不显示任何文件图标。
	//  - null: 无文件图标
	//  - vs-minimal
	//  - vs-seti
	"workbench.iconTheme": "vs-seti",

	// 控制是否通过 `window.titleBarStyle` 启用自定义标题栏中的布局控件。
	"workbench.layoutControl.enabled": true,

	// 控制自定义标题栏中的布局控件是显示为单个菜单按钮还是多个 UI 切换。
	//  - menu: 显示包含布局选项下拉列表的单个按钮。
	//  - toggles: 显示用于切换面板和侧边栏可见性的多个按钮。
	//  - both: 显示下拉列表和切换按钮。
	"workbench.layoutControl.type": "both",

	// 控制工作台中列表和树的默认查找模式。
	//  - highlight: 搜索时突出显示元素。进一步向上和向下导航将仅遍历突出显示的元素。
	//  - filter: 搜索时筛选元素。
	"workbench.list.defaultFindMode": "highlight",

	// 按下"Alt"时滚动速度倍增。
	"workbench.list.fastScrollSensitivity": 5,

	// 控制列表和树是否支持工作台中的水平滚动。警告: 打开此设置影响会影响性能。
	"workbench.list.horizontalScrolling": false,

	// 请改用 “workbench.list.defaultFindMode”。
	// 控制工作台中的列表和树的键盘导航样式。它可为“简单”、“突出显示”或“筛选”。
	//  - simple: 简单键盘导航聚焦与键盘输入相匹配的元素。仅对前缀进行匹配。
	//  - highlight: 高亮键盘导航会突出显示与键盘输入相匹配的元素。进一步向上和向下导航将仅遍历突出显示的元素。
	//  - filter: 筛选器键盘导航将筛选出并隐藏与键盘输入不匹配的所有元素。
	"workbench.list.keyboardNavigation": "highlight",

	// 对鼠标滚轮滚动事件的 `deltaX` 和 `deltaY` 乘上的系数。
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// 在通过鼠标多选树和列表条目时使用的修改键 (例如“资源管理器”、“打开的编辑器”和“源代码管理”视图)。“在侧边打开”功能所需的鼠标动作 (若可用) 将会相应调整，不与多选修改键冲突。
	//  - ctrlCmd: 映射为 `Ctrl` (Windows 和 Linux) 或 `Command` (macOS)。
	//  - alt: 映射为 `Alt` (Windows 和 Linux) 或 `Option` (macOS)。
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// 控制如何使用鼠标打开树和列表中的项(若支持)。请注意，如果此设置不适用，某些树和列表可能会选择忽略它。
	"workbench.list.openMode": "singleClick",

	// 控制列表和树是否具有平滑滚动效果。
	"workbench.list.smoothScrolling": false,

	// 控制是否启用本地文件历史记录。启用后，所保存编辑器文件内容将存储到备份位置，以便稍后可以还原或查看内容。更改此设置不会影响现有本地文件历史记录条目。
	"workbench.localHistory.enabled": true,

	// 配置 [glob 模式](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) 以从本地文件历史记录中排除文件。更改此设置不会影响现有本地文件历史记录条目。
	"workbench.localHistory.exclude": {},

	// 控制每个文件的最大本地文件历史记录条目数。当文件的本地文件历史记录条目数超过此数目时，将丢弃最早的条目。
	"workbench.localHistory.maxFileEntries": 50,

	// 控制考虑用于本地历史记录的文件最大大小(KB)。较大的文件将不会添加到本地历史记录中。更改此设置不会影响现有本地文件历史记录条目。
	"workbench.localHistory.maxFileSize": 256,

	// 配置时间间隔(以秒为单位)，在此间隔期间，本地文件历史记录中的最后一个条目将替换为正在添加的条目。这有助于减少所添加的条目总数，例如启用自动保存时。此设置仅应用于具有相同源的条目。更改此设置不会影响现有本地文件历史记录条目。
	"workbench.localHistory.mergeWindow": 10,

	// 控制新工作区中面板(终端、调试控制台、输出、问题)的默认位置。它可以显示在编辑器区域的底部、右侧或左侧。
	"workbench.panel.defaultLocation": "bottom",

	// 控制面板是否以最大化方式打开。它可以始终以最大化方式打开、永不以最大化方式打开或以关闭前的最后一个状态打开。
	//  - always: 始终以最大化方式打开面板。
	//  - never: 永不以最大化方式打开面板。面板将以非最大化方式打开。
	//  - preserve: 以关闭面板前的状态打开面板。
	"workbench.panel.opensMaximized": "preserve",

	// 指定启用了 `window.autoDetectColorScheme` 时深色操作系统外观的首选颜色主题。
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// 指定启用了 `window.autoDetectHighContrast` 时在高对比度深色模式下使用的首选颜色主题。
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// 指定启用了 `window.autoDetectHighContrast` 时在高对比度浅色模式下使用的首选颜色主题。
	"workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

	// 指定启用了 `window.autoDetectColorScheme` 时浅色操作系统外观的首选颜色主题。
	"workbench.preferredLightColorTheme": "Default Light+",

	// 指定使用的产品图标主题。
	//  - Default: 默认
	"workbench.productIconTheme": "Default",

	// 控制 Quick Open 是否在其失去焦点时自动关闭。
	"workbench.quickOpen.closeOnFocusLost": true,

	// 在打开 Quick Open 视图时，控制是否自动恢复上一次输入的值。
	"workbench.quickOpen.preserveInput": false,

	// 控制工作台是否应以更少的动画呈现。
	//  - on: 始终减少动作呈现。
	//  - off: 不要减少运动呈现
	//  - auto: 根据 OS 配置减少运动呈现。
	"workbench.reduceMotion": "auto",

	// 控制视图/编辑器之间拖动区域的悬停反馈延迟(以毫秒为单位)。
	"workbench.sash.hoverDelay": 300,

	// 控制视图/编辑器之间拖动区域的反馈区域大小(以像素为单位)。如果你认为很难使用鼠标调整视图的大小，请将该值调大。
	"workbench.sash.size": 4,

	// 配置默认使用的设置编辑器。
	//  - ui: 使用设置 ui 编辑器。
	//  - json: 使用 json 文件编辑器。
	"workbench.settings.editor": "ui",

	// 控制是否在设置中启用自然语言搜索。自然语言搜索由 Microsoft 联机服务提供。
	"workbench.settings.enableNaturalLanguageSearch": true,

	// 控制在打开按键绑定设置时是否同时打开显示所有默认按键绑定的编辑器。
	"workbench.settings.openDefaultKeybindings": false,

	// 控制在打开设置时是否同时打开显示所有默认设置的编辑器。
	"workbench.settings.openDefaultSettings": false,

	// 控制设置编辑器的目录在搜索时的行为。
	//  - hide: 在搜索时隐藏目录。
	//  - filter: 筛选目录为仅显示含有匹配设置的类别。单击一个类别将仅显示该类别的结果。
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// 控制在将设置编辑为 json 时是否使用拆分 json 编辑器。
	"workbench.settings.useSplitJSON": false,

	// 控制主边栏和活动栏的位置。它们可以显示在工作台的左侧或右侧。辅助边栏将显示在工作台的另一侧。
	"workbench.sideBar.location": "left",

	// 在没有从上一会话中恢复出信息的情况下，控制启动时显示的编辑器。
	//  - none: 在启动时不打开编辑器。
	//  - welcomePage: 打开包含帮助开始使用 VS Code 和扩展内容的欢迎页面。
	//  - readme: 当打开包含自述文件的文件夹时，请打开自述文件，否则会回退到 'welcomePage'。请注意: 仅在作为全局 配置时才遵守此操作，如果在工作区或文件夹配置中进行设置，则此将被忽略。
	//  - newUntitledFile: 打开一个新的无标题文件(仅在打开一个空窗口时适用)。
	//  - welcomePageInEmptyWorkbench: 在打开空工作区时打开欢迎页面。
	"workbench.startupEditor": "welcomePage",

	// 控制工作台底部状态栏的可见性。
	"workbench.statusBar.visible": true,

	// 启用后，当没有打开编辑器时将显示水印提示。
	"workbench.tips.enabled": true,

	// 控制在单击文件夹名称时如何扩展树文件夹。请注意，如果不适用，某些树和列表可能会选择忽略此设置。
	"workbench.tree.expandMode": "singleClick",

	// 控制树缩进(以像素为单位)。
	"workbench.tree.indent": 8,

	// 控制树是否应呈现缩进参考线。
	"workbench.tree.renderIndentGuides": "onHover",

	// 启用后，在受信任的工作区中打开链接时，将显示受信任的域提示。
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// 控制是否显示视图头部的操作项。视图头部操作项可以一直，或是仅当聚焦到和悬停在视图上时显示。
	"workbench.view.alwaysShowHeaderActions": false,

	// 启用后，入门页面将包含指向视频教程的其他链接。
	"workbench.welcomePage.experimental.videoTutorials": "off",

	// 已弃用，请使用全局 `workbench.reduceMotion`。
	// 启用后，减少欢迎页中的移动。
	"workbench.welcomePage.preferReducedMotion": false,

	// 启用后，扩展的演练将在安装扩展时打开。
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// 如果已设置，则根据 OS 外观自动切换到首选颜色主题。如果 OS 外观为深色，则使用 `workbench.preferredDarkColorTheme#` 处指定的主题。如果外观为浅色，则使用 `#workbench.preferredLightColorTheme` 处指定的主题。
	"window.autoDetectColorScheme": false,

	// 如果已启用，将自动更改为高对比度主题；如果操作系统正在使用高对比度主题。使用高对比度主题是由 `workbench.preferredHighContrastColorTheme#` 和 `#workbench.preferredHighContrastLightColorTheme` 指定的
	"window.autoDetectHighContrast": true,

	// 控制在关闭最后一个编辑器时是否关闭整个窗口。此设置仅适用于没有显示文件夹的窗口。
	"window.closeWhenEmpty": false,

	// 将命令启动器与窗口标题一起显示。仅当 `window.titleBarStyle` 设置为 `custom` 时，此设置才会生效。
	"window.commandCenter": false,

	// 控制是否在关闭窗口或退出应用程序之前显示确认对话框。
	//  - always: 始终询问确认。
	//  - keyboardOnly: 仅在已使用键绑定时请求确认。
	//  - never: 从不显式请求确认。
	"window.confirmBeforeClose": "never",

	// 控制是否通过按 Alt 键聚焦菜单栏。此设置对使用 Alt 键切换菜单栏没有任何影响。
	"window.customMenuBarAltFocus": true,

	// 调整对话框窗口的外观。
	"window.dialogStyle": "native",

	// 如果启用, 双击标题栏中的应用程序图标将关闭窗口, 并且该窗口无法通过图标拖动。此设置仅在 "#window.titleBarStyle#" 设置为 "custom" 时生效。
	"window.doubleClickIconToClose": false,

	// 控制是否可通过 Alt 键快捷键打开主菜单。如果禁用助记符，则可将这些 Alt 键快捷键绑定到编辑器命令。
	"window.enableMenuBarMnemonics": true,

	// 实验性: 启用后，窗口将通过 Electron API 启用沙盒模式。
	"window.experimental.useSandbox": false,

	// 使用平台提供的窗口控件，而不是基于 HTML 的窗口控件。需要完全重启才能应用更改。
	"window.experimental.windowControlsOverlay.enabled": false,

	// 控制菜单栏的可见性。“切换”设置表示菜单栏处于隐藏状态，只需按一下 Alt 键即可显示。“精简”设置会将菜单移到边栏中。
	//  - classic: 菜单显示在窗口顶部，并且仅在全屏模式下隐藏。
	//  - visible: 即使在全屏模式下，菜单也始终显示在窗口顶部。
	//  - toggle: 菜单处于隐藏状态，但通过按 Alt 键可在窗口顶部显示。
	//  - hidden: 菜单始终隐藏。
	//  - compact: 菜单在边栏中显示为紧凑按钮。当 `window.titleBarStyle` 为 `native` 时，会忽略此值。
	"window.menuBarVisibility": "classic",

	// 控制在已有窗口时新开窗口的尺寸。请注意，此设置对第一个打开的窗口无效。第一个窗口将始终恢复关闭前的大小和位置。
	//  - default: 在屏幕中心打开新窗口。
	//  - inherit: 以与上一个活动窗口相同的尺寸打开新窗口。
	//  - offset: 打开与上次活动窗口具有相同尺寸的新窗口，并带有偏移位置。
	//  - maximized: 打开最大化的新窗口。
	//  - fullscreen: 在全屏模式下打开新窗口。
	"window.newWindowDimensions": "default",

	// 控制是否应在使用命令行或文件对话框时在新窗口中打开文件。
	// 请注意，此设置可能会被忽略(例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时)。
	//  - on: 在新窗口中打开文件。
	//  - off: 在文件所在文件夹的已有窗口中或在上一个活动窗口中打开文件。
	//  - default: 在新窗口中打开文件，除非文件从应用程序内进行选取 (例如，通过“文件”菜单)。
	"window.openFilesInNewWindow": "off",

	// 控制打开文件夹时是在新窗口打开还是替换上一个活动窗口。
	// 注意，此设置可能会被忽略 (例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时)。
	//  - on: 在新窗口中打开文件夹。
	//  - off: 文件夹将替换上一个活动窗口。
	//  - default: 在新窗口中打开文件夹，除非文件夹从应用程序内进行选取 (例如，通过“文件”菜单)。
	"window.openFoldersInNewWindow": "default",

	// 在另一实例无参启动时，控制是打开新的空窗口或是聚焦到最后运行的实例。
	// 注意，此设置可能会被忽略 (例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时)。
	//  - on: 打开一个新的空窗口。
	//  - off: 聚焦到上一活动的运行实例。
	"window.openWithoutArgumentsInNewWindow": "on",

	// 若窗口在处于全屏模式时退出，控制其在恢复时是否还原到全屏模式。
	"window.restoreFullscreen": false,

	// 控制在第一次启动后窗口重新打开的方式。如果应用程序已在运行，则此设置不起任何作用。
	//  - preserve: 始终重新打开所有窗口。如果打开文件夹或工作区(例如从命令行打开)，它将作为新窗口打开，除非它之前已打开。如果打开文件，则这些文件将在其中一个已还原的窗口中打开。
	//  - all: 重新打开所有窗口，除非已打开文件夹、工作区或文件(例如从命令行)。
	//  - folders: 重新打开已打开文件夹或工作区的所有窗口，除非已打开文件夹、工作区或文件(例如从命令行)。
	//  - one: 重新打开上一个活动窗口，除非已打开文件夹、工作区或文件(例如从命令行)。
	//  - none: 从不重新打开窗口。如果文件夹或工作区未打开(例如从命令行)，将出现一个空窗口。
	"window.restoreWindows": "all",

	// 根据活动编辑器控制窗口标题。变量是根据上下文替换的:
	// - "${activeEditorShort}": 文件名 (例如 myFile.txt)。
	// - "${activeEditorMedium}": 相对于工作区文件夹的文件路径 (例如, myFolder/myFileFolder/myFile.txt)。
	// - "${activeEditorLong}": 文件的完整路径 (例如 /Users/Development/myFolder/myFileFolder/myFile.txt)。
	// - "${activeFolderShort}": 文件所在的文件夹名称 (例如, myFileFolder)。
	// - "${activeFolderMedium}": 相对于工作区文件夹的、包含文件的文件夹的路径, (例如 myFolder/myFileFolder)。
	// - "${activeFolderLong}": 文件所在文件夹的完整路径 (例如 /Users/Development/myFolder/myFileFolder)。
	// - "${folderName}": 文件所在工作区文件夹的名称 (例如 myFolder)。
	// - "${folderpath}": 文件所在工作区文件夹的路径 (例如 /Users/Development/myFolder)。
	// - "${rootName}": 打开的工作区或文件夹的名称 (例如 myFolder 或 myWorkspace)。
	// - "${rootPath}": 打开的工作区或文件夹的文件路径 (例如 /Users/Development/myWorkspace)。
	// - "${appName}": 例如 VS Code。
	// - `${remoteName}`: 例如 SSH
	// - `${dirty}`: 表明活动编辑器具有未保存更改的时间的指示器。
	// - "${separator}": 一种条件分隔符 ("-"), 仅在被包含值或静态文本的变量包围时显示。
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

	// 调整窗口标题栏的外观。在 Linux 和 Windows 上，此设置也会影响应用程序和上下文菜单的外观。更改需要完全重新启动才能应用。
	"window.titleBarStyle": "custom",

	// `window.title` 使用的分隔符。
	"window.titleSeparator": " - ",

	// 调整窗口的缩放级别。原始大小是 0，每次递增(例如 1)或递减(例如 -1)表示放大或缩小 20%。也可以输入小数以便以更精细的粒度调整缩放级别。
	"window.zoomLevel": 0,

	// 控制在打开禅模式时是否启用居中布局。
	"zenMode.centerLayout": true,

	// 控制在打开禅模式时是否将工作台切换到全屏。
	"zenMode.fullScreen": true,

	// 控制在打开禅模式时是否隐藏工作台左侧或右侧的活动栏。
	"zenMode.hideActivityBar": true,

	// 控制在打开禅模式时是否隐藏编辑器行号。
	"zenMode.hideLineNumbers": true,

	// 控制在打开禅模式时是否隐藏工作台底部的状态栏。
	"zenMode.hideStatusBar": true,

	// 控制在打开禅模式时是否隐藏工作台选项卡。
	"zenMode.hideTabs": true,

	// 若窗口在处于禅模式时退出，控制其在恢复时是否还原到禅模式。
	"zenMode.restore": true,

	// 控制在禅模式下是否应启用通知“请勿打扰”模式。如果为 true，则只会弹出错误通知。
	"zenMode.silentNotifications": true,

	// 控制截屏模式键盘的字体大小(以像素为单位)。
	"screencastMode.fontSize": 56,

	// 控制截屏模式下键盘覆盖显示的时长(以毫秒为单位)。
	"screencastMode.keyboardOverlayTimeout": 800,

	// 控制显示快捷方式时键盘覆盖中显示的内容。
	//  - keys: 密钥。
	//  - command: 命令标题。
	//  - commandWithGroup: 以其组为前缀的命令标题。
	//  - commandAndKeys: 命令标题和密钥。
	//  - commandWithGroupAndKeys: 命令标题和密钥，其中命令以其组为前缀。
	"screencastMode.keyboardShortcutsFormat": "commandAndKeys",

	// 控制截屏视频模式下鼠标指示器的十六进制(#RGB、#RGBA、#RRGGBB 或 #RRGGBBAA)的颜色。
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// 控制截屏模式下鼠标光标的大小(以像素为单位)。
	"screencastMode.mouseIndicatorSize": 20,

	// 仅在截屏模式下显示键盘快捷方式。
	"screencastMode.onlyKeyboardShortcuts": false,

	// 控制截屏模式叠加的垂直偏移,从底部作为工作台高度的百分比。
	"screencastMode.verticalOffset": 20,

	// 配置语言的文件关联 (如: `"*.extension": "html"`)。这些关联的优先级高于已安装语言的默认关联。
	"files.associations": {},

	// 启用后，编辑器将尝试在打开文件时猜测字符集编码。还可以按语言配置此设置。请注意，文本搜索不遵守此设置。仅遵守 `files.encoding`。
	"files.autoGuessEncoding": false,

	// 控制具有未保存更改的编辑器的 [自动保存](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)。
	//  - off: 具有更改的编辑器永远不会自动保存。
	//  - afterDelay: 在配置的 `files.autoSaveDelay` 之后，会自动保存具有更改的编辑器。
	//  - onFocusChange: 当编辑器失去焦点时，会自动保存具有更改的编辑器。
	//  - onWindowChange: 当窗口失去焦点时，会自动保存具有更改的编辑器。
	"files.autoSave": "off",

	// 控制自动保存具有未保存更改的编辑器之前的延迟(以毫秒为单位)。只有当 `files.autoSave` 设置为 `afterDelay` 时才适用。
	"files.autoSaveDelay": 1000,

	// 分配给新文件的默认语言标识符。如果配置为 "${activeEditorLanguage}"，将使用当前活动文本编辑器(如果有)的语言标识符。
	"files.defaultLanguage": "",

	// 在删除文件或文件夹时，将它们移动到操作系统的“废纸篓”中 (Windows 为“回收站”)。禁用此设置将永久删除文件或文件夹。
	"files.enableTrash": true,

	// 在读取和写入文件时使用的默认字符集编码。可以按语言对此项进行配置。
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// 默认行尾字符。
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: 使用具体操作系统规定的行末字符。
	"files.eol": "auto",

	// 配置 [glob 模式](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)以排除文件和文件夹。例如，文件资源管理器根据此设置决定要显示或隐藏的文件和文件夹。请参阅 "#search.exclude#" 设置以定义特定于搜索的排除。
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// 控制是否在会话间记住未保存的文件，以允许在退出编辑器时跳过保存提示。
	//  - off: 禁用热退出。当尝试关闭具有未保存更改的编辑器的窗口时，将显示提示。
	//  - onExit: 触发 "workbench.action.quit" 命令(命令面板、键绑定、菜单)或在 Windows/Linux 上关闭最后一个窗口时，将触发热退出。所有未打开文件夹的窗口都将在下次启动时恢复。可通过“文件”>“打开最近使用的文件”>“更多…”，访问之前打开的窗口(包含未保存的文件)列表
	//  - onExitAndWindowClose: 触发 "workbench.action.quit" 命令(命令面板、键绑定、菜单)或在 Windows/Linux 上关闭最后一个窗口时将触发热退出，还将对已打开文件夹的所有窗口触发热退出(无论是否是最后一个窗口)。所有未打开文件夹的窗口将在下次启动时恢复。可通过“文件”>“打开最近使用的文件”>“更多…”，访问之前打开的窗口(包含未保存的文件)列表
	"files.hotExit": "onExit",

	// 启用后，保存文件时在文件末尾插入一个最终新行。
	"files.insertFinalNewline": false,

	// 在打开大型文件时，控制 VS Code 可在重启后使用的内存。在命令行中指定 `--max-memory=新的大小` 参数可达到相同效果。
	"files.maxMemoryForLargeFilesMB": 4096,

	// 超时(以毫秒为单位)后，将取消创建、重命名和删除的文件参与者。使用 `0` 禁用参与者。
	"files.participants.timeout": 60000,

	// 控制是否自动保存作为重构一部分的文件
	"files.refactoring.autoSave": true,

	// 重新打开文件后，还原撤消堆栈。
	"files.restoreUndoStack": true,

	// 当文件保存到磁盘上并被另一个程序更改时，可能会发生保存冲突。 为了防止数据丢失，要求用户将编辑器中的更改与磁盘上的版本进行比较。 仅当经常遇到保存冲突错误时，才应更改此设置；如果不谨慎使用，可能会导致数据丢失。
	//  - askUser: 将拒绝保存并请求手动解决保存冲突。
	//  - overwriteFileOnDisk: 将通过在编辑器中用更改覆盖磁盘上的文件来解决保存冲突。
	"files.saveConflictResolution": "askUser",

	// 启用简单文件对话框。启用时，简单文件对话框将替换系统文件对话框。
	"files.simpleDialog.enable": false,

	// 启用后，保存文件时将删除在最终新行后的所有新行。
	"files.trimFinalNewlines": false,

	// 启用后，将在保存文件时删除行尾的空格。
	"files.trimTrailingWhitespace": false,

	// 配置要从文件观察中排除的路径或 glob 模式。相对的路径或基本 glob 模式(例如 `build/output` 或 `*.js`)将使用当前打开的工作区解析为绝对路径。复杂 Glob 模式必须在绝对路径(即前缀为 “**/” 或完整路径和后缀为 “/**” 以匹配路径中的文件)上匹配，才能正确匹配(例如 “**/build/output/**” 或 “/Users/name/workspaces/project/build/output/**”)。当遇到文件观察程序进程消耗大量 CPU 时，请确保排除不太相关的大型文件夹(例如生成输出文件夹)。
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// 配置额外路径以监视工作区内的更改。默认情况下，将以递归方式监视所有工作区文件夹，但符号链接的文件夹除外。可以显式添加绝对路径或相对路径，以支持作为符号链接的监视文件夹。将使用当前打开的工作区将相对路径解析为绝对路径。
	"files.watcherInclude": [],

	// 控制资源管理器是否在打开文件时自动显示并选择。
	//  - true: 将显示和选择文件。
	//  - false: 不会显示和选择文件。
	//  - focusNoScroll: 文件不会滚动到视图中，但仍会获得焦点。
	"explorer.autoReveal": true,

	// 控制资源管理器是否应以紧凑形式呈现文件夹。在这种形式中，单个子文件夹将被压缩在组合的树元素中。例如，对 Java 包结构很有用。
	"explorer.compactFolders": true,

	// 控制资源管理器是否在把文件删除到废纸篓时进行确认。
	"explorer.confirmDelete": true,

	// 控制在资源管理器内拖放移动文件或文件夹时是否进行确认。
	"explorer.confirmDragAndDrop": true,

	// 控制资源管理器是否应在撤消时要求确认。
	//  - verbose: 资源管理器将在所有撤消操作之前进行提示。
	//  - default: 资源管理器将在破坏性撤消操作之前进行提示。
	//  - light: 聚焦时，资源管理器将不会在撤消操作之前进行提示。
	"explorer.confirmUndo": "default",

	// 复制相对文件路径时使用的路径分隔字符。
	//  - /: 使用斜杠作为路径分隔字符。
	//  - \: 使用反斜杠作为路径分隔字符。
	//  - auto: 使用操作系统特定路径分隔字符。
	"explorer.copyRelativePathSeparator": "auto",

	// 控制文件修饰是否应使用徽章。
	"explorer.decorations.badges": true,

	// 控制文件修饰是否应使用颜色。
	"explorer.decorations.colors": true,

	// 控制浏览器是否允许通过拖放移动文件和文件夹。此设置仅影响从浏览器内部拖放。
	"explorer.enableDragAndDrop": true,

	// 控制资源管理器是否应支持撤消文件和文件夹操作。
	"explorer.enableUndo": true,

	// 控制是否应从资源管理器中分析和排除 .gitignore 中的条目。类似于 `files.exclude`。
	"explorer.excludeGitIgnore": false,

	// 控制资源管理器是否应在初始化期间展开仅包含一个文件夹的多根工作区
	"explorer.expandSingleFolderWorkspaces": true,

	// 控制是否已在资源管理器中启用文件嵌套。文件嵌套允许目录中的相关文件在单个父文件下以可视方式组合在一起。
	"explorer.fileNesting.enabled": false,

	// 控制是否自动扩展文件嵌套。要使此操作生效，必须设置 `explorer.fileNesting.enabled`。
	"explorer.fileNesting.expand": true,

	// 控制资源管理器中的文件嵌套。每个 __Item__ 都表示父模式，且可能包含匹配任意字符串的单个 `*` 字符。每个 __Value__ 都表示子模式的逗号分隔列表，这些子模式应显示嵌套在给定父级下。子模式可能包含多个特殊标记:
	// - `${capture}`: 匹配父模式的 `*` 的解析值
	// - `${basename}`: 匹配父文件的基名，即 `file.ts` 中的 `file`
	// - `${extname}`: 匹配父文件的扩展名，即 `file.ts` 中的 `ts`
	// - `${dirname}`: 匹配父文件的目录名，即 `src/file.ts` 中的 `src`
	// - `*`: 匹配任意字符串，每个子模式只能使用一次
	"explorer.fileNesting.patterns": {
		"*.ts": "${capture}.js",
		"*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
		"*.jsx": "${capture}.js",
		"*.tsx": "${capture}.ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml"
	},

	// 选择在粘贴同名文件(夹)时要使用的重命名方式。
	//  - simple: 在重复名称的末尾附加单词“copy”，后面可能跟一个数字
	//  - smart: 在重复名称的末尾添加一个数字。如果某个号码已经是名称的一部分，请尝试增加该号码
	"explorer.incrementalNaming": "simple",

	// “打开编辑器”窗格中显示的最小编辑器槽数。如果设置为 0，则“打开编辑器”窗格将根据编辑器数量动态重设大小。
	"explorer.openEditors.minVisible": 0,

	// 控制编辑器在“打开编辑器”窗格中的排序顺序。
	//  - editorOrder: 编辑器按编辑器标签显示的顺序排列。
	//  - alphabetical: 编辑器在每个编辑器组内按选项卡名称以字母顺序排序。
	//  - fullPath: 编辑器在每个编辑器组内按完整路径以字母顺序排序。
	"explorer.openEditors.sortOrder": "editorOrder",

	// “打开编辑器”窗格中显示的编辑器最大数量。如果设置为 0，将隐藏“打开编辑器”窗格。
	"explorer.openEditors.visible": 9,

	// 控制资源管理器中文件和文件夹基于属性的排序。启用“#explorer.fileNesting.enabled#”后，还控制嵌套文件的排序。
	//  - default: 按名称排列文件和文件夹。文件夹显示在文件前。
	//  - mixed: 按名称排列文件和文件夹。两者穿插显示。
	//  - filesFirst: 按名称排列文件和文件夹。文件显示在文件夹前。
	//  - type: 按拓展类型为文件和文件夹分组，然后按名称排列它们。文件夹显示在文件前。
	//  - modified: 按最后修改日期降序排列文件和文件夹。文件夹显示在文件前。
	//  - foldersNestsFiles: 文件和文件夹按其名称排序。文件夹显示在文件之前。具有嵌套子级的文件将显示在其他文件之前。
	"explorer.sortOrder": "default",

	// 在资源管理器中控制文件和文件夹名称的词典排序。
	//  - default: 将大写和小写名称混合在一起。
	//  - upper: 大写名称组合在一起，位于小写名称之前。
	//  - lower: 小写名称组合在一起，位于大写名称之前。
	//  - unicode: 名称按 unicode 顺序排序。
	"explorer.sortOrderLexicographicOptions": "default",

	// Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.currentLine.dateFormat": null,

	// Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
	"gitlens.currentLine.enabled": true,

	// Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
	"gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the current line blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.currentLine.pullRequests.enabled": true,

	// Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
	"gitlens.currentLine.scrollable": true,

	// Specifies the uncommitted changes format of the current line blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting.
	// 
	// **NOTE**: Setting this to an empty string will disable current line blame annotations for uncommitted changes.
	"gitlens.currentLine.uncommittedChangesFormat": null,

	// Specifies the command to be executed when an _authors_ CodeLens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for commits within the range
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

	// Specifies whether to provide an _authors_ CodeLens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
	"gitlens.codeLens.authors.enabled": true,

	// Specifies how to format absolute dates in the Git CodeLens. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.codeLens.dateFormat": null,

	// Specifies whether to provide any Git CodeLens, by default. Use the `Toggle Git CodeLens` command (`gitlens.toggleCodeLens`) to toggle the Git CodeLens on and off for the current window
	"gitlens.codeLens.enabled": true,

	// Specifies whether to provide any Git CodeLens on symbols that span only a single line
	"gitlens.codeLens.includeSingleLineSymbols": false,

	// Specifies the command to be executed when a _recent change_ CodeLens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Shows the commit details
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

	// Specifies whether to provide a _recent change_ CodeLens, showing the author and date of the most recent commit for the file or code block
	"gitlens.codeLens.recentChange.enabled": true,

	// Specifies where Git CodeLens will be shown in the document
	//  - document: Adds CodeLens at the top of the document
	//  - containers: Adds CodeLens at the start of container-like symbols (modules, classes, interfaces, etc)
	//  - blocks: Adds CodeLens at the start of block-like symbols (functions, methods, etc) lines
	"gitlens.codeLens.scopes": [
		"document",
		"containers"
	],

	// Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
	// 
	"gitlens.codeLens.scopesByLanguage": null,

	// Specifies a set of document symbols where Git CodeLens will or will not be shown in the document. Prefix with `!` to avoid providing a Git CodeLens for the symbol. Must be a member of `SymbolKind`
	"gitlens.codeLens.symbolScopes": [],

	// Specifies the string to be shown in place of the _authors_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",

	// Specifies the string to be shown in place of both the _recent change_ and _authors_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",

	// Specifies the string to be shown in place of the _recent change_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",

	// Specifies the blame alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.statusBar.alignment": "right",

	// Specifies the command to be executed when the blame status bar item is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.toggleCodeLens: Toggles Git CodeLens
	//  - gitlens.diffWithPrevious: Compares the current line commit with the previous
	//  - gitlens.diffWithWorking: Compares the current line commit with the working tree
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Shows the commit details
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.statusBar.dateFormat": null,

	// Specifies whether to provide blame information in the status bar
	"gitlens.statusBar.enabled": true,

	// Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
	"gitlens.statusBar.format": "${author}, ${agoOrDate}${' via 'pullRequest}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.statusBar.pullRequests.enabled": true,

	// Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
	"gitlens.statusBar.reduceFlicker": true,

	// Specifies the format (in markdown) of hover shown over the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.statusBar.tooltipFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",

	// 在搜索视图中控制操作栏的位置。
	//  - auto: 当搜索视图较窄时将操作栏置于右侧，当搜索视图较宽时，将它紧接在内容之后。
	//  - right: 始终将操作栏放置在右侧。
	"search.actionsPosition": "right",

	// 控制是折叠还是展开搜索结果。
	//  - auto: 结果少于10个的文件将被展开。其他的则被折叠。
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// 配置 [glob 模式](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)以在全文搜索和快速打开中排除文件和文件夹。从 "#files.exclude#" 设置继承所有 glob 模式。
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// 控制是否在搜索中跟踪符号链接。
	"search.followSymlinks": true,

	// 此设置已弃用。可以改为将搜索图标拖到新位置。
	// 控制搜索功能是显示在侧边栏，还是显示在水平空间更大的面板区域。
	"search.location": "sidebar",

	// 搜索缓存保留在从不关闭的扩展主机中，因此不再需要此设置。
	// 启用后，搜索服务进程将保持活动状态，而不是在一个小时不活动后关闭。这将使文件搜索缓存保留在内存中。
	"search.maintainFileSearchCache": false,

	// 控制搜索结果的最大数目，可将其设置为 “null”(空)，以返回无限结果。
	"search.maxResults": 20000,

	// 控制新的“搜索: 在文件中查找”和“在文件夹中查找”操作发生的位置: 在搜索视图中或在搜索编辑器中
	//  - view: 在面板或边栏的搜索视图中进行搜索。
	//  - reuseEditor: 在现有搜索编辑器(若有)中搜索，否则在新的搜索编辑器中进行搜索。
	//  - newEditor: 在新的搜索编辑器中搜索。
	"search.mode": "view",

	// 控制在快速打开中筛选时编辑器历史记录的排序顺序。
	//  - default: 历史记录条目按与筛选值的相关性排序。首先显示更相关的条目。
	//  - recency: 历史记录条目按最近时间排序。首先显示最近打开的条目。
	"search.quickOpen.history.filterSortOrder": "default",

	// 是否在 Quick Open 的文件结果中包含最近打开的文件。
	"search.quickOpen.includeHistory": true,

	// 控制 Quick Open 文件结果中是否包括全局符号搜索的结果。
	"search.quickOpen.includeSymbols": false,

	// 创建新的搜索编辑器时要使用的周围上下文行的默认数目。如果使用 "#search.searchEditor.reusePriorSearchConfiguration#"，则可将它设置为 "null" (空)，以使用搜索编辑器之前的配置。
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// 配置在搜索编辑器中双击结果的效果。
	//  - selectWord: 双击选择光标下的单词。
	//  - goToLocation: 双击将在活动编辑器组中打开结果。
	//  - openLocationToSide: 双击将在编辑器组中的结果打开到一边，如果尚不存在，则创建一个结果。
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// 启用后，新的搜索编辑器将重用之前打开的搜索编辑器的包含、排除和标志。
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// 在键入时搜索所有文件。
	"search.searchOnType": true,

	// 启用 `search.searchOnType#` 时，控制键入的字符与开始搜索之间的超时(以毫秒为单位)。禁用 `#search.searchOnType` 时不起作用。
	"search.searchOnTypeDebouncePeriod": 300,

	// 聚焦搜索视图时，将搜索查询更新为编辑器的所选文本。单击时或触发 "workbench.views.search.focus" 命令时会发生此情况。
	"search.seedOnFocus": false,

	// 当活动编辑器没有选定内容时，从离光标最近的字词开始进行种子设定搜索。
	"search.seedWithNearestWord": false,

	// 控制是否显示搜索结果所在的行号。
	"search.showLineNumbers": false,

	// 若搜索词全为小写，则不区分大小写进行搜索，否则区分大小写进行搜索。
	"search.smartCase": false,

	// 控制搜索结果的排序顺序。
	//  - default: 结果按文件夹和文件名按字母顺序排序。
	//  - fileNames: 结果按文件名排序，忽略文件夹顺序，按字母顺序排列。
	//  - type: 结果按文件扩展名的字母顺序排序。
	//  - modified: 结果按文件的最后修改日期按降序排序。
	//  - countDescending: 结果按每个文件的计数降序排序。
	//  - countAscending: 结果按每个文件的计数以升序排序。
	"search.sortOrder": "default",

	// 控制在搜索文件时是否使用全局 “.gitignore” 和 “.ignore” 文件。需要启用 “#search.useIgnoreFiles#”。
	"search.useGlobalIgnoreFiles": false,

	// 控制在搜索文件时是否使用 `.gitignore` 和 `.ignore` 文件。
	"search.useIgnoreFiles": true,

	// 控制在搜索文件时是否在父目录中使用 ".gitignore" 和 ".ignore" 文件。需要启用 "#search.useIgnoreFiles#"。
	"search.useParentIgnoreFiles": false,

	// 弃用。当使用仅 PCRE2 支持的正则表达式功能时，将自动使用 PCRE2。
	// 是否在文本搜索中使用 pcre2 正则表达式引擎。这允许使用一些高级正则表达式功能, 如前瞻和反向引用。但是, 并非所有 pcre2 功能都受支持-仅支持 javascript 也支持的功能。
	"search.usePCRE2": false,

	// 控制在选择或替换匹配项时是否打开“替换预览”视图。
	"search.useReplacePreview": true,

	// 已弃用。请考虑使用 "search.usePCRE2" 获取对高级正则表达式功能的支持。
	// 此设置已被弃用，将回退到 "search.usePCRE2"。
	"search.useRipgrep": true,

	// Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.changes": true,

	// Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.details": true,

	// Specifies whether to provide any hovers when showing blame annotations
	"gitlens.hovers.annotations.enabled": true,

	// Specifies when to trigger hovers when showing blame annotations
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.annotations.over": "line",

	// Specifies whether to automatically link external resources in commit messages
	"gitlens.hovers.autolinks.enabled": true,

	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.autolinks.enhanced": true,

	// Specifies whether to show avatar images in hovers
	"gitlens.hovers.avatars": true,

	// Specifies the size of the avatar images in hovers
	"gitlens.hovers.avatarSize": 32,

	// Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
	//  - line: Shows only the changes to the line
	//  - hunk: Shows the set of related changes
	"gitlens.hovers.changesDiff": "line",

	// Specifies whether to provide a _changes (diff)_ hover for the current line
	"gitlens.hovers.currentLine.changes": true,

	// Specifies whether to provide a _commit details_ hover for the current line
	"gitlens.hovers.currentLine.details": true,

	// Specifies whether to provide any hovers for the current line
	"gitlens.hovers.currentLine.enabled": true,

	// Specifies when to trigger hovers for the current line
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.currentLine.over": "annotation",

	// Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",

	// Specifies whether to provide any hovers
	"gitlens.hovers.enabled": true,

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.pullRequests.enabled": true,

	// 此设置已弃用，请改用“update.mode”。
	// 配置是否接收自动更新。更改后需要重新启动。更新是从微软在线服务获取的。
	"update.channel": "default",

	// 启用在 Windows 上后台下载和安装新的 VS Code 版本。
	"update.enableWindowsBackgroundUpdates": true,

	// 配置是否接收自动更新。更改后需要重新启动。更新是从微软在线服务获取的。
	//  - none: 禁用更新。
	//  - manual: 禁用自动后台更新检查。如果手动检查更新，更新将可用。
	//  - start: 仅在启动时检查更新。禁用自动后台更新检查。
	//  - default: 启用自动更新检查。代码将定期自动检查更新。
	"update.mode": "default",

	// 在更新后显示发行说明。发行说明将从 Microsoft 联机服务中获取。
	"update.showReleaseNotes": true,

	// 要使用的代理设置。如果未设置，则将从 "http_proxy" 和 "https_proxy" 环境变量中继承。
	"http.proxy": "",

	// 要作为每个网络请求的 "Proxy-Authorization" 标头发送的值。
	"http.proxyAuthorization": null,

	// 控制是否根据提供的 CA 列表验证代理服务器证书。
	"http.proxyStrictSSL": true,

	// 对扩展使用代理支持。
	//  - off: 禁用对扩展的代理支持。
	//  - on: 为扩展启用代理支持。
	//  - fallback: 在未找到代理的情况下，启用扩展的代理支持，回退到请求选项。
	//  - override: 为扩展启用代理支持，覆盖请求选项。
	"http.proxySupport": "override",

	// 控制是否应从操作系统加载 CA 证书。(在 Windows 和 macOS 上, 关闭此窗口后需要重新加载窗口。)
	"http.systemCertificates": true,

	// 允许在任何文件中设置断点。
	"debug.allowBreakpointsEverywhere": false,

	// 自动显示调试器延迟解析的变量的值，例如 getter。
	"debug.autoExpandLazyVariables": false,

	// 如果存在活动调试会话，控制是否确认窗口关闭时间。
	//  - never: 从不确认。
	//  - always: 始终确认是否存在调试会话。
	"debug.confirmOnExit": "never",

	// 控制是否应在调试控制台中输入时接受建议。enter 还用于评估调试控制台中键入的任何内容。
	"debug.console.acceptSuggestionOnEnter": "off",

	// 控制调试控制台是否应在调试会话结束时自动关闭。
	"debug.console.closeOnEnd": false,

	// 控制调试控制台是否应折叠相同的行，并显示出现次数和徽章。
	"debug.console.collapseIdenticalLines": true,

	// 控制调试控制台中的字体系列。
	"debug.console.fontFamily": "default",

	// 控制调试控制台中的字体大小(以像素为单位)。
	"debug.console.fontSize": 14,

	// 控制调试控制台是否应建议以前键入的输入。
	"debug.console.historySuggestions": true,

	// 设置调试控制台中的行高(以像素为单位)。使用 0 来计算从字体大小开始的行高。
	"debug.console.lineHeight": 0,

	// 控制是否应在调试控制台中换行。
	"debug.console.wordWrap": true,

	// 在反汇编视图中显示源代码。
	"debug.disassemblyView.showSourceCode": true,

	// 控制调试器中断时编辑器是否应聚焦。
	"debug.focusEditorOnBreak": true,

	// 控制当调试器中断时，工作台窗口是否应获得焦点。
	"debug.focusWindowOnBreak": true,

	// 当处于调试过程中时，在编辑器中内联显示变量值。
	//  - on: 在调试时，始终在编辑器中内联显示变量值。
	//  - off: 在调试时，绝不在编辑器中内联显示变量值。
	//  - auto: 如果语言支持内联值位置，则在调试时在编辑器中内联显示变量值。
	"debug.inlineValues": "auto",

	// 控制何时打开内部调试控制台。
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// 控制在运行预启动任务后遇到错误时应该怎么做。
	//  - debugAnyway: 忽略任务错误并开始调试。
	//  - showErrors: 显示问题视图且不开始调试。
	//  - prompt: 提示用户。
	//  - abort: 取消调试。
	"debug.onTaskErrors": "prompt",

	// 控制何时打开“调试”视图。
	"debug.openDebug": "openOnDebugBreak",

	// 在调试会话结束时自动打开资源管理器视图。
	"debug.openExplorerOnEnd": false,

	// 控制在启动调试会话前要保存哪些编辑器。
	//  - allEditorsInActiveGroup: 在启动调试会话之前，保存活动组中的所有编辑器。
	//  - nonUntitledEditorsInActiveGroup: 在启动调试会话之前，保存活动组中的所有编辑器(无标题的编辑器除外)。
	//  - none: 在启动调试会话之前，不保存任何编辑器。
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// 控制断点是否应显示在概览标尺中。
	"debug.showBreakpointsInOverviewRuler": false,

	// 控制调试时是否应在编辑器中显示内联断点候选修饰。
	"debug.showInlineBreakpointCandidates": true,

	// 控制何时显示调试状态栏。
	//  - never: 在状态栏中不再显示调试
	//  - always: 始终在状态栏中显示调试
	//  - onFirstSessionStart: 仅于第一次启动调试后在状态栏中显示调试
	"debug.showInStatusBar": "onFirstSessionStart",

	// 控制调试子会话是否显示在调试工具栏中。当此设置为 false 时, 子会话上的 stop 命令也将停止父会话。
	"debug.showSubSessionsInToolBar": false,

	// 在集成或外部终端中启动新的调试会话之前，请清除终端。
	"debug.terminal.clearBeforeReusing": false,

	// 控制调试工具栏的位置。可在所有视图中“浮动”、在调试视图中“停靠”，也可“隐藏”。
	"debug.toolBarLocation": "floating",

	// 全局调试启动配置。应当作为跨工作区共享的 'launch.json' 的替代方法。
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// 此设置已弃用，取而代之的是 `comments.openView`。
	// 控制评论面板应何时打开。
	"comments.openPanel": "openOnSessionStartWithComments",

	// 控制评论视图应何时打开。
	//  - never: 注释视图永远不会打开。
	//  - file: 批注视图将在具有注释的文件处于活动状态时打开。
	//  - firstFile: 如果在此会话期间尚未打开注释视图，则它将在带注释文件处于活动状态的会话期间首次打开。
	"comments.openView": "firstFile",

	// 确定是否在注释时间戳中使用相对时间，(例如"1 天前")。
	"comments.useRelativeTime": true,

	// 启用/禁用 HTML 标记的自动关闭。
	"html.autoClosingTags": true,

	// 启用/禁用自动创建 HTML 属性分配的引号。可通过 #html.completion.attributeDefaultValue#”配置引号类型。
	"html.autoCreateQuotes": true,

	// 控制接受完成时属性的默认值。
	//  - doublequotes: 属性值设置为 ""。
	//  - singlequotes: 属性值设置为 ''。
	//  - empty: 未设置属性值。
	"html.completion.attributeDefaultValue": "doublequotes",

	// 一个相对文件路径列表，这些路径指向采用[自定义数据格式](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md)的 JSON 文件。
	// 
	// VS Code 在启动时加载自定义数据，从而增强它对你在 JSON 文件中指定的自定义 HTML 标记、属性和属性值的 HTML 支持。
	// 
	// 文件路径与工作区相对，且仅考虑工作区文件夹设置。
	"html.customData": [],

	// 标记列表(用逗号隔开)，其中内容不应重新格式化。"null" 默认为 "pre" 标记。
	"html.format.contentUnformatted": "pre,code,textarea",

	// 启用或禁用默认 HTML 格式化程序。
	"html.format.enable": true,

	// 以逗号分隔的标记列表，其中的标记之前将有额外新行。若为 `null`，默认包含 `"head, body, /html"`。
	"html.format.extraLiners": "head, body, /html",

	// 对 `{{#foo}}` 和 `{{/foo}}` 进行格式化与缩进。
	"html.format.indentHandlebars": false,

	// 缩进 "<head>" 和 "<body>" 部分。
	"html.format.indentInnerHtml": false,

	// 保留在一个区块中的换行符的最大数量。若为 `null`，则没有限制。
	"html.format.maxPreserveNewLines": null,

	// 控制是否保留元素前已有的换行符。仅适用于元素前，不适用于标记内或文本。
	"html.format.preserveNewLines": true,

	// 接受 django、erb、handlebars 和 php 模板化语言标记。
	"html.format.templating": false,

	// 以逗号分隔的标记列表，其中的内容不会被重新格式化。若为 `null`，默认包含所有列于 https://www.w3.org/TR/html5/dom.html#phrasing-content 的标记。
	"html.format.unformatted": "wbr",

	// 在此字符串之间保留文本内容。
	"html.format.unformattedContentDelimiter": "",

	// 对属性进行换行。
	//  - auto: 仅在超出行长度时才对属性进行换行。
	//  - force: 对除第一个属性外的其他每个属性进行换行。
	//  - force-aligned: 对除第一个属性外的其他每个属性进行换行，并保持对齐。
	//  - force-expand-multiline: 对每个属性进行换行。
	//  - aligned-multiple: 当超出折行长度时，将属性进行垂直对齐。
	//  - preserve: 保留属性的包装。
	//  - preserve-aligned: 保留属性的包装，但对齐。
	"html.format.wrapAttributes": "auto",

	// 将包装的属性缩进到 N 个字符之后。使用 `null` 来使用默认缩进大小。如果将 `html.format.wrapAttributes` 设置为 “aligned”，则忽略此项。
	"html.format.wrapAttributesIndentSize": null,

	// 每行最大字符数(0 = 禁用)。
	"html.format.wrapLineLength": 120,

	// 在悬停时显示标记和属性文档。
	"html.hover.documentation": true,

	// 在悬停时显示 MDN 的引用。
	"html.hover.references": true,

	// 已弃用，请改用 "editor.linkedEditing"
	// 在匹配的 HTML 标记上启用/禁用镜像光标。
	"html.mirrorCursorOnMatchingTag": false,

	// 配置内置 HTML 语言支持是否建议 HTML5 标记、属性和值。
	"html.suggest.html5": true,

	// 跟踪 VS Code 与 HTML 语言服务器之间的通信。
	"html.trace.server": "off",

	// 配置内置的 HTML 语言支持是否对嵌入的脚本进行验证。
	"html.validate.scripts": true,

	// 配置内置 HTML 语言支持是否对嵌入的样式进行验证。
	"html.validate.styles": true,

	// 已弃用设置 "json.colorDecorators.enable"，请改用 "editor.colorDecorators"。
	// 启用或禁用颜色修饰器
	"json.colorDecorators.enable": true,

	// 启用或禁用默认 JSON 格式化程序。
	"json.format.enable": true,

	// 设置格式时保留所有现有新行。
	"json.format.keepLines": false,

	// 计算的大纲符号和折叠区域的最大数量(因性能原因而受限)。
	"json.maxItemsComputed": 5000,

	// 启用后，可以从 http 和 https 位置提取 JSON 架构。
	"json.schemaDownload.enable": true,

	// 将架构关联到当前项目中的 JSON 文件。
	"json.schemas": [],

	// 跟踪 VS Code 和 JSON 语言服务器之间的通信。
	"json.trace.server": "off",

	// 启用/禁用 JSON 验证。
	"json.validate.enable": true,

	// 启用/禁用放置到 Markdown 编辑器以插入排班。需要启用 `editor.dropIntoEditor.enabled`。
	"markdown.editor.drop.enabled": true,

	// 启用/禁用将文件粘贴到 Markdown 编辑器会插入 Markdown 链接。需要启用 `editor.experimental.pasteActions.enabled`。
	"markdown.experimental.editor.pasteLinks.enabled": true,

	// 在重命名/移动工作区中的文件时，请尝试更新 Markdown 文件中的链接。使用 `markdown.experimental.updateLinksOnFileMove.externalFileGlobs` 配置将触发链接更新的文件。
	//  - prompt: 每次移动文件时进行提示。
	//  - always: 始终自动更新链接。
	//  - never: 从不尝试更新链接且不提示。
	"markdown.experimental.updateLinksOnFileMove.enabled": "never",

	// 启用/禁用在工作区中移动或重命名目录时更新链接。
	"markdown.experimental.updateLinksOnFileMove.enableForDirectories": true,

	// 一个 glob，指定除 Markdown 之外哪些文件应触发链接更新。
	"markdown.experimental.updateLinksOnFileMove.externalFileGlobs": "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}",

	// 启用/禁用 Markdown 文件中的所有错误报告。
	"markdown.experimental.validate.enabled": false,

	// 验证指向 Markdown 文件中其他文件的链接，例如 `[link](/path/to/file.md)`。此操作将检查目标文件是否存在。需要启用 ·#markdown.experimental.validate.enabled#·。
	"markdown.experimental.validate.fileLinks.enabled": "warning",

	// 验证 Markdown 文件中其他文件中标头的链接片段部分，例如“[link](/path/to/file.md#header)”。默认情况下从“#markdown.experimental.validate.fragmentLinks.enabled#”继承设置值。
	"markdown.experimental.validate.fileLinks.markdownFragmentLinks": "ignore",

	// 验证当前 Markdown 文件中标头的片段链接，例如“[link](#header)”。需要启用“#markdown.experimental.validate.enabled#”。
	"markdown.experimental.validate.fragmentLinks.enabled": "warning",

	// 配置不应被验证的链接。例如，`/about` 不会验证链接 `[about](/about)`，而 `/assets/**/*.svg` 会允许你跳过对 `assets` 目录下 `.svg` 文件的任何链接的验证。
	"markdown.experimental.validate.ignoreLinks": [],

	// 验证 Markdown 文件中的引用链接，例如 `[link][ref]`。 需要启用 `markdown.experimental.validate.enabled`。
	"markdown.experimental.validate.referenceLinks.enabled": "warning",

	// 控制应在哪里打开 Markdown 文件中的链接。
	//  - currentGroup: 打开活动编辑器组中的链接。
	//  - beside: 打开活动编辑器旁边的链接。
	"markdown.links.openLocation": "currentGroup",

	// 设置换行符在 Markdown 预览中的呈现方式。如果将其设置为 "true"，则将为段落内的新行创建一个 <br>。
	"markdown.preview.breaks": false,

	// 在 Markdown 预览中双击切换到编辑器。
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// 控制 Markdown 预览中使用的字体系列。
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// 控制 Markdown 预览中使用的字号(以像素为单位)。
	"markdown.preview.fontSize": 14,

	// 控制 Markdown 预览中使用的行高。此数值与字号相关。
	"markdown.preview.lineHeight": 1.6,

	// 在 Markdown 预览中启用或禁用将类似 URL 的文本转换为链接的操作。
	"markdown.preview.linkify": true,

	// 在 Markdown 预览中标记当前的编辑器选定内容。
	"markdown.preview.markEditorSelection": true,

	// 控制如何打开 Markdown 预览中其他 Markdown 文件的链接。
	//  - inPreview: 尝试在 Markdown 预览中打开链接。
	//  - inEditor: 尝试在编辑器中打开链接。
	"markdown.preview.openMarkdownLinks": "inPreview",

	// 滚动 Markdown 预览时，更新其编辑器视图。
	"markdown.preview.scrollEditorWithPreview": true,

	// 滚动 Markdown 编辑器时，更新其预览视图。
	"markdown.preview.scrollPreviewWithEditor": true,

	// 在 Markdown 预览中启用或禁用一些与语言无关的替换和引文美化。
	"markdown.preview.typographer": false,

	// 要从 Markdown 预览使用的 CSS 样式表的 URL 或本地路径的列表。相对路径解释为相对于资源管理器中打开的文件夹。如果没有打开的文件夹，则解释为相对于 Markdown 文件的位置。所有 '\' 都需写为 '\\'。
	"markdown.styles": [],

	// 启用/禁用 Markdown 链接的路径建议
	"markdown.suggest.paths.enabled": true,

	// 对 Markdown 扩展启用调试日志记录。
	"markdown.trace.extension": "off",

	// 跟踪 VS Code 和 Markdown 语言服务器之间的通信。
	"markdown.trace.server": "off",

	// 控制是否启用内置 PHP 语言建议。支持对 PHP 全局变量和变量进行建议。
	"php.suggest.basic": true,

	// 启用/禁用内置的 PHP 验证。
	"php.validate.enable": true,

	// 指向 PHP 可执行文件。
	"php.validate.executablePath": null,

	// 不管 linter 是在 save 还是在 type 上运行。
	"php.validate.run": "onSave",

	// 启用/禁用 JSX 标记的自动关闭。
	"javascript.autoClosingTags": true,

	// 启用/禁用 JavaScript 格式化程序。
	"javascript.format.enable": true,

	// 定义逗号分隔符后面的空格处理。
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// 定义构造函数关键字后面的空格处理方式。
	"javascript.format.insertSpaceAfterConstructor": false,

	// 定义匿名函数的函数关键字后面的空格处理。
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// 定义控制流语句中关键字后面的空格处理。
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// 定义空大括号中左括号后和右括号前的空格处理方式。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// 定义非空大括号中左括号后和右括号前的空格处理方式。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// 定义非空中括号的左括号后和右括号前的空格处理方式。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// 定义非空小括号的左括号后和右括号前的空格处理方式。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// 定义模板字符串括号中左括号后和右括号前的空格处理方式。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// 定义 for 语句中分号之后的空格处理方式。
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// 定义二进制运算符后面的空格处理
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// 定义函数参数括号前的空格处理方式。
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// 定义控制块的左括号是否放置在新的一行。
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// 定义函数的左大括号是否放置在新的一行。
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// 定义非必要分号的处理方式。要求在工作区内使用 TypeScript 3.7 或更高版本。
	//  - ignore: 不要插入或删除任何分号。
	//  - insert: 在语句末尾插入分号。
	//  - remove: 删除不必要的分号。
	"javascript.format.semicolons": "ignore",

	// 为支持 `js/ts.implicitProjectConfig.checkJs`，已弃用此设置。
	// 启用或禁用 JavaScript 文件的语义检查。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。
	"javascript.implicitProjectConfig.checkJs": false,

	// 为支持 `js/ts.implicitProjectConfig.experimentalDecorators`，已弃用此设置。
	// 在不属于任何工程的 JavaScript 文件中启用或禁用 `experimentalDecorators`。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	//  - none: 禁用参数名称提示。
	//  - literals: 仅启用文本参数的参数名称提示。
	//  - all: 启用文本和非文本参数的参数名称提示。
	"javascript.inlayHints.parameterNames.enabled": "none",

	// 对于文本与参数名称完全相同的参数，抑制其参数名称提示。
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.variableTypes.enabled": false,

	// 抑制关于名称与类型名称相同的变量的类型提示。需要在工作区中使用 TypeScript 4.8+。
	"javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// 指定要从自动导入中排除的文件的 glob 模式。需要在工作区中使用 TypeScript 4.8 或更高版本。
	"javascript.preferences.autoImportFileExcludePatterns": [],

	// 自动 import 语句中路径的首选样式。
	//  - shortest: 仅当有路径段少于相关导入路径段的不相关导入时，才首选不相关导入。
	//  - relative: 首选导入文件位置的相对路径。
	//  - non-relative: 根据在 `jsconfig.json` / `tsconfig.json` 中配置的 `baseUrl` 或 `paths` 首选不相关导入。
	//  - project-relative: 仅当相关导入路径将离开包或项目目录时，才首选不相关导入。需要在工作区中使用 TypeScript 4.2+。
	"javascript.preferences.importModuleSpecifier": "shortest",

	// 自动导入的首选路径结尾。需要在工作区中使用 TypeScript 4.5+。
	//  - auto: 使用项目设置选择默认值。
	//  - minimal: 将 "./component/index.js" 缩短为 "./component"。
	//  - index: 将 "./component/index.js" 缩短为 "./component/index"。
	//  - js: 不要缩短路径结尾;包括".js"扩展名。
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// JSX 属性完成的首选样式。
	//  - auto: 根据属性类型，在属性名称后插入 `={}` or `=""`。请参见 `javascript.preferences.quoteStyle`，控制用于字符串属性的引号样式。
	//  - braces: 在属性名称后插入 `={}`。
	//  - none: 仅插入属性名称。
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",

	// 用于快速修复的首选引号样式。
	//  - auto: 从现有代码推断引号类型
	//  - single: 始终使用单引号: `'`
	//  - double: 始终使用双引号: `"`
	"javascript.preferences.quoteStyle": "auto",

	// 设置 "typescript.preferences.renameShorthandProperties" 已被弃用，取而代之的是 "typescript.preferences.useAliasesForRenames"
	// 允许/禁止在重命名期间向对象速记属性引入别名。需要在工作区中使用 TypeScript 3.4 或更高版本。
	"javascript.preferences.renameShorthandProperties": true,

	// 允许/禁止在重命名期间向对象速记属性引入别名。需要在工作区中使用 TypeScript 3.4 或更高版本。
	"javascript.preferences.useAliasesForRenames": true,

	// 启用/禁用在 JavaScript 文件中引用 CodeLens。
	"javascript.referencesCodeLens.enabled": false,

	// 启用/禁用在 JavaScript 文件中对所有函数的 CodeLens 引用。
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// 启用/禁用自动导入建议。
	"javascript.suggest.autoImports": true,

	// 启用/禁用类成员的代码段完成。需要在工作区中使用 TypeScript 4.5+
	"javascript.suggest.classMemberSnippets.enabled": true,

	// 完成函数的参数签名。
	"javascript.suggest.completeFunctionCalls": false,

	// 启用/禁用对完成 JSDoc 注释的建议。
	"javascript.suggest.completeJSDocs": true,

	// 启用或禁用自动完成建议。
	"javascript.suggest.enabled": true,

	// 启用/禁用显示可能未定义的值的完成情况，这些值会插入可选的链式调用。需要启用 TS 3.7+ 和严格的空检查。
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// 在部分键入的导入语句上启用/禁用自动导入样式的补全。需要在工作区中使用 TypeScript 4.3+。
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// 启用/禁用生成 JSDoc 模板的 `@returns` 批注。需要在工作区中使用 TypeScript 4.2+。
	"javascript.suggest.jsdoc.generateReturns": true,

	// 启用/禁用在 JavaScript 建议中包含文件中的唯一名称。请注意，在使用`@ts-check`或`checkJs`进行语义检查的 JavaScript 代码中，名称建议始终处于禁用状态。
	"javascript.suggest.names": true,

	// 在 import 语句和 require 调用中，启用或禁用路径建议。
	"javascript.suggest.paths": true,

	// 启用或禁用编辑器中 JavaScript 文件的建议诊断。
	"javascript.suggestionActions.enabled": true,

	// 启用或禁用在 VS Code 中重命名或移动文件时自动更新导入路径的功能。
	//  - prompt: 在每次重命名时进行提示。
	//  - always: 始终自动更新路径。
	//  - never: 一律不要重命名路径，也不要提示。
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// 启用/禁用 JavaScript 验证。
	"javascript.validate.enable": true,

	// 启用或禁用 JavaScript 文件的语义检查。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。
	"js/ts.implicitProjectConfig.checkJs": false,

	// 在不属于任何工程的 JavaScript 文件中启用或禁用 `experimentalDecorators`。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// 设置程序的模块系统。查看详细信息: https://www.typescriptlang.org/tsconfig#module。
	"js/ts.implicitProjectConfig.module": "ESNext",

	// 在不属于项目的 JavaScript 和 TypeScript 文件中启用/禁用[严格函数类型](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)。现有 `jsconfig.json` 或 `tsconfig.json` 文件将替代此设置。
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// 在不属于项目的 JavaScript 和 TypeScript 文件中启用/禁用[严格 null 检查](https://www.typescriptlang.org/tsconfig#strictNullChecks)。现有 `jsconfig.json` 或 `tsconfig.json` 文件将替代此设置。
	"js/ts.implicitProjectConfig.strictNullChecks": true,

	// 为发出的 JavaScript 设置目标 JavaScript 语言版本并包含库声明。查看详细信息: https://www.typescriptlang.org/tsconfig#target。
	"js/ts.implicitProjectConfig.target": "ES2020",

	// 启用/禁用 JSX 标记的自动关闭。
	"typescript.autoClosingTags": true,

	// 检查是否为 [自动类型获取](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) 安装了 npm 。
	"typescript.check.npmIsInstalled": true,

	// 禁用 [自动类型获取](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) 。自动类型获取可以从 npm 提取 `@types` 包来改进外部库的 IntelliSense。
	"typescript.disableAutomaticTypeAcquisition": false,

	// 允许提示用户对 Intellisense 使用在工作区中配置的 TypeScript 版本。
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// 启用/禁用默认 TypeScript 格式化程序。
	"typescript.format.enable": true,

	// 定义逗号分隔符后面的空格处理。
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// 定义构造函数关键字后面的空格处理方式。
	"typescript.format.insertSpaceAfterConstructor": false,

	// 定义匿名函数的函数关键字后面的空格处理。
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// 定义控制流语句中关键字后面的空格处理。
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// 定义空大括号中左括号后和右括号前的空格处理方式。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// 定义非空大括号中左括号后和右括号前的空格处理方式。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// 定义非空中括号的左括号后和右括号前的空格处理方式。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// 定义非空小括号的左括号后和右括号前的空格处理方式。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// 定义模板字符串括号中左括号后和右括号前的空格处理方式。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// 定义 for 语句中分号之后的空格处理方式。
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// 定义 TypeScript 中类型断言后的空格处理方式。
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// 定义二进制运算符后面的空格处理
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// 定义函数参数括号前的空格处理方式。
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// 定义控制块的左括号是否放置在新的一行。
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// 定义函数的左大括号是否放置在新的一行。
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// 定义非必要分号的处理方式。要求在工作区内使用 TypeScript 3.7 或更高版本。
	//  - ignore: 不要插入或删除任何分号。
	//  - insert: 在语句末尾插入分号。
	//  - remove: 删除不必要的分号。
	"typescript.format.semicolons": "ignore",

	// 启用或禁用实现 CodeLens。此 CodeLens 显示接口的实现。
	"typescript.implementationsCodeLens.enabled": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	//  - none: 禁用参数名称提示。
	//  - literals: 仅启用文本参数的参数名称提示。
	//  - all: 启用文本和非文本参数的参数名称提示。
	"typescript.inlayHints.parameterNames.enabled": "none",

	// 对于文本与参数名称完全相同的参数，抑制其参数名称提示。
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.variableTypes.enabled": false,

	// 抑制关于名称与类型名称相同的变量的类型提示。需要在工作区中使用 TypeScript 4.8+。
	"typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// 设置在报告 JavaScript 和 TypeScript 错误时使用的区域设置。默认使用 VS Code 的区域设置。
	"typescript.locale": "auto",

	// Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.npm": "",

	// 指定要从自动导入中排除的文件的 glob 模式。需要在工作区中使用 TypeScript 4.8 或更高版本。
	"typescript.preferences.autoImportFileExcludePatterns": [],

	// 自动 import 语句中路径的首选样式。
	//  - shortest: 仅当有路径段少于相关导入路径段的不相关导入时，才首选不相关导入。
	//  - relative: 首选导入文件位置的相对路径。
	//  - non-relative: 根据在 `jsconfig.json` / `tsconfig.json` 中配置的 `baseUrl` 或 `paths` 首选不相关导入。
	//  - project-relative: 仅当相关导入路径将离开包或项目目录时，才首选不相关导入。需要在工作区中使用 TypeScript 4.2+。
	"typescript.preferences.importModuleSpecifier": "shortest",

	// 自动导入的首选路径结尾。需要在工作区中使用 TypeScript 4.5+。
	//  - auto: 使用项目设置选择默认值。
	//  - minimal: 将 "./component/index.js" 缩短为 "./component"。
	//  - index: 将 "./component/index.js" 缩短为 "./component/index"。
	//  - js: 不要缩短路径结尾;包括".js"扩展名。
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// 允许/禁止在 "package.json" 依赖项中搜索可用的自动导入。
	//  - auto: 根据预估的性能影响搜索依赖项。
	//  - on: 始终搜索依赖项。
	//  - off: 从不搜索依赖项。
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// JSX 属性完成的首选样式。
	//  - auto: 根据属性类型，在属性名称后插入 `={}` or `=""`。请参见 `typescript.preferences.quoteStyle`，控制用于字符串属性的引号样式。
	//  - braces: 在属性名称后插入 `={}`。
	//  - none: 仅插入属性名称。
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",

	// 用于快速修复的首选引号样式。
	//  - auto: 从现有代码推断引号类型
	//  - single: 始终使用单引号: `'`
	//  - double: 始终使用双引号: `"`
	"typescript.preferences.quoteStyle": "auto",

	// 设置 "typescript.preferences.renameShorthandProperties" 已被弃用，取而代之的是 "typescript.preferences.useAliasesForRenames"
	// 允许/禁止在重命名期间向对象速记属性引入别名。需要在工作区中使用 TypeScript 3.4 或更高版本。
	"typescript.preferences.renameShorthandProperties": true,

	// 允许/禁止在重命名期间向对象速记属性引入别名。需要在工作区中使用 TypeScript 3.4 或更高版本。
	"typescript.preferences.useAliasesForRenames": true,

	// 在 TypeScript 文件中启用或禁用引用 CodeLens。
	"typescript.referencesCodeLens.enabled": false,

	// 启用/禁用在 TypeScript 文件中的所有函数上引用 CodeLens。
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// 将风格检查的问题报告为警告。
	"typescript.reportStyleChecksAsWarnings": true,

	// 启用/禁用自动导入建议。
	"typescript.suggest.autoImports": true,

	// 启用/禁用类成员的代码段完成。需要在工作区中使用 TypeScript 4.5+
	"typescript.suggest.classMemberSnippets.enabled": true,

	// 完成函数的参数签名。
	"typescript.suggest.completeFunctionCalls": false,

	// 启用/禁用对完成 JSDoc 注释的建议。
	"typescript.suggest.completeJSDocs": true,

	// 启用或禁用自动完成建议。
	"typescript.suggest.enabled": true,

	// 启用/禁用显示可能未定义的值的完成情况，这些值会插入可选的链式调用。需要启用 TS 3.7+ 和严格的空检查。
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// 在部分键入的导入语句上启用/禁用自动导入样式的补全。需要在工作区中使用 TypeScript 4.3+。
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// 从 TS 服务器启用/禁用片段补全。需要在工作区中使用 TypeScript 4.3+。
	"typescript.suggest.includeCompletionsWithSnippetText": true,

	// 启用/禁用生成 JSDoc 模板的 `@returns` 批注。需要在工作区中使用 TypeScript 4.2+。
	"typescript.suggest.jsdoc.generateReturns": true,

	// 启用/禁用对象文本中的方法的代码片段完成。需要在工作区中使用 TypeScript 4.7+
	"typescript.suggest.objectLiteralMethodSnippets.enabled": true,

	// 在 import 语句和 require 调用中，启用或禁用路径建议。
	"typescript.suggest.paths": true,

	// 启用或禁用编辑器中 TypeScript 文件的建议诊断。
	"typescript.suggestionActions.enabled": true,

	// 启用或禁用偶尔出现的有关 JavaScript 和 TypeScript 的调查，帮助我们改善 VS Code 对两者的支持。
	"typescript.surveys.enabled": true,

	// 控制对 tsc 任务的自动检测。
	//  - on: 同时创建生成和监视任务。
	//  - off: 禁用此功能。
	//  - build: 仅创建单次运行编译任务。
	//  - watch: 仅创建编译和监视任务。
	"typescript.tsc.autoDetect": "on",

	// 指定 TypeScript 安装下用于 IntelliSense 的 tsserver 和 `lib*.d.ts` 文件的文件夹路径，例如: `./node_modules/typescript/lib`。
	// 
	// - 当指定为用户设置时，`typescript.tsdk` 中的 TypeScript 版本会自动替换内置的 TypeScript 版本。
	// - 当指定为工作区设置时，`typescript.tsdk` 允许通过 `TypeScript: Select TypeScript version` 命令切换为对 IntelliSense 使用 TypeScript 的该工作区版本。
	// 
	// 有关管理 TypeScript 版本的更多详细信息，请参阅 [TypeScript文档](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions)。
	"typescript.tsdk": "",

	// 允许将 TS 服务器性能跟踪保持到目录。这些跟踪文件可用于诊断 TS 服务器性能问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。
	"typescript.tsserver.enableTracing": false,

	// (实验性)启用项目范围的错误报告。
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// 将 TS 服务器的日志保存到一个文件。此日志可用于诊断 TS 服务器问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。
	"typescript.tsserver.log": "off",

	// 要分配给 TypeScript 服务器进程的最大内存量(MB)。
	"typescript.tsserver.maxTsServerMemory": 3072,

	// 其他用于搜索 TypeScript 语言服务插件的路径。
	"typescript.tsserver.pluginPaths": [],

	// 对发送到 TS 服务器的消息启用跟踪。此跟踪信息可用于诊断 TS 服务器问题。 跟踪信息可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。
	"typescript.tsserver.trace": "off",

	// 此设置已弃用，取而代之的是“typescript.tsserver.useSyntaxServer”。
	// 允许/禁止生成单独的 TypeScript 服务器，该服务器可更快地响应与语法相关的操作，例如计算折叠或计算文档符号。需要在工作区中使用 TypeScript 3.4.0 或更高版本。
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// 控制 TypeScript 是否启动专用服务器，以便更快地处理与语法相关的运算，如计算代码折叠。
	//  - always: 使用更加轻量级的语法服务器来处理所有 IntelliSense 运算。此语法服务器只能为打开的文件提供 IntelliSense。
	//  - never: 请不要使用专用的语法服务器。使用单个服务器来处理所有 IntelliSense 运算。
	//  - auto: 生成一个完整的服务器和一个专用于语法运算的轻量级服务器。语法服务器用于加快语法运算并在加载项目时提供 IntelliSense。
	"typescript.tsserver.useSyntaxServer": "auto",

	// 配置应使用哪些监视策略来跟踪文件和目录。需要在工作区中使用 TypeScript 3.8+。
	"typescript.tsserver.watchOptions": {},

	// 启用或禁用在 VS Code 中重命名或移动文件时自动更新导入路径的功能。
	//  - prompt: 在每次重命名时进行提示。
	//  - always: 始终自动更新路径。
	//  - never: 一律不要重命名路径，也不要提示。
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// 启用/禁用 TypeScript 验证。
	"typescript.validate.enable": true,

	// 通过[转到工作区中的符号](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)来控制搜索的具体文件。
	//  - allOpenProjects: 在所有打开的 JavaScript 或 TypeScript 项目中搜索符号。需要在工作区中使用 TypeScript 3.9 或更高版本。
	//  - currentProject: 仅在当前 JavaScript 或 TypeScript 项目中搜索符号。
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// Deprecated. Use `gitlens.views.formats.commits.description` instead
	// 
	"gitlens.views.commitDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.commitFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.commitFileFormat": null,

	// Deprecated. Use `gitlens.views.commits.files.label` instead
	// 
	"gitlens.views.commitFormat": null,

	// Specifies the default number of items to show in a view list. Use 0 to specify no limit
	"gitlens.views.defaultItemLimit": 10,

	// Specifies whether to enable experimental multi-select support in the views.
	// **NOTE**: Requires a restart to take effect.
	"gitlens.views.experimental.multiSelect.enabled": false,

	// Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.description": "${author, }${agoOrDate}",

	// Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.label": "${❰ tips ❱➤  }${message}",

	// Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",

	// Specifies the format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.label": "${working  }${file}",

	// Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.description": "${stashOnRef, }${agoOrDate}",

	// Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.label": "${message}",

	// Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
	"gitlens.views.pageItemLimit": 40,

	// Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
	"gitlens.views.showRelativeDateMarkers": true,

	// Deprecated. Use `gitlens.views.formats.stashes.description` instead
	// 
	"gitlens.views.stashDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.stashFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.stashFileFormat": null,

	// Deprecated. Use `gitlens.views.stashes.files.label` instead
	// 
	"gitlens.views.stashFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.statusFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.statusFileFormat": null,

	// 打开“#testing.followRunningTest#”时，始终显示已执行的测试。如果关闭此设置，则只会显示失败的测试。
	"testing.alwaysRevealTestOnStateChange": false,

	// 配置何时自动打开“错误速览”视图。
	//  - failureAnywhere: 无论故障在何处，都自动打开。
	//  - failureInVisibleDocument: 在可见文档中测试失败时自动打开。
	//  - never: 从不自动打开。
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// 控制是否在自动运行模式期间自动打开“速览”视图。
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// 将测试标记为过时并启动新运行后等待的时间(以毫秒为单位)。
	"testing.autoRun.delay": 1000,

	// 控制自动运行哪些测试。
	//  - all: 自动运行切换时，自动运行已发现的所有测试。在各个测试发生更改时重新运行它们。
	//  - rerun: 在各个测试发生更改时重新运行它们。不会自动运行尚未执行的任何测试。
	"testing.autoRun.mode": "all",

	// 控制在装订线中左键单击测试修饰时要执行的操作。
	//  - run: 运行测试。
	//  - debug: 调试测试。
	//  - contextMenu: 打开上下文菜单以获取更多选项。
	"testing.defaultGutterClickAction": "run",

	// 控制在测试资源管理器视图中是否应遵循正在运行的测试
	"testing.followRunningTest": true,

	// 控制是否在编辑器装订线中显示测试修饰。
	"testing.gutterEnabled": true,

	// 控制何时打开测试视图。
	//  - neverOpen: 从不自动打开测试视图
	//  - openOnTestStart: 在测试启动时打开测试视图
	//  - openOnTestFailure: 任何测试失败时打开测试视图
	"testing.openTesting": "openOnTestStart",

	// 控制是否在运行测试之前保存所有脏编辑器。
	"testing.saveBeforeTest": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
	"gitlens.views.commits.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
	"gitlens.views.commits.files.compact": true,

	// Specifies how the _Commits_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commits.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
	"gitlens.views.commits.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForCommits": true,

	// Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.commits.reveal": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Commits_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.commits.showBranchComparison": "working",

	// 补全 CSS 属性时在行尾插入分号。
	"css.completion.completePropertyWithSemicolon": true,

	// 默认情况下，VS Code 在选择 CSS 属性后触发属性值完成。使用此设置可禁用此行为。
	"css.completion.triggerPropertyValueCompletion": true,

	// 一个相对文件路径列表，这些路径指向采用[自定义数据格式](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md)的 JSON 文件。
	// 
	// VS Code 在启动时加载自定义数据，从而增强它对你在 JSON 文件中指定的自定义 CSS 属性、at 指令、伪类和伪元素的 CSS 支持。
	// 
	// 这些文件路径与工作区相对，且只考虑工作区文件夹设置。
	"css.customData": [],

	// 将大括号放在规则的同一行(`折叠`)或将大括号放在自己所在行上(`展开`)。
	"css.format.braceStyle": "collapse",

	// 启用/禁用默认的 CSS 格式化程序。
	"css.format.enable": true,

	// 启用 `css.format.preserveNewLines` 后要在一个区块中保留的最大换行符数。
	"css.format.maxPreserveNewLines": null,

	// 用空白行分隔规则集。
	"css.format.newlineBetweenRules": true,

	// 用新行分隔选择器。
	"css.format.newlineBetweenSelectors": true,

	// 是否应保留元素之前的现有换行符。
	"css.format.preserveNewLines": true,

	// 确保选择器分隔符 '>'、'+'、'~' (例如 `a > b`)周围有空格字符。
	"css.format.spaceAroundSelectorSeparator": false,

	// 在 CSS 悬停时显示标记和属性文档。
	"css.hover.documentation": true,

	// 在 CSS 悬停时显示 MDN 的引用。
	"css.hover.references": true,

	// 参数数目无效。
	"css.lint.argumentsInColorFunction": "error",

	// 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。
	"css.lint.boxModel": "ignore",

	// 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
	"css.lint.compatibleVendorPrefixes": "ignore",

	// 不要使用重复的样式定义。
	"css.lint.duplicateProperties": "ignore",

	// 不要使用空规则集。
	"css.lint.emptyRules": "warning",

	// 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。
	"css.lint.float": "ignore",

	// `@font-face` 规则必须定义 `src` 和 `font-family` 属性。
	"css.lint.fontFaceProperties": "warning",

	// 十六进制颜色必须由三个或六个十六进制数字组成。
	"css.lint.hexColorLength": "error",

	// 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
	"css.lint.idSelector": "ignore",

	// 仅在需要支持 IE7 及更低版本时，才需要 IE hack。
	"css.lint.ieHack": "ignore",

	// 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。
	"css.lint.important": "ignore",

	// import 语句没有并行加载。
	"css.lint.importStatement": "ignore",

	// 由于 `display` 属性值，属性被忽略。例如，使用 `display: inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// 通配选择符 (`*`) 的运行效率低。
	"css.lint.universalSelector": "ignore",

	// 未知的 @ 规则。
	"css.lint.unknownAtRules": "warning",

	// 未知的属性。
	"css.lint.unknownProperties": "warning",

	// 未知的供应商特定属性。
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// 不根据 "unknownProperties" 规则进行验证的属性列表。
	"css.lint.validProperties": [],

	// 使用厂商特定的前缀时，同时添加标准属性。
	"css.lint.vendorPrefix": "warning",

	// 零不需要单位。
	"css.lint.zeroUnits": "ignore",

	// 跟踪 VS Code 与 CSS 语言服务器之间的通信。
	"css.trace.server": "off",

	// 启用或禁用所有验证。
	"css.validate": true,

	// Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
	"gitlens.views.repositories.autoRefresh": true,

	// Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
	"gitlens.views.repositories.autoReveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
	"gitlens.views.repositories.avatars": true,

	// Specifies how the _Repositories_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.repositories.branches.layout": "tree",

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) under each branch in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.repositories.branches.showBranchComparison": "branch",

	// Specifies whether to show the _Repositories_ view in a compact display density
	"gitlens.views.repositories.compact": false,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.repositories.enabled": null,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
	"gitlens.views.repositories.files.compact": true,

	// Specifies how the _Repositories_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.repositories.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
	"gitlens.views.repositories.files.threshold": 5,

	// Specifies whether to include working tree file status for each repository in the _Repositories_ view
	"gitlens.views.repositories.includeWorkingTree": false,

	// Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForCommits": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.repositories.showBranchComparison": "working",

	// Specifies whether to show the branches for each repository in the _Repositories_ view
	"gitlens.views.repositories.showBranches": true,

	// Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showCommits": true,

	// Specifies whether to show the contributors for each repository in the _Repositories_ view
	"gitlens.views.repositories.showContributors": true,

	// Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
	"gitlens.views.repositories.showIncomingActivity": false,

	// Specifies whether to show the remotes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showRemotes": true,

	// Specifies whether to show the stashes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showStashes": true,

	// Specifies whether to show the tags for each repository in the _Repositories_ view
	"gitlens.views.repositories.showTags": true,

	// Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showUpstreamStatus": true,

	// Specifies whether to show the worktrees for each repository in the _Repositories_ view
	"gitlens.views.repositories.showWorktrees": true,

	// Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
	"gitlens.advanced.fileHistoryFollowsRenames": false,

	// Specifies whether file histories will show commits from all branches
	"gitlens.advanced.fileHistoryShowAllBranches": false,

	// Specifies whether to show avatar images instead of status icons in the _File History_ view
	"gitlens.views.fileHistory.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
	"gitlens.views.fileHistory.files.compact": true,

	// Specifies how the _File History_ view will display files when showing the history of a folder
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.fileHistory.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `auto`
	"gitlens.views.fileHistory.files.threshold": 5,

	// 补全 CSS 属性时在行尾插入分号。
	"less.completion.completePropertyWithSemicolon": true,

	// 默认情况下，VS Code 在选择 CSS 属性后触发属性值完成。使用此设置可禁用此行为。
	"less.completion.triggerPropertyValueCompletion": true,

	// 将大括号放在规则的同一行(`折叠`)或将大括号放在自己所在行上(`展开`)。
	"less.format.braceStyle": "collapse",

	// 启用/禁用默认的 LESS 格式化程序。
	"less.format.enable": true,

	// 启用 `less.format.preserveNewLines` 后要在一个区块中保留的最大换行符数。
	"less.format.maxPreserveNewLines": null,

	// 用空白行分隔规则集。
	"less.format.newlineBetweenRules": true,

	// 用新行分隔选择器。
	"less.format.newlineBetweenSelectors": true,

	// 是否应保留元素之前的现有换行符。
	"less.format.preserveNewLines": true,

	// 确保选择器分隔符 '>'、'+'、'~' (例如 `a > b`)周围有空格字符。
	"less.format.spaceAroundSelectorSeparator": false,

	// 在 LESS 悬停时显示标记和属性文档。
	"less.hover.documentation": true,

	// 在 LESS 悬停时显示 MDN 的引用。
	"less.hover.references": true,

	// 参数数目无效。
	"less.lint.argumentsInColorFunction": "error",

	// 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。
	"less.lint.boxModel": "ignore",

	// 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
	"less.lint.compatibleVendorPrefixes": "ignore",

	// 不要使用重复的样式定义。
	"less.lint.duplicateProperties": "ignore",

	// 不要使用空规则集。
	"less.lint.emptyRules": "warning",

	// 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。
	"less.lint.float": "ignore",

	// `@font-face` 规则必须定义 `src` 和 `font-family` 属性。
	"less.lint.fontFaceProperties": "warning",

	// 十六进制颜色必须由三个或六个十六进制数字组成。
	"less.lint.hexColorLength": "error",

	// 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
	"less.lint.idSelector": "ignore",

	// 仅在需要支持 IE7 及更低版本时，才需要 IE hack。
	"less.lint.ieHack": "ignore",

	// 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。
	"less.lint.important": "ignore",

	// import 语句没有并行加载。
	"less.lint.importStatement": "ignore",

	// 由于 `display` 属性值，属性被忽略。例如，使用 `display: inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// 通配选择符 (`*`) 的运行效率低。
	"less.lint.universalSelector": "ignore",

	// 未知的 @ 规则。
	"less.lint.unknownAtRules": "warning",

	// 未知的属性。
	"less.lint.unknownProperties": "warning",

	// 未知的供应商特定属性。
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// 不根据 "unknownProperties" 规则进行验证的属性列表。
	"less.lint.validProperties": [],

	// 使用厂商特定的前缀时，同时添加标准属性。
	"less.lint.vendorPrefix": "warning",

	// 零不需要单位。
	"less.lint.zeroUnits": "ignore",

	// 启用或禁用所有验证。
	"less.validate": true,

	// Specifies whether to show avatar images instead of status icons in the _Line History_ view
	"gitlens.views.lineHistory.avatars": true,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.lineHistory.enabled": null,

	// 补全 CSS 属性时在行尾插入分号。
	"scss.completion.completePropertyWithSemicolon": true,

	// 默认情况下，VS Code 在选择 CSS 属性后触发属性值完成。使用此设置可禁用此行为。
	"scss.completion.triggerPropertyValueCompletion": true,

	// 将大括号放在规则的同一行(`折叠`)或将大括号放在自己所在行上(`展开`)。
	"scss.format.braceStyle": "collapse",

	// 启用/禁用默认的 SCSS 格式化程序。
	"scss.format.enable": true,

	// 启用 `scss.format.preserveNewLines` 后要在一个区块中保留的最大换行符数。
	"scss.format.maxPreserveNewLines": null,

	// 用空白行分隔规则集。
	"scss.format.newlineBetweenRules": true,

	// 用新行分隔选择器。
	"scss.format.newlineBetweenSelectors": true,

	// 是否应保留元素之前的现有换行符。
	"scss.format.preserveNewLines": true,

	// 确保选择器分隔符 '>'、'+'、'~' (例如 `a > b`)周围有空格字符。
	"scss.format.spaceAroundSelectorSeparator": false,

	// 在 SCSS 悬停时显示标记和属性文档。
	"scss.hover.documentation": true,

	// 在 SCSS 悬停时显示 MDN 的引用。
	"scss.hover.references": true,

	// 参数数目无效。
	"scss.lint.argumentsInColorFunction": "error",

	// 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。
	"scss.lint.boxModel": "ignore",

	// 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// 不要使用重复的样式定义。
	"scss.lint.duplicateProperties": "ignore",

	// 不要使用空规则集。
	"scss.lint.emptyRules": "warning",

	// 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。
	"scss.lint.float": "ignore",

	// `@font-face` 规则必须定义 `src` 和 `font-family` 属性。
	"scss.lint.fontFaceProperties": "warning",

	// 十六进制颜色必须由三个或六个十六进制数字组成。
	"scss.lint.hexColorLength": "error",

	// 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
	"scss.lint.idSelector": "ignore",

	// 仅在需要支持 IE7 及更低版本时，才需要 IE hack。
	"scss.lint.ieHack": "ignore",

	// 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。
	"scss.lint.important": "ignore",

	// import 语句没有并行加载。
	"scss.lint.importStatement": "ignore",

	// 由于 `display` 属性值，属性被忽略。例如，使用 `display: inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// 通配选择符 (`*`) 的运行效率低。
	"scss.lint.universalSelector": "ignore",

	// 未知的 @ 规则。
	"scss.lint.unknownAtRules": "warning",

	// 未知的属性。
	"scss.lint.unknownProperties": "warning",

	// 未知的供应商特定属性。
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// 不根据 "unknownProperties" 规则进行验证的属性列表。
	"scss.lint.validProperties": [],

	// 使用厂商特定的前缀时，同时添加标准属性。
	"scss.lint.vendorPrefix": "warning",

	// 零不需要单位。
	"scss.lint.zeroUnits": "ignore",

	// 启用或禁用所有验证。
	"scss.validate": true,

	// Specifies how branches are sorted in quick pick menus and views
	//  - date:desc: Sorts branches by the most recent commit date in descending order
	//  - date:asc: Sorts branches by the most recent commit date in ascending order
	//  - name:asc: Sorts branches by name in ascending order
	//  - name:desc: Sorts branches by name in descending order
	"gitlens.sortBranchesBy": "date:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
	"gitlens.views.branches.avatars": true,

	// Specifies how the _Branches_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.branches.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
	"gitlens.views.branches.files.compact": true,

	// Specifies how the _Branches_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.branches.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
	"gitlens.views.branches.files.threshold": 5,

	// Specifies whether to query for pull requests associated with each branch and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with each branch in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForCommits": true,

	// Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.branches.reveal": true,

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) in the _Branches_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.branches.showBranchComparison": "branch",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
	"gitlens.views.remotes.avatars": true,

	// Specifies how the _Remotes_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.remotes.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
	"gitlens.views.remotes.files.compact": true,

	// Specifies how the _Remotes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.remotes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
	"gitlens.views.remotes.files.threshold": 5,

	// Specifies whether to query for pull requests associated with each branch and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with each branch in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForCommits": true,

	// Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.remotes.reveal": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
	"gitlens.views.stashes.files.compact": true,

	// Specifies how the _Stashes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.stashes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
	"gitlens.views.stashes.files.threshold": 5,

	// Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.stashes.reveal": true,

	// Specifies how tags are sorted in quick pick menus and views
	//  - date:desc: Sorts tags by date in descending order
	//  - date:asc: Sorts tags by date in ascending order
	//  - name:asc: Sorts tags by name in ascending order
	//  - name:desc: Sorts tags by name in descending order
	"gitlens.sortTagsBy": "date:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
	"gitlens.views.tags.avatars": true,

	// Specifies how the _Tags_ view will display tags
	//  - list: Displays tags as a list
	//  - tree: Displays tags as a tree when tags names contain slashes `/`
	"gitlens.views.tags.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
	"gitlens.views.tags.files.compact": true,

	// Specifies how the _Tags_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.tags.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
	"gitlens.views.tags.files.threshold": 5,

	// Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.tags.reveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Worktrees_ view
	"gitlens.views.worktrees.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `tree` or `auto`
	"gitlens.views.worktrees.files.compact": true,

	// Specifies how the _Worktrees_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.worktrees.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.worktrees.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `auto`
	"gitlens.views.worktrees.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the worktree branch and commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the worktree branch in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.showForCommits": true,

	// Specifies whether to reveal worktrees in the _Worktrees_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.worktrees.reveal": true,

	// Specifies whether to show a comparison of the worktree branch with a user-selected reference (branch, tag. etc) in the _Worktrees_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the worktree branch with a user-selected reference
	"gitlens.views.worktrees.showBranchComparison": "working",

	// Specifies the default path in which new worktrees will be created
	"gitlens.worktrees.defaultLocation": null,

	// Specifies whether to prompt for a path when creating new worktrees
	"gitlens.worktrees.promptForLocation": true,

	// 启用后，将自动检查扩展更新。若扩展存在更新，将在“扩展”视图中将其标记为过时扩展。更新将从 Microsoft 联机服务中获取。
	"extensions.autoCheckUpdates": true,

	// 控制扩展的自动更新行为。更新是从 Microsoft 联机服务中获取的。
	//  - true: 为所有扩展自动下载并安装更新。
	//  - onlyEnabledExtensions: 仅为已启用的扩展自动下载并安装更新。将不会自动更新已禁用的扩展。
	//  - false: 扩展不会自动更新。
	"extensions.autoUpdate": true,

	// 启用后，将在离开“扩展”视图时，自动关闭扩展详细信息页面。
	"extensions.closeExtensionDetailsOnViewChange": false,

	// 当此处列出扩展名时，该扩展名处理URI时将不会显示确认提示。
	"extensions.confirmedUriHandlerExtensionIds": [],

	// 配置要在其他扩展主机进程中执行的扩展。
	"extensions.experimental.affinity": {},

	// 启用后，将使用新的 UtilityProcess Electron API 启动扩展主机。
	"extensions.experimental.useUtilityProcess": false,

	// 启用后，将不会显示扩展建议的通知。
	"extensions.ignoreRecommendations": false,

	// 已弃用此设置。使用 extensions.ignoreRecommendations 设置来控制建议通知。默认使用“扩展”视图的可见性操作来隐藏“建议”视图。
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// 替代扩展的不受信任的工作区支持。将始终启用使用 “true” 的扩展。将始终启用使用 “limited” 的扩展，并且扩展将隐藏需要信任的功能。仅当工作区受信任时才会启用使用 “false” 的扩展。
	"extensions.supportUntrustedWorkspaces": {},

	// 替代扩展的虚拟工作区支持。
	"extensions.supportVirtualWorkspaces": {},

	// 启用 Web Worker 扩展主机。
	//  - true: Web 辅助角色扩展主机将始终启动。
	//  - false: Web 辅助角色扩展主机将永远不会启动。
	//  - auto: Web 辅助角色扩展主机将在 Web 扩展需要时启动。
	"extensions.webWorker": "auto",

	// 同步时要忽略的扩展列表。扩展的标识符始终为 "${publisher}.${name}"。例如: "vscode.csharp"。
	"settingsSync.ignoredExtensions": [],

	// 配置在同步时要忽略的设置。
	"settingsSync.ignoredSettings": [],

	// 为每个平台同步键绑定。
	"settingsSync.keybindingsPerPlatform": true,

	// 在输出视图中启用或禁用「智能滚动」。「智能滚动」会自动在你点击输出视图时锁定滚动，并在你点击最后一行时解锁滚动。
	"output.smartScroll.enabled": true,

	// Specifies how contributors are sorted in quick pick menus and views
	//  - count:desc: Sorts contributors by commit count in descending order
	//  - count:asc: Sorts contributors by commit count in ascending order
	//  - date:desc: Sorts contributors by the most recent commit date in descending order
	//  - date:asc: Sorts contributors by the most recent commit date in ascending order
	//  - name:asc: Sorts contributors by name in ascending order
	//  - name:desc: Sorts contributors by name in descending order
	"gitlens.sortContributorsBy": "count:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
	"gitlens.views.contributors.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
	"gitlens.views.contributors.files.compact": true,

	// Specifies how the _Contributors_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.contributors.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
	"gitlens.views.contributors.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.showForCommits": true,

	// Specifies whether to reveal contributors in the _Contributors_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.contributors.reveal": true,

	// Specifies whether to show commits from all branches in the _Contributors_ view
	"gitlens.views.contributors.showAllBranches": false,

	// Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size
	"gitlens.views.contributors.showStatistics": false,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
	"gitlens.views.searchAndCompare.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
	"gitlens.views.searchAndCompare.files.compact": true,

	// Specifies how the _Search & Compare_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.searchAndCompare.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
	"gitlens.views.searchAndCompare.files.threshold": 5,

	// Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.showForCommits": true,

	// 控制默认情况下是否折叠交互窗口中的代码单元格。
	"interactiveWindow.collapseCellInputCode": "fromEditor",

	// 启用的笔记本痕迹包含代码单元格时。
	"notebook.breadcrumbs.showCodeCells": true,

	// 控制焦点指示器呈现位置(沿单元格边框或左侧装订线)
	"notebook.cellFocusIndicator": "gutter",

	// 应在何处显示单元格工具栏，或是否隐藏它。
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// 是否应在悬停或单击时显示单元格工具栏。
	"notebook.cellToolbarVisibility": "click",

	// 控制是否应以紧凑形式呈现笔记本编辑器。例如在打开时，它将减小左边距宽度。
	"notebook.compactView": true,

	// 控制是否应在输出工具栏中呈现输出操作。
	"notebook.consolidatedOutputButton": true,

	// 控制是否在“运行”按钮旁边的下拉列表中显示额外操作。
	"notebook.consolidatedRunButton": false,

	// 是否对笔记本使用增强的文本差异编辑器。
	"notebook.diff.enablePreview": true,

	// 隐藏元数据差异
	"notebook.diff.ignoreMetadata": false,

	// 隐藏输出差异
	"notebook.diff.ignoreOutputs": false,

	// 输出项 mime 类型的优先级列表
	"notebook.displayOrder": [],

	// 控制笔记本编辑器是否应允许通过拖放移动单元格。
	"notebook.dragAndDropEnabled": true,

	// 用于笔记本中使用的代码编辑器的设置。这可用于自定义大多数编辑器*设置。
	"notebook.editorOptionsCustomizations": {},

	// 控制是否在笔记本编辑器中呈现全局工具栏。
	"notebook.globalToolbar": true,

	// 控制笔记本工具栏上的操作是否应呈现标签。
	"notebook.globalToolbarShowLabel": "always",

	// 控制插入单元格操作应出现的位置。
	//  - betweenCells: 在单元格之间悬停时显示的工具栏。
	//  - notebookToolbar: 位于笔记本编辑器顶部的工具栏。
	//  - both: 两个工具栏。
	//  - hidden: 插入操作不会出现在任何位置。
	"notebook.insertToolbarLocation": "both",

	// 控制单元格编辑器中行号的显示。
	"notebook.lineNumbers": "off",

	// 控制笔记本中呈现的标记的字号(以像素为单位)。设置为 `0` 时，将使用 120% 的 `editor.fontSize`。
	"notebook.markup.fontSize": 0,

	// 启用后，当单元格编辑器中的当前光标位于第/最后一行时，光标可以导航到下/上一个单元格。
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// 启用笔记本大纲时，显示代码单元格。
	"notebook.outline.showCodeCells": false,

	// 控制文本输出中呈现的文本行数。
	"notebook.output.textLineLimit": 30,

	// 笔记本单元格输出文本的字体系列。设置为空时，将使用 `editor.fontFamily`。
	"notebook.outputFontFamily": "",

	// 笔记本单元格输出文本的字号。如果设置为 `0`，则使用 `editor.fontSize`。
	"notebook.outputFontSize": 0,

	// 笔记本单元格输出文本的行高。
	//  - 将使用介于 0 和 8 之间的值作为字号的乘数。
	//  - 将使用大于或等于 8 的值作为有效值。
	"notebook.outputLineHeight": 22,

	// 是否应显示单元格状态栏。
	//  - hidden: 单元格状态栏始终隐藏。
	//  - visible: 单元格状态栏始终可见。
	//  - visibleAfterExecute: 在执行单元格之前，单元格状态栏处于隐藏状态。之后，其会变为可见以显示执行状态。
	"notebook.showCellStatusBar": "visible",

	// 控制显示 Markdown 标头文件箭头的时间。
	//  - always: 折叠控件始终可见。
	//  - never: 切勿显示折叠控件并减小装订线大小。
	//  - mouseover: 折叠控件仅在鼠标悬停时可见。
	"notebook.showFoldingControls": "mouseover",

	// 是否为每个单元格使用单独的撤消/重做堆叠。
	"notebook.undoRedoPerCell": true,

	// 自动滚动交互窗口以显示执行的最后一条语句的输出。如果此值为 false，仅当最后一个单元格已滚动到此单元格时，窗口才会滚动。
	"interactiveWindow.alwaysScrollOnNewCell": true,

	// 控制是否应跨窗口重新加载还原交互窗口会话/历史记录。交互式 Windows 中使用的控制器状态是否在窗口重新加载之间持久化由提供控制器的扩展控制。
	"interactiveWindow.restore": false,

	// 是否允许终端中的组合键绑定。请注意，如果此值为 true，并且击键导致一个组合，则它将绕过 `terminal.integrated.commandsToSkipShell`，当你希望 ctrl+k 转到 shell (而不是 VS Code)时，将此设置为 false 特别有用。
	"terminal.integrated.allowChords": true,

	// 是否允许使用菜单栏助记符(如 Alt+F)来触发“打开菜单栏”。请注意，这将导致在设为 true 时，所有 Alt 击键都跳过 shell。此设置在 macOS 不起作用。
	"terminal.integrated.allowMnemonics": false,

	// 如果启用，则当 `editor.multiCursorModifier` 设置为 `'alt'` (默认值)时，alt/option+单击会将提示光标重置于鼠标下方。此功能的有效性取决于 shell。
	"terminal.integrated.altClickMovesCursor": true,

	// 要在 Linux 上用于自动化相关终端使用(如任务和调试)的终端配置文件。如果设置了 `terminal.integrated.automationShell.linux` (现已弃用)，则当前将忽略此设置。
	"terminal.integrated.automationProfile.linux": null,

	// 要在 macOS 上用于自动化相关终端使用(如任务和调试)的终端配置文件。如果设置了 `terminal.integrated.automationShell.osx` (现已弃用)，则当前将忽略此设置。
	"terminal.integrated.automationProfile.osx": null,

	// 要用于自动化相关终端使用(如任务和调试)的终端配置文件。如果设置了 `terminal.integrated.automationShell.windows` (现已弃用)，则当前将忽略此设置。
	"terminal.integrated.automationProfile.windows": null,

	// 已弃用此方法，新的配置自动化 shell 的建议方法是使用 `terminal.integrated.automationProfile.linux` 创建终端自动化配置文件。此方法目前优先于新的自动化配置文件设置，但将来会发生更改。
	// 一个路径，设置后将替代 `terminal.integrated.shell.linux`，并忽略与自动化相关的终端使用情况(例如任务和调试)的 `shellArgs` 个值。
	"terminal.integrated.automationShell.linux": null,

	// 已弃用此方法，新的配置自动化 shell 的建议方法是使用 `terminal.integrated.automationProfile.osx` 创建终端自动化配置文件。此方法目前优先于新的自动化配置文件设置，但将来会发生更改。
	// 一个路径，设置后将替代 `terminal.integrated.shell.osx`，并忽略与自动化相关的终端使用情况(例如任务和调试)的 `shellArgs` 个值。
	"terminal.integrated.automationShell.osx": null,

	// 已弃用此方法，新的配置自动化 shell 的建议方法是使用 `terminal.integrated.automationProfile.windows` 创建终端自动化配置文件。此方法目前优先于新的自动化配置文件设置，但将来会发生更改。
	// 一个路径，设置后将替代 `terminal.integrated.shell.windows`，并忽略与自动化相关的终端使用情况(例如任务和调试)的 `shellArgs` 值。
	"terminal.integrated.automationShell.windows": null,

	// 在终端中遇到一组消息时，将自动响应这组消息。如果消息足够具体，可能有助于自动执行常见响应。
	// 
	// 备注:
	// 
	// - 使用 `"Terminate batch job (Y/N)": "Y\r"` 自动响应 Windows 上的终止批处理作业提示。
	// - 消息包括转义序列，因此可能无法使用带样式的文本进行回复。
	// - 每秒只能进行一次回复。
	// - 在回复中使用 `"\r"` 表示输入键。
	// - 要取消设置默认键，请将该值设置为 null。
	// - 如果新的不适用，请重新启动 VS Code。
	"terminal.integrated.autoReplies": {},

	// 触发时在终端选项卡中显示响铃的毫秒数。
	"terminal.integrated.bellDuration": 1000,

	// 一组命令 ID，其键绑定将不发送至 shell，而是始终由 VS Code 进行处理。这样的话，通常由 shell 使用的键绑定的行为可如同焦点未在终端上时的行为一样，例如按 “Ctrl+P” 来启动“快速打开”。
	// 
	// &nbsp;
	// 
	// 默认跳过多项命令。要替代默认值并转而将相关命令的键绑定传递给 shell，请添加以 “-” 字符为前缀的命令。例如，添加“-workbench.action.quickOpen” 可使 “Ctrl+P”到达 shell。
	// 
	// &nbsp;
	// 
	// 在设置编辑器中查看时，下面的默认跳过命令列表会被截断。要查看完整列表，请执行 [打开默认设置 JSON](command:workbench.action.openRawDefaultSettings '打开默认设置(JSON)')，然后从下面的列表中搜索第一个命令。
	// 
	// &nbsp;
	// 
	// 默认跳过的命令:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copyLastCommand
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.copySelectionAsHtml
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.goToRecentDirectory
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runRecentCommand
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// 如果存在活动终端会话，控制是否确认窗口关闭的时间。
	//  - never: 从不确认。
	//  - always: 始终确认是否存在终端。
	//  - hasChildProcesses: 确认是否存在具有子进程的终端。
	"terminal.integrated.confirmOnExit": "never",

	// 控制是否在终端具有子进程时确认终止终端。当设置为编辑器时，如果编辑器区域中的终端具有子进程，则将标记为已更改。请注意，子进程检测可能不适用于 Git Bash 等 shell，后者不会将其进程作为 shell 的子进程运行。
	//  - never: 从不确认。
	//  - editor: 确认终端是否在编辑器中。
	//  - panel: 确认终端是否在面板中。
	//  - always: 确认终端是在编辑器中还是在面板中。
	"terminal.integrated.confirmOnKill": "editor",

	// 控制是否将在终端中选定的文本复制到剪贴板。
	"terminal.integrated.copyOnSelection": false,

	// 控制终端光标是否闪烁。
	"terminal.integrated.cursorBlinking": false,

	// 控制终端光标的样式。
	"terminal.integrated.cursorStyle": "block",

	// 控制当 `terminal.integrated.cursorStyle` 设置为 `line` 时光标的宽度。
	"terminal.integrated.cursorWidth": 1,

	// 是否为块元素和框绘图字符绘制自定义字形，而不是使用字体，这通常会产生更好的连续线条呈现效果。请注意，这不适用于 DOM 呈现器
	"terminal.integrated.customGlyphs": true,

	// 将在其中启动终端的显式起始路径，它用作 shell 进程的当前工作目录(cwd)。如果根目录不是方便的 cwd，此路径在工作区设置中可能十分有用。
	"terminal.integrated.cwd": "",

	// 控制新建终端的显示位置。
	//  - editor: 在编辑器中创建终端
	//  - view: 在终端视图中创建终端
	"terminal.integrated.defaultLocation": "view",

	// 在 Linux 上使用的默认配置文件。如果设置了 `terminal.integrated.shell.linux` 或 `terminal.integrated.shellArgs.linux`，则当前将忽略此设置。
	"terminal.integrated.defaultProfile.linux": null,

	// 在 macOS 上使用的默认配置文件。如果设置了 `terminal.integrated.shell.osx` 或 `terminal.integrated.shellArgs.osx`，则当前将忽略此设置。
	"terminal.integrated.defaultProfile.osx": null,

	// 在 Windows 上使用的默认配置文件。如果设置了 `terminal.integrated.shell.windows` 或 `terminal.integrated.shellArgs.windows`，则当前将忽略此设置。
	//  - null: 自动检测默认值
	//  - PowerShell: $(terminal-powershell) PowerShell
	// - path: C:\windows\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
	// - path: C:\windows\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Git Bash: $(terminal) Git Bash
	// - path: C:\Program Files\Git\bin\bash.exe
	// - args: ['--login']
	//  - Command Prompt: $(terminal-cmd) Command Prompt
	// - path: C:\windows\System32\cmd.exe
	// - args: []
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdentifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.windows": null,

	// 控制是否检测 "$LANG" 环境变量并将其设置为符合 UTF-8 的选项，因为 VS Code 的终端仅支持来自 shell 的 UTF-8 编码数据。
	//  - auto: 如果现有变量不存在或不以 "'.UTF-8'" 结尾，则设置 "$LANG" 环境变量。
	//  - off: 请勿设置 "$LANG" 环境变量。
	//  - on: 始终设置 "$LANG" 环境变量。
	"terminal.integrated.detectLocale": "auto",

	// 控制终端中的加粗文本是否始终使用 "bright" ANSI 颜色变量。
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// 控制是否启用终端铃声，这在终端名称旁边显示为视觉上的铃铛。
	"terminal.integrated.enableBell": false,

	// 是否在终端中启用文件链接。尤其是在处理网络驱动器时，链接会变慢，因为每个文件链接都会根据文件系统进行验证。更改此项将仅在新的终端中生效。
	"terminal.integrated.enableFileLinks": true,

	// 将多行粘贴到终端时显示警告对话框。在以下情况中，该对话框不显示:
	// 
	// - 已启用带括号的粘贴模式(shell 支持本机多行粘贴)
	// - 粘贴由 shell 的读取一行数据处理(在 pwsh 的情况下)
	"terminal.integrated.enableMultiLinePasteWarning": true,

	// 跨窗口重新加载保持工作区的终端会话/历史记录。
	"terminal.integrated.enablePersistentSessions": true,

	// 具有环境变量的对象，这些变量将添加到 Linux 上的终端要使用的 VS Code 进程。如果设置为 "null"，则删除环境变量。
	"terminal.integrated.env.linux": {},

	// 具有环境变量的对象，这些变量将添加到 macOS 中的终端要使用的 VS Code 进程。如果设置为 "null"，则删除环境变量。
	"terminal.integrated.env.osx": {},

	// 具有环境变量的对象，这些变量将添加到将由 Windows 上的终端使用的 VS Code 进程。设置为 "null" 以删除环境变量。
	"terminal.integrated.env.windows": {},

	// 是否在每个终端上显示环境更改指示器，该指示器解释了使是否已进行扩展或想要对终端环境进行更改。
	//  - off: 禁用指示器。
	//  - on: 启用指示器。
	//  - warnonly: 仅当终端环境为“已过时”时，仅显示警告指示器，而不是显示指出终端环境已由扩展修改的信息指示器。
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// 在扩展想要向终端的环境贡献内容但尚未与之交互时是否自动重启终端。
	"terminal.integrated.environmentChangesRelaunch": true,

	// 按 "Alt" 时的滚动速度加倍。
	"terminal.integrated.fastScrollSensitivity": 5,

	// 控制终端的字体系列，它默认为 `editor.fontFamily` 的值。
	"terminal.integrated.fontFamily": "",

	// 控制终端的字号(以像素为单位)。
	"terminal.integrated.fontSize": 14,

	// 要在终端中用于非粗体文本的字体粗细。接受“正常”和“加粗”这两个关键字，或接受 1-1000 之间的数字。
	"terminal.integrated.fontWeight": "normal",

	// 要在终端中用于粗体文本的字体粗细。接受“正常”和“加粗”这两个关键字，或接受 1-1000 之间的数字。
	"terminal.integrated.fontWeightBold": "bold",

	// 控制终端是否将使用 GPU 来进行呈现。
	//  - auto: 让 VS Code 检测哪些呈现器将提供最佳体验。
	//  - on: 在终端内启用 GPU 加速。
	//  - off: 禁用终端中的 GPU 加速。当 GPU 加速关闭时，终端的呈现速度会慢得多，但它应该能够在所有系统上可靠地工作。
	//  - canvas: 使用终端的回退画布呈现器，它使用 2d 上下文而不是在某些系统上性能更好地 Webgl。请注意，画布呈现器中的某些功能受到限制，如不透明选择。
	"terminal.integrated.gpuAcceleration": "auto",

	// 使用 `terminal.integrated.confirmOnKill` 设置时要忽略的一组流程名称。
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// 新 shell 是否应从 VS Code 继承其环境，这可能会生成登录 shell，以确保初始化 $PATH 和其他开发变量。这不会对 Windows 造成影响。
	"terminal.integrated.inheritEnv": true,

	// 控制终端的字母间距，这是一个整数值，表示要在字符之间增加的额外像素量。
	"terminal.integrated.letterSpacing": 0,

	// 控制终端的行高，此数字乘以终端字号等于实际行高(以像素为单位)。
	"terminal.integrated.lineHeight": 1,

	// 何时应启用本地回显。这将替代 `terminal.integrated.localEchoLatencyThreshold`
	//  - on: 始终启用
	//  - off: 始终禁用
	//  - auto: 仅对远程工作区启用
	"terminal.integrated.localEchoEnabled": "auto",

	// 当在终端标题中找到其中一个程序名称时，将禁用本地回显。
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// 网络延迟的长度(以毫秒为单位)，其中本地编辑将在终端上回显，无需等待服务器承认。如果为 '0'，则本地回显将始终开启，如果为 '-1'，则将禁用。
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// 本地回显文本的终端样式；字体样式或 RGB 颜色。
	"terminal.integrated.localEchoStyle": "dim",

	// 控制在 macOS 上使用 Option+单击时是否强制选择内容。这将强制进行常规(行)选择并禁止使用列选择模式。这样，可使用常规终端选择进行复制粘贴，例如在 tmux 中启用鼠标模式时。
	"terminal.integrated.macOptionClickForcesSelection": false,

	// 控制是否将选项键视为 macOS 中的终端上的元键。
	"terminal.integrated.macOptionIsMeta": false,

	// 设置每个单元格的前景色时，将改为尝试符合指定的对比度比率。示例值:
	// 
	// - 1: 不执行任何操作，使用标准主题颜色。
	// - 4.5: [符合 WCAG AA 标准(最低)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html)(默认)。
	// - 7: [符合 WCAG AAA 标准(增强)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html)。
	// - 21: 黑底白字或白底黑字。
	"terminal.integrated.minimumContrastRatio": 4.5,

	// 要在鼠标滚轮滚动事件的 "deltaY" 上使用的乘数。
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// 当必须关闭终端进程(例如当窗口或应用程序关闭时)时，这将确定何时应还原以前的终端会话内容/历史记录，以及在下次打开工作区时重新创建的进程。
	// 
	// 注意事项:
	// 
	// - 进程当前工作目录的还原取决于是否受 shell 支持。
	// - 在关闭期间保留会话的时间有限，因此在使用高延迟远程连接时可能会中止相应会话。
	//  - onExit: 在 Windows/Linux 上关闭最后窗口后或当触发 `workbench.action.quit` 命令(命令面板、键绑定、菜单)时，恢复流程。
	//  - onExitAndWindowClose: 在 Windows/Linux 上关闭最后窗口后或当触发 `workbench.action.quit` 命令(命令面板、键绑定、菜单)或关闭窗口时，恢复流程。
	//  - never: 永远不要还原终端缓冲区或重新创建流程。
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// 控制重新连接到永久性终端会话时将还原的最大行数。增加此数量将以占用更多内存为代价还原更多的回滚行，并增加在启动时连接到终端所需的时间。此设置需要重启才能生效，并应设置为小于或等于 `terminal.integrated.scrollback` 的值。
	"terminal.integrated.persistentSessionScrollback": 100,

	// 通过终端下拉列表创建新终端时要显示的 Linux 配置文件。请手动设置 `path` 属性(通过可选的 `args` 进行)。
	// 
	// 将现有配置文件设置为 `null` 以从列表中隐藏配置文件，例如: `"bash": null`。
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// 通过终端下拉列表创建新终端时要显示的 macOS 配置文件。请手动设置 `path` 属性(通过可选的 `args` 进行)。
	// 
	// 将现有配置文件设置为 `null` 以从列表中隐藏配置文件，例如: `"bash": null`。
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// 通过终端下拉列表创建新终端时要显示的 Windows 配置文件。使用 `source` 属性自动检测 shell 的位置。或手动设置 `path` 属性(通过可选的 `args` 进行)。
	// 
	// 将现有配置文件设置为 `null` 以从列表中隐藏配置文件，例如: `"Ubuntu-20.04 (WSL)": null`。
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// 控制终端如何回应右键单击操作。
	//  - default: 显示上下文菜单。
	//  - copyPaste: 当有选定内容时复制，否则粘贴。
	//  - paste: 右键单击时粘贴。
	//  - selectWord: 选择光标下方的字词并显示上下文菜单。
	//  - nothing: 不执行任何操作并将事件传递到终端。
	"terminal.integrated.rightClickBehavior": "copyPaste",

	// 控制终端在其缓冲区中保留的最大行数。
	"terminal.integrated.scrollback": 1000,

	// 将大多数键绑定调度到终端而不是工作台，重写 `terminal.integrated.commandsToSkipShell`，也可以用于微调。
	"terminal.integrated.sendKeybindingsToShell": false,

	// 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.linux#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.linux` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
	// 终端在 Linux 上使用的 shell 的路径。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shell.linux": null,

	// 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.osx#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.osx` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
	// 终端在 macOS 上使用的 shell 的路径。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shell.osx": null,

	// 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.windows#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.windows` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
	// 终端在 Windows 上使用的 shell 的路径。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shell.windows": null,

	// 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.linux#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.linux` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
	// 在 Linux 终端上时要使用的命令行参数。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.linux": [],

	// 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.osx#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.osx` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
	// 在 macOS 终端上时要使用的命令行参数。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.windows#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.windows` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
	// 在 Windows 终端上时要使用的命令行参数。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.windows": [],

	// 启用 shell 集成后，为每个命令添加修饰。
	//  - both: 在装订线(左侧)和概述标尺(右侧)中显示修饰
	//  - gutter: 在终端左侧显示装订线修饰
	//  - overviewRuler: 在终端右侧显示概述标尺修饰
	//  - never: 不显示修饰
	"terminal.integrated.shellIntegration.decorationsEnabled": "both",

	// 确定是否自动注入 shell 集成以支持增强型命令跟踪和当前工作目录检测等功能。
	// 
	// Shell 集成的工作原理是使用启动脚本注入 shell。通过该脚本，VS Code 可深入了解终端内正在发生的情况。
	// 
	// 受支持的 shell:
	// 
	// - Linux/macOS: bash、pwsh、zsh
	//  - Windows: pwsh
	// 
	// 此设置仅在创建终端时适用，因此需要重启终端才能生效。
	// 
	// 请注意，如果在终端配置文件、[复杂 bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand)或其他不受支持的设置中定义了自定义参数，则脚本注入可能不起作用。`terminal.integrated.shellIntegrations.decorationsEnabled`
	"terminal.integrated.shellIntegration.enabled": true,

	// 控制要保留在终端命令历史记录中的最近使用的命令数。设置为 0 可禁用终端命令历史记录。
	"terminal.integrated.shellIntegration.history": 100,

	// 控制在退出代码为非零时是否显示“终端进程已终止且显示退出代码”警报。
	"terminal.integrated.showExitAlert": true,

	// 是否显示终端输出中链接的悬停。
	"terminal.integrated.showLinkHover": true,

	// 控制终端是否将使用动画滚动。
	"terminal.integrated.smoothScrolling": false,

	// 控制拆分终端开始时使用的工作目录。
	//  - workspaceRoot: 新的拆分终端将使用工作区根作为工作目录。在多根工作区中，提供了要使用根文件夹的选项。
	//  - initial: 新的拆分终端将使用父终端开始时使用的工作目录。
	//  - inherited: 在 macOS 和 Linux 上，新的拆分终端将使用父终端的工作目录。在 Windows 上，这与初始行为相同。
	"terminal.integrated.splitCwd": "inherited",

	// 默认情况下要与终端图标关联的主题颜色 ID。
	"terminal.integrated.tabs.defaultColor": null,

	// 默认情况下要与终端图标关联的 codicon ID。
	//  - add: $(add)
	//  - plus: $(plus)
	//  - gist-new: $(gist-new)
	//  - repo-create: $(repo-create)
	//  - lightbulb: $(lightbulb)
	//  - light-bulb: $(light-bulb)
	//  - repo: $(repo)
	//  - repo-delete: $(repo-delete)
	//  - gist-fork: $(gist-fork)
	//  - repo-forked: $(repo-forked)
	//  - git-pull-request: $(git-pull-request)
	//  - git-pull-request-abandoned: $(git-pull-request-abandoned)
	//  - record-keys: $(record-keys)
	//  - keyboard: $(keyboard)
	//  - tag: $(tag)
	//  - tag-add: $(tag-add)
	//  - tag-remove: $(tag-remove)
	//  - person: $(person)
	//  - person-follow: $(person-follow)
	//  - person-outline: $(person-outline)
	//  - person-filled: $(person-filled)
	//  - git-branch: $(git-branch)
	//  - git-branch-create: $(git-branch-create)
	//  - git-branch-delete: $(git-branch-delete)
	//  - source-control: $(source-control)
	//  - mirror: $(mirror)
	//  - mirror-public: $(mirror-public)
	//  - star: $(star)
	//  - star-add: $(star-add)
	//  - star-delete: $(star-delete)
	//  - star-empty: $(star-empty)
	//  - comment: $(comment)
	//  - comment-add: $(comment-add)
	//  - alert: $(alert)
	//  - warning: $(warning)
	//  - search: $(search)
	//  - search-save: $(search-save)
	//  - log-out: $(log-out)
	//  - sign-out: $(sign-out)
	//  - log-in: $(log-in)
	//  - sign-in: $(sign-in)
	//  - eye: $(eye)
	//  - eye-unwatch: $(eye-unwatch)
	//  - eye-watch: $(eye-watch)
	//  - circle-filled: $(circle-filled)
	//  - primitive-dot: $(primitive-dot)
	//  - close-dirty: $(close-dirty)
	//  - debug-breakpoint: $(debug-breakpoint)
	//  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
	//  - debug-hint: $(debug-hint)
	//  - primitive-square: $(primitive-square)
	//  - edit: $(edit)
	//  - pencil: $(pencil)
	//  - info: $(info)
	//  - issue-opened: $(issue-opened)
	//  - gist-private: $(gist-private)
	//  - git-fork-private: $(git-fork-private)
	//  - lock: $(lock)
	//  - mirror-private: $(mirror-private)
	//  - close: $(close)
	//  - remove-close: $(remove-close)
	//  - x: $(x)
	//  - repo-sync: $(repo-sync)
	//  - sync: $(sync)
	//  - clone: $(clone)
	//  - desktop-download: $(desktop-download)
	//  - beaker: $(beaker)
	//  - microscope: $(microscope)
	//  - vm: $(vm)
	//  - device-desktop: $(device-desktop)
	//  - file: $(file)
	//  - file-text: $(file-text)
	//  - more: $(more)
	//  - ellipsis: $(ellipsis)
	//  - kebab-horizontal: $(kebab-horizontal)
	//  - mail-reply: $(mail-reply)
	//  - reply: $(reply)
	//  - organization: $(organization)
	//  - organization-filled: $(organization-filled)
	//  - organization-outline: $(organization-outline)
	//  - new-file: $(new-file)
	//  - file-add: $(file-add)
	//  - new-folder: $(new-folder)
	//  - file-directory-create: $(file-directory-create)
	//  - trash: $(trash)
	//  - trashcan: $(trashcan)
	//  - history: $(history)
	//  - clock: $(clock)
	//  - folder: $(folder)
	//  - file-directory: $(file-directory)
	//  - symbol-folder: $(symbol-folder)
	//  - logo-github: $(logo-github)
	//  - mark-github: $(mark-github)
	//  - github: $(github)
	//  - terminal: $(terminal)
	//  - console: $(console)
	//  - repl: $(repl)
	//  - zap: $(zap)
	//  - symbol-event: $(symbol-event)
	//  - error: $(error)
	//  - stop: $(stop)
	//  - variable: $(variable)
	//  - symbol-variable: $(symbol-variable)
	//  - array: $(array)
	//  - symbol-array: $(symbol-array)
	//  - symbol-module: $(symbol-module)
	//  - symbol-package: $(symbol-package)
	//  - symbol-namespace: $(symbol-namespace)
	//  - symbol-object: $(symbol-object)
	//  - symbol-method: $(symbol-method)
	//  - symbol-function: $(symbol-function)
	//  - symbol-constructor: $(symbol-constructor)
	//  - symbol-boolean: $(symbol-boolean)
	//  - symbol-null: $(symbol-null)
	//  - symbol-numeric: $(symbol-numeric)
	//  - symbol-number: $(symbol-number)
	//  - symbol-structure: $(symbol-structure)
	//  - symbol-struct: $(symbol-struct)
	//  - symbol-parameter: $(symbol-parameter)
	//  - symbol-type-parameter: $(symbol-type-parameter)
	//  - symbol-key: $(symbol-key)
	//  - symbol-text: $(symbol-text)
	//  - symbol-reference: $(symbol-reference)
	//  - go-to-file: $(go-to-file)
	//  - symbol-enum: $(symbol-enum)
	//  - symbol-value: $(symbol-value)
	//  - symbol-ruler: $(symbol-ruler)
	//  - symbol-unit: $(symbol-unit)
	//  - activate-breakpoints: $(activate-breakpoints)
	//  - archive: $(archive)
	//  - arrow-both: $(arrow-both)
	//  - arrow-down: $(arrow-down)
	//  - arrow-left: $(arrow-left)
	//  - arrow-right: $(arrow-right)
	//  - arrow-small-down: $(arrow-small-down)
	//  - arrow-small-left: $(arrow-small-left)
	//  - arrow-small-right: $(arrow-small-right)
	//  - arrow-small-up: $(arrow-small-up)
	//  - arrow-up: $(arrow-up)
	//  - bell: $(bell)
	//  - bold: $(bold)
	//  - book: $(book)
	//  - bookmark: $(bookmark)
	//  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
	//  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
	//  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
	//  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
	//  - debug-breakpoint-data: $(debug-breakpoint-data)
	//  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
	//  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
	//  - debug-breakpoint-log: $(debug-breakpoint-log)
	//  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
	//  - briefcase: $(briefcase)
	//  - broadcast: $(broadcast)
	//  - browser: $(browser)
	//  - bug: $(bug)
	//  - calendar: $(calendar)
	//  - case-sensitive: $(case-sensitive)
	//  - check: $(check)
	//  - checklist: $(checklist)
	//  - chevron-down: $(chevron-down)
	//  - drop-down-button: $(drop-down-button)
	//  - chevron-left: $(chevron-left)
	//  - chevron-right: $(chevron-right)
	//  - chevron-up: $(chevron-up)
	//  - chrome-close: $(chrome-close)
	//  - chrome-maximize: $(chrome-maximize)
	//  - chrome-minimize: $(chrome-minimize)
	//  - chrome-restore: $(chrome-restore)
	//  - circle: $(circle)
	//  - circle-outline: $(circle-outline)
	//  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
	//  - circle-slash: $(circle-slash)
	//  - circuit-board: $(circuit-board)
	//  - clear-all: $(clear-all)
	//  - clippy: $(clippy)
	//  - close-all: $(close-all)
	//  - cloud-download: $(cloud-download)
	//  - cloud-upload: $(cloud-upload)
	//  - code: $(code)
	//  - collapse-all: $(collapse-all)
	//  - color-mode: $(color-mode)
	//  - comment-discussion: $(comment-discussion)
	//  - compare-changes: $(compare-changes)
	//  - credit-card: $(credit-card)
	//  - dash: $(dash)
	//  - dashboard: $(dashboard)
	//  - database: $(database)
	//  - debug-continue: $(debug-continue)
	//  - debug-disconnect: $(debug-disconnect)
	//  - debug-pause: $(debug-pause)
	//  - debug-restart: $(debug-restart)
	//  - debug-start: $(debug-start)
	//  - debug-step-into: $(debug-step-into)
	//  - debug-step-out: $(debug-step-out)
	//  - debug-step-over: $(debug-step-over)
	//  - debug-stop: $(debug-stop)
	//  - debug: $(debug)
	//  - device-camera-video: $(device-camera-video)
	//  - device-camera: $(device-camera)
	//  - device-mobile: $(device-mobile)
	//  - diff-added: $(diff-added)
	//  - diff-ignored: $(diff-ignored)
	//  - diff-modified: $(diff-modified)
	//  - diff-removed: $(diff-removed)
	//  - diff-renamed: $(diff-renamed)
	//  - diff: $(diff)
	//  - discard: $(discard)
	//  - editor-layout: $(editor-layout)
	//  - empty-window: $(empty-window)
	//  - exclude: $(exclude)
	//  - extensions: $(extensions)
	//  - eye-closed: $(eye-closed)
	//  - file-binary: $(file-binary)
	//  - file-code: $(file-code)
	//  - file-media: $(file-media)
	//  - file-pdf: $(file-pdf)
	//  - file-submodule: $(file-submodule)
	//  - file-symlink-directory: $(file-symlink-directory)
	//  - file-symlink-file: $(file-symlink-file)
	//  - file-zip: $(file-zip)
	//  - files: $(files)
	//  - filter: $(filter)
	//  - flame: $(flame)
	//  - fold-down: $(fold-down)
	//  - fold-up: $(fold-up)
	//  - fold: $(fold)
	//  - folder-active: $(folder-active)
	//  - folder-opened: $(folder-opened)
	//  - gear: $(gear)
	//  - gift: $(gift)
	//  - gist-secret: $(gist-secret)
	//  - gist: $(gist)
	//  - git-commit: $(git-commit)
	//  - git-compare: $(git-compare)
	//  - git-merge: $(git-merge)
	//  - github-action: $(github-action)
	//  - github-alt: $(github-alt)
	//  - globe: $(globe)
	//  - grabber: $(grabber)
	//  - graph: $(graph)
	//  - gripper: $(gripper)
	//  - heart: $(heart)
	//  - home: $(home)
	//  - horizontal-rule: $(horizontal-rule)
	//  - hubot: $(hubot)
	//  - inbox: $(inbox)
	//  - issue-closed: $(issue-closed)
	//  - issue-reopened: $(issue-reopened)
	//  - issues: $(issues)
	//  - italic: $(italic)
	//  - jersey: $(jersey)
	//  - json: $(json)
	//  - kebab-vertical: $(kebab-vertical)
	//  - key: $(key)
	//  - law: $(law)
	//  - lightbulb-autofix: $(lightbulb-autofix)
	//  - link-external: $(link-external)
	//  - link: $(link)
	//  - list-ordered: $(list-ordered)
	//  - list-unordered: $(list-unordered)
	//  - live-share: $(live-share)
	//  - loading: $(loading)
	//  - location: $(location)
	//  - mail-read: $(mail-read)
	//  - mail: $(mail)
	//  - markdown: $(markdown)
	//  - megaphone: $(megaphone)
	//  - mention: $(mention)
	//  - milestone: $(milestone)
	//  - mortar-board: $(mortar-board)
	//  - move: $(move)
	//  - multiple-windows: $(multiple-windows)
	//  - mute: $(mute)
	//  - no-newline: $(no-newline)
	//  - note: $(note)
	//  - octoface: $(octoface)
	//  - open-preview: $(open-preview)
	//  - package: $(package)
	//  - paintcan: $(paintcan)
	//  - pin: $(pin)
	//  - play: $(play)
	//  - run: $(run)
	//  - plug: $(plug)
	//  - preserve-case: $(preserve-case)
	//  - preview: $(preview)
	//  - project: $(project)
	//  - pulse: $(pulse)
	//  - question: $(question)
	//  - quote: $(quote)
	//  - radio-tower: $(radio-tower)
	//  - reactions: $(reactions)
	//  - references: $(references)
	//  - refresh: $(refresh)
	//  - regex: $(regex)
	//  - remote-explorer: $(remote-explorer)
	//  - remote: $(remote)
	//  - remove: $(remove)
	//  - replace-all: $(replace-all)
	//  - replace: $(replace)
	//  - repo-clone: $(repo-clone)
	//  - repo-force-push: $(repo-force-push)
	//  - repo-pull: $(repo-pull)
	//  - repo-push: $(repo-push)
	//  - report: $(report)
	//  - request-changes: $(request-changes)
	//  - rocket: $(rocket)
	//  - root-folder-opened: $(root-folder-opened)
	//  - root-folder: $(root-folder)
	//  - rss: $(rss)
	//  - ruby: $(ruby)
	//  - save-all: $(save-all)
	//  - save-as: $(save-as)
	//  - save: $(save)
	//  - screen-full: $(screen-full)
	//  - screen-normal: $(screen-normal)
	//  - search-stop: $(search-stop)
	//  - server: $(server)
	//  - settings-gear: $(settings-gear)
	//  - settings: $(settings)
	//  - shield: $(shield)
	//  - smiley: $(smiley)
	//  - sort-precedence: $(sort-precedence)
	//  - split-horizontal: $(split-horizontal)
	//  - split-vertical: $(split-vertical)
	//  - squirrel: $(squirrel)
	//  - star-full: $(star-full)
	//  - star-half: $(star-half)
	//  - symbol-class: $(symbol-class)
	//  - symbol-color: $(symbol-color)
	//  - symbol-customcolor: $(symbol-customcolor)
	//  - symbol-constant: $(symbol-constant)
	//  - symbol-enum-member: $(symbol-enum-member)
	//  - symbol-field: $(symbol-field)
	//  - symbol-file: $(symbol-file)
	//  - symbol-interface: $(symbol-interface)
	//  - symbol-keyword: $(symbol-keyword)
	//  - symbol-misc: $(symbol-misc)
	//  - symbol-operator: $(symbol-operator)
	//  - symbol-property: $(symbol-property)
	//  - wrench: $(wrench)
	//  - wrench-subaction: $(wrench-subaction)
	//  - symbol-snippet: $(symbol-snippet)
	//  - tasklist: $(tasklist)
	//  - telescope: $(telescope)
	//  - text-size: $(text-size)
	//  - three-bars: $(three-bars)
	//  - thumbsdown: $(thumbsdown)
	//  - thumbsup: $(thumbsup)
	//  - tools: $(tools)
	//  - triangle-down: $(triangle-down)
	//  - triangle-left: $(triangle-left)
	//  - triangle-right: $(triangle-right)
	//  - triangle-up: $(triangle-up)
	//  - twitter: $(twitter)
	//  - unfold: $(unfold)
	//  - unlock: $(unlock)
	//  - unmute: $(unmute)
	//  - unverified: $(unverified)
	//  - verified: $(verified)
	//  - versions: $(versions)
	//  - vm-active: $(vm-active)
	//  - vm-outline: $(vm-outline)
	//  - vm-running: $(vm-running)
	//  - watch: $(watch)
	//  - whitespace: $(whitespace)
	//  - whole-word: $(whole-word)
	//  - window: $(window)
	//  - word-wrap: $(word-wrap)
	//  - zoom-in: $(zoom-in)
	//  - zoom-out: $(zoom-out)
	//  - list-filter: $(list-filter)
	//  - list-flat: $(list-flat)
	//  - list-selection: $(list-selection)
	//  - selection: $(selection)
	//  - list-tree: $(list-tree)
	//  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
	//  - debug-breakpoint-function: $(debug-breakpoint-function)
	//  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
	//  - debug-stackframe-active: $(debug-stackframe-active)
	//  - circle-small-filled: $(circle-small-filled)
	//  - debug-stackframe-dot: $(debug-stackframe-dot)
	//  - debug-stackframe: $(debug-stackframe)
	//  - debug-stackframe-focused: $(debug-stackframe-focused)
	//  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
	//  - symbol-string: $(symbol-string)
	//  - debug-reverse-continue: $(debug-reverse-continue)
	//  - debug-step-back: $(debug-step-back)
	//  - debug-restart-frame: $(debug-restart-frame)
	//  - call-incoming: $(call-incoming)
	//  - call-outgoing: $(call-outgoing)
	//  - menu: $(menu)
	//  - expand-all: $(expand-all)
	//  - feedback: $(feedback)
	//  - group-by-ref-type: $(group-by-ref-type)
	//  - ungroup-by-ref-type: $(ungroup-by-ref-type)
	//  - account: $(account)
	//  - bell-dot: $(bell-dot)
	//  - debug-console: $(debug-console)
	//  - library: $(library)
	//  - output: $(output)
	//  - run-all: $(run-all)
	//  - sync-ignored: $(sync-ignored)
	//  - pinned: $(pinned)
	//  - github-inverted: $(github-inverted)
	//  - debug-alt: $(debug-alt)
	//  - server-process: $(server-process)
	//  - server-environment: $(server-environment)
	//  - pass: $(pass)
	//  - stop-circle: $(stop-circle)
	//  - play-circle: $(play-circle)
	//  - record: $(record)
	//  - debug-alt-small: $(debug-alt-small)
	//  - vm-connect: $(vm-connect)
	//  - cloud: $(cloud)
	//  - merge: $(merge)
	//  - export: $(export)
	//  - graph-left: $(graph-left)
	//  - magnet: $(magnet)
	//  - notebook: $(notebook)
	//  - redo: $(redo)
	//  - check-all: $(check-all)
	//  - pinned-dirty: $(pinned-dirty)
	//  - pass-filled: $(pass-filled)
	//  - circle-large-filled: $(circle-large-filled)
	//  - circle-large: $(circle-large)
	//  - circle-large-outline: $(circle-large-outline)
	//  - combine: $(combine)
	//  - gather: $(gather)
	//  - table: $(table)
	//  - variable-group: $(variable-group)
	//  - type-hierarchy: $(type-hierarchy)
	//  - type-hierarchy-sub: $(type-hierarchy-sub)
	//  - type-hierarchy-super: $(type-hierarchy-super)
	//  - git-pull-request-create: $(git-pull-request-create)
	//  - run-above: $(run-above)
	//  - run-below: $(run-below)
	//  - notebook-template: $(notebook-template)
	//  - debug-rerun: $(debug-rerun)
	//  - workspace-trusted: $(workspace-trusted)
	//  - workspace-untrusted: $(workspace-untrusted)
	//  - workspace-unspecified: $(workspace-unspecified)
	//  - terminal-cmd: $(terminal-cmd)
	//  - terminal-debian: $(terminal-debian)
	//  - terminal-linux: $(terminal-linux)
	//  - terminal-powershell: $(terminal-powershell)
	//  - terminal-tmux: $(terminal-tmux)
	//  - terminal-ubuntu: $(terminal-ubuntu)
	//  - terminal-bash: $(terminal-bash)
	//  - arrow-swap: $(arrow-swap)
	//  - copy: $(copy)
	//  - person-add: $(person-add)
	//  - filter-filled: $(filter-filled)
	//  - wand: $(wand)
	//  - debug-line-by-line: $(debug-line-by-line)
	//  - inspect: $(inspect)
	//  - layers: $(layers)
	//  - layers-dot: $(layers-dot)
	//  - layers-active: $(layers-active)
	//  - compass: $(compass)
	//  - compass-dot: $(compass-dot)
	//  - compass-active: $(compass-active)
	//  - azure: $(azure)
	//  - issue-draft: $(issue-draft)
	//  - git-pull-request-closed: $(git-pull-request-closed)
	//  - git-pull-request-draft: $(git-pull-request-draft)
	//  - debug-all: $(debug-all)
	//  - debug-coverage: $(debug-coverage)
	//  - run-errors: $(run-errors)
	//  - folder-library: $(folder-library)
	//  - debug-continue-small: $(debug-continue-small)
	//  - beaker-stop: $(beaker-stop)
	//  - graph-line: $(graph-line)
	//  - graph-scatter: $(graph-scatter)
	//  - pie-chart: $(pie-chart)
	//  - bracket: $(bracket)
	//  - bracket-dot: $(bracket-dot)
	//  - bracket-error: $(bracket-error)
	//  - lock-small: $(lock-small)
	//  - azure-devops: $(azure-devops)
	//  - verified-filled: $(verified-filled)
	//  - newline: $(newline)
	//  - layout: $(layout)
	//  - layout-activitybar-left: $(layout-activitybar-left)
	//  - layout-activitybar-right: $(layout-activitybar-right)
	//  - layout-panel-left: $(layout-panel-left)
	//  - layout-panel-center: $(layout-panel-center)
	//  - layout-panel-justify: $(layout-panel-justify)
	//  - layout-panel-right: $(layout-panel-right)
	//  - layout-panel: $(layout-panel)
	//  - layout-sidebar-left: $(layout-sidebar-left)
	//  - layout-sidebar-right: $(layout-sidebar-right)
	//  - layout-statusbar: $(layout-statusbar)
	//  - layout-menubar: $(layout-menubar)
	//  - layout-centered: $(layout-centered)
	//  - layout-sidebar-right-off: $(layout-sidebar-right-off)
	//  - layout-panel-off: $(layout-panel-off)
	//  - layout-sidebar-left-off: $(layout-sidebar-left-off)
	//  - target: $(target)
	//  - indent: $(indent)
	//  - record-small: $(record-small)
	//  - error-small: $(error-small)
	//  - arrow-circle-down: $(arrow-circle-down)
	//  - arrow-circle-left: $(arrow-circle-left)
	//  - arrow-circle-right: $(arrow-circle-right)
	//  - arrow-circle-up: $(arrow-circle-up)
	//  - heart-filled: $(heart-filled)
	//  - map: $(map)
	//  - map-filled: $(map-filled)
	//  - circle-small: $(circle-small)
	//  - bell-slash: $(bell-slash)
	//  - bell-slash-dot: $(bell-slash-dot)
	//  - comment-unresolved: $(comment-unresolved)
	//  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
	//  - git-pull-request-new-changes: $(git-pull-request-new-changes)
	//  - search-fuzzy: $(search-fuzzy)
	//  - dialog-error: $(dialog-error)
	//  - dialog-warning: $(dialog-warning)
	//  - dialog-info: $(dialog-info)
	//  - dialog-close: $(dialog-close)
	//  - tree-item-expanded: $(tree-item-expanded)
	//  - tree-filter-on-type-on: $(tree-filter-on-type-on)
	//  - tree-filter-on-type-off: $(tree-filter-on-type-off)
	//  - tree-filter-clear: $(tree-filter-clear)
	//  - tree-item-loading: $(tree-item-loading)
	//  - menu-selection: $(menu-selection)
	//  - menu-submenu: $(menu-submenu)
	//  - menubar-more: $(menubar-more)
	//  - scrollbar-button-left: $(scrollbar-button-left)
	//  - scrollbar-button-right: $(scrollbar-button-right)
	//  - scrollbar-button-up: $(scrollbar-button-up)
	//  - scrollbar-button-down: $(scrollbar-button-down)
	//  - toolbar-more: $(toolbar-more)
	//  - quick-input-back: $(quick-input-back)
	"terminal.integrated.tabs.defaultIcon": "terminal",

	// 控制显示在标题右侧的终端说明。根据上下文替换变量:
	// - `${cwd}`: 终端的当前工作目录
	// - `${cwdFolder}`: 终端的当前工作目录，当值与初始工作目录不同时，显示在多根工作区或单个根工作区中。在 Windows 上，仅当启用 shell 集成时才会显示此内容。
	// - `${workspaceFolder}`: 在其中启动终端的工作区
	// - `${local}`: 指示远程工作区中的本地终端
	// - `${process}`: 终端流程的名称
	// - `${separator}`: 仅在由带有值或静态文本的变量括住时才显示的条件分隔符(" - ")。
	// - `${sequence}`: 进程提供给终端的名称
	// - `${task}`: 指示此终端与任务关联
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// 控制终端选项卡状态是否支持动画(例如正在进行的任务)。
	"terminal.integrated.tabs.enableAnimation": true,

	// 控制终端选项卡是否以列表的形式显示在终端的一侧。如果禁用此功能，将改为显示下拉列表。
	"terminal.integrated.tabs.enabled": true,

	// 控制是在双击时将焦点放在某个选项卡上还是单击。
	//  - singleClick: 双击终端选项卡时聚焦终端
	//  - doubleClick: 双击终端选项卡时聚焦终端
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// 控制在特定条件下是否将隐藏终端选项卡视图。
	//  - never: 从不隐藏终端选项卡视图
	//  - singleTerminal: 仅打开一个终端时隐藏终端选项卡视图
	//  - singleGroup: 仅打开一个终端组时隐藏终端选项卡视图
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// 控制终端选项卡的位置，该位置位于实际终端的左侧或右侧。
	//  - left: 在终端的左侧显示终端选项卡视图
	//  - right: 在终端的右侧显示终端选项卡视图
	"terminal.integrated.tabs.location": "right",

	// `terminal.integrated.tabs.title` 和 `terminal.integrated.tabs.title` 使用的分隔符。
	"terminal.integrated.tabs.separator": " - ",

	// 控制是否在“新建终端”按钮旁边显示“终端拆分”和“终止”按钮。
	//  - always: 始终显示操作
	//  - singleTerminal: 当终端是唯一打开的终端时显示操作
	//  - singleTerminalOrNarrow: 在终端是唯一打开的终端或选项卡视图处于窄而无文本状态时显示活动终端
	//  - never: 从不显示操作
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// 在视图中显示活动的终端信息，当选项卡中的标题不可见时，此功能尤其有用。
	//  - always: 始终显示活动终端
	//  - singleTerminal: 当仅有一个终端打开时显示活动终端
	//  - singleTerminalOrNarrow: 仅当终端已打开或选项卡视图处于窄而无文本状态时显示活动终端
	//  - never: 从不显示活动终端
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// 控制终端标题。根据上下文替换变量:
	// - `${cwd}`: 终端的当前工作目录
	// - `${cwdFolder}`: 终端的当前工作目录，当值与初始工作目录不同时，显示在多根工作区或单个根工作区中。在 Windows 上，仅当启用 shell 集成时才会显示此内容。
	// - `${workspaceFolder}`: 在其中启动终端的工作区
	// - `${local}`: 指示远程工作区中的本地终端
	// - `${process}`: 终端流程的名称
	// - `${separator}`: 仅在由带有值或静态文本的变量括住时才显示的条件分隔符(" - ")。
	// - `${sequence}`: 进程提供给终端的名称
	// - `${task}`: 指示此终端与任务关联
	"terminal.integrated.tabs.title": "${process}",

	// 控制在计算终端中字符的宽度时要使用的 unicode 版本。如果你遇到表情符号或其他宽字符，而这些宽字符占用的空格或退格量不正确或删除的空间太多或太少，则你可能需要尝试调整此设置。
	//  - 6: unicode 的版本 6，该版本较旧，在较旧的系统中效果更好。
	//  - 11: unicode 的版本 11，版本可在使用新式版本 unicode 的新式系统上提供更好的支持。
	"terminal.integrated.unicodeVersion": "11",

	// 控制是否在终端下拉列表中显示 WSL 发行版
	"terminal.integrated.useWslProfiles": true,

	// 是否使用 ConPTY 进行 Windows 终端进程通信(需要 Windows 10 内部版本号 18309+)。如果此设置为 false，将使用 Winpty。
	"terminal.integrated.windowsEnableConpty": true,

	// 一个字符串，其中包含双击选择 Word 功能而被视为单词分隔符的所有字符。
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",

	// 在文件夹中启用自动任务 - 请注意，任务将不会在不受信任的工作区中运行。
	//  - on: 始终
	//  - auto: 每个文件夹的权限提示
	//  - off: 从不
	"task.allowAutomaticTasks": "auto",

	// 控制为所有任务提供程序扩展启用"提供任务"。如果"任务: 运行任务"命令速度较慢，则禁用任务提供程序的自动检测可能会提供帮助。单个扩展还可以提供禁用自动检测的设置。
	"task.autoDetect": "on",

	// 配置在运行任务时是否显示问题匹配器提示。设置为"true"从不提示，或使用任务类型的字典仅关闭特定任务类型的提示。
	"task.problemMatchers.neverPrompt": false,

	// 控制是否显示在“运行任务”等任务快速选取中具有详细信息的任务的详细信息。
	"task.quickOpen.detail": true,

	// 控制任务快速打开对话框中跟踪的最近项目数。
	"task.quickOpen.history": 30,

	// 使 Tasks: Run Task 命令使用速度较慢的“全部显示”行为，而不是使用任务按提供程序进行分组的速度更快的双层选取器。
	"task.quickOpen.showAll": false,

	// 控制当只有一个任务要选取时是否跳过任务快速选取。
	"task.quickOpen.skip": false,

	// 在窗口重新加载时，重新连接到具有问题匹配器的任务。
	"task.reconnection": true,

	// 在运行任务前保存所有未保存的编辑器。
	//  - always: 运行前始终保存所有编辑器。
	//  - never: 运行前绝不保存编辑器。
	//  - prompt: 提示在运行前是否保存编辑器。
	"task.saveBeforeRun": "always",

	// 显示终端缓冲区中兴趣点的修饰，例如通过监视任务发现的第一个问题。请注意，这只会对将来的任务生效。`terminal.integrated.shellIntegration.decorationsEnabled` 将优先于此设置
	"task.showDecorations": true,

	// 配置当提供程序速度较慢时是否显示警告
	"task.slowProviderWarning": true,

	// 在终端中从资源管理器打开文件时，确定将启动哪种类型的终端
	//  - integrated: 使用 VS Code 的集成终端。
	//  - external: 使用设定的外部终端。
	"terminal.explorerKind": "integrated",

	// 自定义要在 Linux 上运行的终端。
	"terminal.external.linuxExec": "xterm",

	// 定义在 macOS 上运行的终端应用程序。
	"terminal.external.osxExec": "Terminal.app",

	// 自定义要在 Windows 上运行的终端。
	"terminal.external.windowsExec": "C:\\windows\\System32\\cmd.exe",

	// Specifies whether to show avatar images in the file blame annotations
	"gitlens.blame.avatars": true,

	// Specifies whether to compact (deduplicate) matching adjacent file blame annotations
	"gitlens.blame.compact": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in file blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.blame.dateFormat": null,

	// Specifies the format of the file blame annotations. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
	"gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",

	// Specifies whether to provide a heatmap indicator in the file blame annotations
	"gitlens.blame.heatmap.enabled": true,

	// Specifies where the heatmap indicators will be shown in the file blame annotations
	//  - left: Adds a heatmap indicator on the left edge of the file blame annotations
	//  - right: Adds a heatmap indicator on the right edge of the file blame annotations
	"gitlens.blame.heatmap.location": "right",

	// Specifies whether to highlight lines associated with the current line
	"gitlens.blame.highlight.enabled": true,

	// Specifies where the associated line highlights will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.blame.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies whether file blame annotations will be separated by a small gap
	"gitlens.blame.separateLines": true,

	// Specifies how the file blame annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.blame.toggleMode": "file",

	// 在打开文件时，控制是否在“问题”视图中对其进行定位。
	"problems.autoReveal": true,

	// 在文件和文件夹上显示错误和警告。
	"problems.decorations.enabled": true,

	// 控制“问题”视图的默认视图模式。
	"problems.defaultViewMode": "tree",

	// 启用后，状态栏中将显示当前问题。
	"problems.showCurrentInStatus": false,

	// 控制问题导航的顺序。
	//  - severity: 导航按严重性排序的问题
	//  - position: 导航按位置排序的问题
	"problems.sortOrder": "severity",

	// 启用/禁用导航路径。
	"breadcrumbs.enabled": true,

	// 控制是否及如何在“导航路径”视图中显示文件路径。
	//  - on: 在导航路径视图中显示文件路径。
	//  - off: 不在导航路径视图中显示文件路径。
	//  - last: 在导航路径视图中仅显示文件路径的最后一个元素。
	"breadcrumbs.filePath": "on",

	// 使用图标渲染面包屑导航项。
	"breadcrumbs.icons": true,

	// 启用后，痕迹导航栏将显示“数组”符号。
	"breadcrumbs.showArrays": true,

	// 启用后，痕迹导航栏将显示“布尔”符号。
	"breadcrumbs.showBooleans": true,

	// 启用后，痕迹导航栏显示“类”符号。
	"breadcrumbs.showClasses": true,

	// 启用后，痕迹导航栏将显示“常量”符号。
	"breadcrumbs.showConstants": true,

	// 启用后，痕迹符将显示“构造函数”符号。
	"breadcrumbs.showConstructors": true,

	// 启用后，痕迹导航栏将显示 "enumMember" 符号。
	"breadcrumbs.showEnumMembers": true,

	// 启用后，痕迹导航栏将显示“枚举”符号。
	"breadcrumbs.showEnums": true,

	// 启用后，痕迹导航栏将显示“事件”符号。
	"breadcrumbs.showEvents": true,

	// 启用后，痕迹导航栏将显示“字段”符号。
	"breadcrumbs.showFields": true,

	// 启用后，痕迹导航栏将显示“文件”符号。
	"breadcrumbs.showFiles": true,

	// 启用后，痕迹导航栏将显示“函数”符号。
	"breadcrumbs.showFunctions": true,

	// 启用后，痕迹导航栏将显示“接口”符号。
	"breadcrumbs.showInterfaces": true,

	// 启用后，痕迹导航栏将显示“键”符号。
	"breadcrumbs.showKeys": true,

	// 启用后，痕迹导航栏将显示“方法”符号。
	"breadcrumbs.showMethods": true,

	// 启用后，痕迹导航栏将显示“模块”符号。
	"breadcrumbs.showModules": true,

	// 启用后，痕迹导航栏将显示“命名空间”符号。
	"breadcrumbs.showNamespaces": true,

	// 启用后，痕迹导航栏将显示 "null" 符号。
	"breadcrumbs.showNull": true,

	// 启用后，痕迹导航栏将显示“数字”符号。
	"breadcrumbs.showNumbers": true,

	// 启用后，痕迹导航栏将显示“对象”符号。
	"breadcrumbs.showObjects": true,

	// 启用后，痕迹导航栏将显示“运算符”符号。
	"breadcrumbs.showOperators": true,

	// 启用后，痕迹导航栏将显示“包”符号。
	"breadcrumbs.showPackages": true,

	// 启用后，痕迹导航栏将显示“属性”符号。
	"breadcrumbs.showProperties": true,

	// 启用后，痕迹导航栏将显示“字符串”符号。
	"breadcrumbs.showStrings": true,

	// 启用后，痕迹导航栏将显示“结构”符号。
	"breadcrumbs.showStructs": true,

	// 启用后，痕迹导航栏将显示 "typeParameter" 符号。
	"breadcrumbs.showTypeParameters": true,

	// 启用后，痕迹导航栏将显示“变量”符号。
	"breadcrumbs.showVariables": true,

	// 控制是否及如何在“导航路径”视图中显示符号。
	//  - on: 在“导航路径”视图中显示所有符号。
	//  - off: 不在导航路径视图中显示符号。
	//  - last: 在导航路径视图中仅显示当前符号。
	"breadcrumbs.symbolPath": "on",

	// 控制“导航路径”大纲视图中符号的排序方式。
	//  - position: 以文件位置顺序显示符号大纲。
	//  - name: 以字母顺序显示符号大纲。
	//  - type: 以符号类型顺序显示符号大纲。
	"breadcrumbs.symbolSortOrder": "position",

	// Specifies where the indicators of the file changes annotations will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.changes.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies how the file changes annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.changes.toggleMode": "file",

	// Specifies the age of the most recent change (in days) after which the file heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
	"gitlens.heatmap.ageThreshold": 90,

	// Specifies the base color of the file heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.coldColor": "#0a60f6",

	// Specifies the whether to fade out older lines
	"gitlens.heatmap.fadeLines": true,

	// Specifies the base color of the file heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.hotColor": "#f66a0a",

	// Specifies where the indicators of the file heatmap annotations will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.heatmap.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies how the file heatmap annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.heatmap.toggleMode": "file",

	// Specifies the default number of items to show in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.defaultItemLimit": 500,

	// Specifies the number of additional items to fetch when paginating in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.pageItemLimit": 200,

	// Specifies whether to show the _Commit Graph_ in the status bar
	"gitlens.graph.statusBar.enabled": true,

	// Specifies the limit on the how many commits can be queried for statistics in the Visual File History, because of rate limits. Only applies to virtual workspaces.
	"gitlens.visualHistory.queryLimit": 20,

	// Specifies how Git commits are displayed in the _Interactive Rebase Editor_
	//  - asc: Shows oldest commit first
	//  - desc: Shows newest commit first
	"gitlens.rebaseEditor.ordering": "desc",

	// 如果此设置为 false，则无论新设置的值如何，都不会发送遥测数据。由于合并到 `telemetry.telemetryLevel` 设置，目前已弃用。
	// 启用要收集的崩溃报告。这有助于我们提高稳定性。
	// 此选项需重启才可生效。
	"telemetry.enableCrashReporter": true,

	// 如果此设置为 false，则无论新设置的值如何，都不会发送遥测数据。已弃用，推荐使用 `telemetry.telemetryLevel` 设置。
	// 启用要收集的诊断数据。这有助于我们更好地了解 Visual Studio Code 的执行情况以及哪里需要改进。[阅读详细信息](https://go.microsoft.com/fwlink/?LinkId=786907)关于我们收集的内容和隐私声明。
	"telemetry.enableTelemetry": true,

	// 
	// 控制 Visual Studio Code 遥测、第一方扩展遥测和参与的第三方扩展遥测。一些第三方扩展可能不遵守此设置。请查阅特定扩展的文档以确定。遥测有助于我们更好地了解 Visual Studio Code 的执行情况、需要改进的地方以及功能的使用方式。 详细了解[我们收集的数据](https://aka.ms/vscode-telemetry)和我们的[隐私声明](https://go.microsoft.com/fwlink/?LinkId=786907)。 若要使崩溃报告更改生效，必须完全重新启动应用程序。
	// 
	// &nbsp;
	// 
	// 下表概述了每个设置所发送的数据:
	// 
	// |       | 崩溃报告 | 错误遥测 | 用法数据 |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****注意:*** 如果此设置为“关闭”，则无论其他遥测设置如何，都不会发送遥测数据。如果此设置为“关闭”以外的任何选项，并且使用弃用的设置禁用遥测，则不会发送遥测数据。*
	// 
	//  - all: 发送使用情况数据、错误、故障报告。
	//  - error: 发送常规错误遥测和故障报告。
	//  - crash: 发送 OS 级别故障报告。
	//  - off: 禁用所有产品遥测。
	"telemetry.telemetryLevel": "all",

	// Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.gitCommands.closeOnFocusOut": true,

	// Specifies whether to match all or any commit message search patterns
	"gitlens.gitCommands.search.matchAll": false,

	// Specifies whether to match commit search patterns with or without regard to casing
	"gitlens.gitCommands.search.matchCase": false,

	// Specifies whether to match commit search patterns using regular expressions
	"gitlens.gitCommands.search.matchRegex": true,

	// Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
	"gitlens.gitCommands.search.showResultsInSideBar": null,

	// Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
	// 
	"gitlens.gitCommands.search.showResultsInView": null,

	// Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
	//  - branch-create:command: Skips branch create confirmations when run from a command, e.g. a view action
	//  - branch-create:menu: Skips branch create confirmations when run from the Git Command Palette
	//  - co-authors:command: Skips co-author confirmations when run from a command, e.g. a view action
	//  - co-authors:menu: Skips co-author confirmations when run from the Git Command Palette
	//  - fetch:command: Skips fetch confirmations when run from a command, e.g. a view action
	//  - fetch:menu: Skips fetch confirmations when run from the Git Command Palette
	//  - pull:command: Skips pull confirmations when run from a command, e.g. a view action
	//  - pull:menu: Skips pull confirmations when run from the Git Command Palette
	//  - push:command: Skips push confirmations when run from a command, e.g. a view action
	//  - push:menu: Skips push confirmations when run from the Git Command Palette
	//  - stash-apply:command: Skips stash apply confirmations when run from a command, e.g. a view action
	//  - stash-apply:menu: Skips stash apply confirmations when run from the Git Command Palette
	//  - stash-pop:command: Skips stash pop confirmations when run from a command, e.g. a view action
	//  - stash-pop:menu: Skips stash pop confirmations when run from the Git Command Palette
	//  - stash-push:command: Skips stash push confirmations when run from a command, e.g. a view action
	//  - stash-push:menu: Skips stash push confirmations when run from the Git Command Palette
	//  - switch:command: Skips switch confirmations when run from a command, e.g. a view action
	//  - switch:menu: Skips switch confirmations when run from the Git Command Palette
	//  - tag-create:command: Skips tag create confirmations when run from a command, e.g. a view action
	//  - tag-create:menu: Skips tag create confirmations when run from the Git Command Palette
	"gitlens.gitCommands.skipConfirmations": [
		"fetch:command",
		"stash-push:command",
		"switch:command"
	],

	// Specifies how Git commands are sorted in the _Git Command Palette_
	//  - name: Sorts commands by name
	//  - usage: Sorts commands by last used date
	"gitlens.gitCommands.sortBy": "usage",

	// Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
	"gitlens.autolinks": null,

	// Specifies whether to enable rich integrations with any supported remote services
	"gitlens.integrations.enabled": true,

	// Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
	"gitlens.liveshare.allowGuestAccess": true,

	// Specifies the configuration of a partner integration
	"gitlens.partners": null,

	// Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services
	"gitlens.remotes": null,

	// Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
	"gitlens.terminalLinks.enabled": true,

	// 显示大纲元素的图标。
	"outline.icons": true,

	// 对错误和警告使用徽章。
	"outline.problems.badges": true,

	// 对错误和警告添加颜色。
	"outline.problems.colors": true,

	// 显示大纲元素上的错误和警告。
	"outline.problems.enabled": true,

	// 启用后，大纲将显示“数组”符号。
	"outline.showArrays": true,

	// 启用后，大纲将显示“布尔”符号。
	"outline.showBooleans": true,

	// 启用后，大纲将显示“类”符号。
	"outline.showClasses": true,

	// 启用后，大纲将显示“常量”符号。
	"outline.showConstants": true,

	// 启用大纲时，大纲将显示“构造函数”符号。
	"outline.showConstructors": true,

	// 启用后，大纲将显示“枚举成员”符号。
	"outline.showEnumMembers": true,

	// 启用后，大纲将显示“枚举”符号。
	"outline.showEnums": true,

	// 启用后，大纲将显示“事件”符号。
	"outline.showEvents": true,

	// 启用时，大纲将显示“字段”符号。
	"outline.showFields": true,

	// 启用后，大纲将显示“文件”符号。
	"outline.showFiles": true,

	// 启用时，大纲将显示“函数”符号。
	"outline.showFunctions": true,

	// 启用后，大纲将显示“接口”符号。
	"outline.showInterfaces": true,

	// 启用后，大纲将显示“键”符号。
	"outline.showKeys": true,

	// 启用后，大纲将显示“方法”符号。
	"outline.showMethods": true,

	// 启用后，大纲将显示“模块”符号。
	"outline.showModules": true,

	// 启用后，大纲将显示“命名空间”符号。
	"outline.showNamespaces": true,

	// 启用后，大纲将显示 "null" 符号。
	"outline.showNull": true,

	// 启用后，大纲将显示“数字”符号。
	"outline.showNumbers": true,

	// 启用后，大纲将显示“对象”符号。
	"outline.showObjects": true,

	// 启用时，大纲显示“运算符”符号。
	"outline.showOperators": true,

	// 启用后，大纲将显示“包”符号。
	"outline.showPackages": true,

	// 启用后，大纲将显示“属性”符号。
	"outline.showProperties": true,

	// 启用后，大纲将显示“字符串”符号。
	"outline.showStrings": true,

	// 启用后，大纲将显示“结构”符号。
	"outline.showStructs": true,

	// 启用后，大纲将显示 "typeParameter" 符号。
	"outline.showTypeParameters": true,

	// 启用后，大纲将显示“变量”符号。
	"outline.showVariables": true,

	// Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultDateFormat": null,

	// Specifies the locale, a [BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag#List_of_major_primary_language_subtags), to use for date formatting, defaults to the VS Code locale. Use `system` to follow the current system locale, or choose a specific locale, e.g `en-US` — US English, `en-GB` — British English, `de-DE` — German, 'ja-JP = Japanese, etc.
	"gitlens.defaultDateLocale": null,

	// Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultDateShortFormat": null,

	// Specifies whether commit dates should use the authored or committed date
	//  - authored: Uses the date when the changes were authored (i.e. originally written)
	//  - committed: Uses the date when the changes were committed
	"gitlens.defaultDateSource": "authored",

	// Specifies how dates will be displayed by default
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.defaultDateStyle": "relative",

	// Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultTimeFormat": null,

	// Specifies which commands will be added to which menus
	"gitlens.menus": {
		"editor": {
			"blame": false,
			"clipboard": true,
			"compare": true,
			"history": false,
			"remote": false
		},
		"editorGroup": {
			"blame": true,
			"compare": true
		},
		"editorTab": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"explorer": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"scm": {
			"graph": true
		},
		"scmRepositoryInline": {
			"graph": true
		},
		"scmRepository": {
			"authors": true,
			"graph": false
		},
		"scmGroupInline": {
			"stash": true
		},
		"scmGroup": {
			"compare": true,
			"openClose": true,
			"stash": true
		},
		"scmItemInline": {},
		"scmItem": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": false,
			"stash": true
		}
	},

	// Specifies the keymap to use for GitLens shortcut keys
	//  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
	//  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
	//  - none: No shortcut keys will be added
	"gitlens.keymap": "chorded",

	// Specifies the active GitLens mode, if any
	"gitlens.mode.active": "",

	// Specifies the active GitLens mode alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.mode.statusBar.alignment": "right",

	// Specifies whether to provide the active GitLens mode in the status bar
	"gitlens.mode.statusBar.enabled": true,

	// Specifies the user-defined GitLens modes
	"gitlens.modes": {
		"zen": {
			"name": "Zen",
			"statusBarItemName": "Zen",
			"description": "for a zen-like experience, disables many visual features",
			"codeLens": false,
			"currentLine": false,
			"hovers": false,
			"statusBar": false
		},
		"review": {
			"name": "Review",
			"statusBarItemName": "Reviewing",
			"description": "for reviewing code, enables many visual features",
			"codeLens": true,
			"currentLine": true,
			"hovers": true
		}
	},

	// Specifies the length of abbreviated commit SHAs
	"gitlens.advanced.abbreviatedShaLength": 7,

	// Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
	"gitlens.advanced.abbreviateShaOnCopy": false,

	// Specifies additional arguments to pass to the `git blame` command
	"gitlens.advanced.blame.customArguments": null,

	// Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
	"gitlens.advanced.blame.delayAfterEdit": 5000,

	// Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
	"gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

	// Specifies whether git output will be cached — changing the default is not recommended
	"gitlens.advanced.caching.enabled": true,

	// Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
	//  - null: Shows commits in reverse chronological order
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.advanced.commitOrdering": null,

	// Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDiffTool": null,

	// Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDirectoryDiffTool": null,

	// Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
	"gitlens.advanced.maxListItems": 200,

	// Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
	"gitlens.advanced.maxSearchItems": 200,

	// Specifies which messages should be suppressed
	"gitlens.advanced.messages": {
		"suppressCommitHasNoPreviousCommitWarning": false,
		"suppressCommitNotFoundWarning": false,
		"suppressCreatePullRequestPrompt": false,
		"suppressDebugLoggingWarning": false,
		"suppressFileNotUnderSourceControlWarning": false,
		"suppressGitDisabledWarning": false,
		"suppressGitMissingWarning": false,
		"suppressGitVersionWarning": false,
		"suppressLineUncommittedWarning": false,
		"suppressNoRepositoryWarning": false,
		"suppressRebaseSwitchToTextWarning": false,
		"suppressIntegrationDisconnectedTooManyFailedRequestsWarning": false,
		"suppressIntegrationRequestFailed500Warning": false,
		"suppressIntegrationRequestTimedOutWarning": false
	},

	// Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.advanced.quickPick.closeOnFocusOut": true,

	// Specifies how many folders deep to search for repositories. Defaults to `git.repositoryScanMaxDepth`
	"gitlens.advanced.repositorySearchDepth": null,

	// Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
	"gitlens.advanced.similarityThreshold": null,

	// Deprecated. This setting is no longer used
	// Deprecated. This setting is no longer used
	"gitlens.advanced.useSymmetricDifferenceNotation": null,

	// Specifies whether to ignore whitespace when comparing revisions during blame operations
	"gitlens.blame.ignoreWhitespace": false,

	// Specifies debug mode
	"gitlens.debug": false,

	// Specifies whether to attempt to detect nested repositories when opening files
	"gitlens.detectNestedRepositories": false,

	// 实验性。控制在滚动到列表结尾时，时间线视图是否将加载下一页的项目。
	"timeline.pageOnScroll": false,

	// 默认情况下以及在加载更多项目时在时间线视图中显示的项目数。如果设置为 "null" (默认值)，则将根据时间线视图的可见区域自动选择一个页面大小。
	"timeline.pageSize": null,

	// 配置要为 ansible 语言替代的设置。
	"[ansible]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 azure-pipelines 语言替代的设置。
	"[azure-pipelines]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 c 语言替代的设置。
	"[c]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// 配置要为 cpp 语言替代的设置。
	"[cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// 配置要为 css 语言替代的设置。
	"[css]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 cuda-cpp 语言替代的设置。
	"[cuda-cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// 配置要为 dockercompose 语言替代的设置。
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// 配置要为 dockerfile 语言替代的设置。
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// 配置要为 git-commit 语言替代的设置。
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// 配置要为 git-rebase 语言替代的设置。
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// 配置要为 go 语言替代的设置。
	"[go]":  {
		"editor.insertSpaces": false
	},

	// 配置要为 handlebars 语言替代的设置。
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// 配置要为 html 语言替代的设置。
	"[html]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 java 语言替代的设置。
	"[java]":  {
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// 配置要为 javascript 语言替代的设置。
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// 配置要为 json 语言替代的设置。
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 jsonc 语言替代的设置。
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 less 语言替代的设置。
	"[less]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 makefile 语言替代的设置。
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// 配置要为 markdown 语言替代的设置。
	"[markdown]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// 配置要为 plaintext 语言替代的设置。
	"[plaintext]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},

	// 配置要为 postcss 语言替代的设置。
	"[postcss]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 python 语言替代的设置。
	"[python]":  {
		"gitlens.codeLens.symbolScopes": [
				"!Module"
		],
		"editor.wordBasedSuggestions": false
	},

	// 配置要为 scss 语言替代的设置。
	"[scss]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 search-result 语言替代的设置。
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// 配置要为 shellscript 语言替代的设置。
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// 配置要为 stylus 语言替代的设置。
	"[stylus]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 vue 语言替代的设置。
	"[vue]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// 配置要为 yaml 语言替代的设置。
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Deprecated. Use the specific setting for each audio cue instead (`audioCues.*`).
	// 
	"audioCues.enabled": null,

	// 当有效行具有断点时播放声音。
	//  - auto: 附加屏幕阅读器时，启用音频提示。
	//  - on: 启用音频提示。
	//  - off: 禁用音频提示。
	"audioCues.lineHasBreakpoint": "auto",

	// 当有效行出现错误时播放声音。
	//  - auto: 附加屏幕阅读器时，启用音频提示。
	//  - on: 启用音频提示。
	//  - off: 禁用音频提示。
	"audioCues.lineHasError": "auto",

	// 当有效行具有可展开的折叠区域时播放声音。
	//  - auto: 附加屏幕阅读器时，启用音频提示。
	//  - on: 启用音频提示。
	//  - off: 禁用音频提示。
	"audioCues.lineHasFoldedArea": "auto",

	// 当有效行具有内联建议时播放声音。
	//  - auto: 附加屏幕阅读器时，启用音频提示。
	//  - on: 启用音频提示。
	//  - off: 禁用音频提示。
	"audioCues.lineHasInlineSuggestion": "auto",

	// 当有效行出现警告时播放声音。
	//  - auto: 附加屏幕阅读器时，启用音频提示。
	//  - on: 启用音频提示。
	//  - off: 禁用音频提示。
	"audioCues.lineHasWarning": "off",

	// 尝试读取包含无内嵌提示的内嵌提示的行时播放声音。
	//  - auto: 附加屏幕阅读器时，启用音频提示。
	//  - on: 启用音频提示。
	//  - off: 禁用音频提示。
	"audioCues.noInlayHints": "auto",

	// 当调试程序在断点上停止时播放声音。
	//  - auto: 附加屏幕阅读器时，启用音频提示。
	//  - on: 启用音频提示。
	//  - off: 禁用音频提示。
	"audioCues.onDebugBreak": "auto",

	// 音频提示音量百分比(0-100)。
	"audioCues.volume": 70,

	// 启用后，将检测到新的正在运行的进程，并自动转发其侦听的端口。禁用此设置将不会阻止转发所有端口。即使禁用，扩展将仍然能够导致端口被转发，并且打开某些 URL 仍将导致端口被转发。
	"remote.autoForwardPorts": true,

	// 设置当 `remote.autoForwardPorts` 为 true 时自动从其转发端口的源。在 Windows 和 Mac 远程设备上，“process”选项不起作用，系统将使用“output”。需要重新加载才能生效。
	//  - process: 通过监视包含端口的已启动进程发现端口时，将自动转发该端口。
	//  - output: 通过读取终端和调试输出发现端口时，将自动转发该端口。并非所有使用端口的进程都将打印到集成终端或调试控制台，因此某些端口将丢失。根据输出转发的端口将不会被“取消转发”，除非重载或用户在“端口”视图中关闭该端口。
	"remote.autoForwardPortsSource": "process",

	// 启用后，扩展将本地下载并安装在远程上。
	"remote.downloadExtensionsLocally": false,

	// 覆盖扩展的类型。"ui" 扩展在本地计算机上安装和运行，而 "workspace" 扩展则在远程计算机上运行。通过使用此设置重写扩展的默认类型，可指定是否应在本地或远程安装和启用该扩展。
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// 指定将用于端口转发的本地主机名。
	"remote.localPortHost": "localhost",

	// 对于未从设置 `remote.portsAttributes` 中获得属性的所有端口，设置其上应用的默认属性。例如: 
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// 设置在转发特定端口号时应用的属性。例如:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// 还原您在工作区中转发的端口。
	"remote.restoreForwardedPorts": true,

	// 
	//  - smart: 使用默认的差异算法。
	//  - experimental: 使用实验性差异算法。
	"mergeEditor.diffAlgorithm": "smart",

	// 不应展开 Emmet 缩写的语言数组。
	"emmet.excludeLanguages": [
		"markdown"
	],

	// 一组路径，其中每个路径都可以包含 Emmet syntaxProfiles 和/或代码片段。
	// 发生冲突时，后面路径的配置文件/代码段将重写以前的路径。
	// 有关详细信息和示例片段文件，请参见 https://code.visualstudio.com/docs/editor/emmet。
	"emmet.extensionsPath": [],

	// 在默认不受支持的语言中启用 Emmet 缩写。在此语言和 Emmet 支持的语言之间添加映射。
	//  例如: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// 当设置为 `false` 时，将分析整个文件并确定当前位置能否展开 Emmet 缩写。当设置为 `true` 时，将仅在 CSS/SCSS/LESS 文件中分析当前位置周围的内容。
	"emmet.optimizeStylesheetParsing": true,

	// 用于修改 Emmet 某些操作和解析程序的行为的首选项。
	"emmet.preferences": {},

	// 将可能的 Emmet 缩写作为建议进行显示。当在样式表中或 emmet.showExpandedAbbreviation 设置为 `"never"` 时不适用。
	"emmet.showAbbreviationSuggestions": true,

	// 以建议的形式显示展开的 Emmet 缩写。
	// 选项 `"inMarkupAndStylesheetFilesOnly"` 适用于 html、haml、jade、slim、xml、xsl、css、scss、sass、less 和 stylus。
	// 无论 markup/css 如何，选项 `"always"` 都适用于文件的各个部分。
	"emmet.showExpandedAbbreviation": "always",

	// 若为 `true`，Emmet 建议将显示为代码片段。可以在 `editor.snippetSuggestions` 设置中排列其顺序。
	"emmet.showSuggestionsAsSnippets": false,

	// 为指定的语法定义配置文件或使用带有特定规则的配置文件。
	"emmet.syntaxProfiles": {},

	// 启用后，按下 TAB 键，将展开 Emmet 缩写。
	"emmet.triggerExpansionOnTab": false,

	// 如果为 `true`，Emmet 将使用内联完成来建议扩展。如果要防止非内联完成项提供程序在此设置为 `true` 时频繁显示，请将 `other` 项的 `editor.quickSuggestions` 转换为 `inline` 或 `off`。
	"emmet.useInlineCompletions": false,

	// 用于 Emmet 代码片段的变量。
	"emmet.variables": {},

	// 控制是否启用强制推送 (不论 force 还是 force-with-lease)。
	"git.allowForcePush": false,

	// 控制是否允许没有运行 pre-commit 和 commit-msg 挂钩的提交。
	"git.allowNoVerifyCommit": false,

	// 始终显示“暂存的更改”资源组。
	"git.alwaysShowStagedChangesResourceGroup": false,

	// 控制所有提交的 signoff 标志。
	"git.alwaysSignOff": false,

	// 若设置为 true，则自动从当前 Git 仓库的默认远程仓库提取提交。若设置为“全部”，则从所有远程仓库进行提取。
	"git.autofetch": false,

	// 在启用“#git.autofetch#”情况下每次自动 git fetch 之间的间隔时间(以秒为单位)。
	"git.autofetchPeriod": 180,

	// 是否启用自动刷新。
	"git.autorefresh": true,

	// 配置何时自动检测存储库。
	//  - true: 扫描当前打开文件夹与当前打开文件所在文件夹的子文件夹。
	//  - false: 禁止自动扫描仓库。
	//  - subFolders: 扫描当前打开文件夹的子文件夹。
	//  - openEditors: 扫描当前打开文件的父文件夹。
	"git.autoRepositoryDetection": true,

	// 在拉取前暂存所有更改，在成功拉取后还原这些更改。
	"git.autoStash": false,

	// 创建新分支时使用的前缀。
	"git.branchPrefix": "",

	// 受保护分支的列表。默认情况下，在将更改提交到受保护分支之前会显示提示。可以使用 `git.branchProtectionPrompt` 设置控制提示。
	"git.branchProtection": [],

	// 控制是否在将更改提交到受保护分支之前进行提示。
	//  - alwaysCommit: 始终将更改提交到受保护分支。
	//  - alwaysCommitToNewBranch: 始终将更改提交到新的分支。
	//  - alwaysPrompt: 始终在将更改提交到受保护分支之前进行提示。
	"git.branchProtectionPrompt": "alwaysPrompt",

	// 用于随机生成的分支名称的字典列表。每个值都表示用于生成分支名称段的字典。支持的词典:“形容词”、“动物”、“颜色”和“数字”。
	//  - adjectives: 随机形容词
	//  - animals: 随机动物名称
	//  - colors: 随机颜色名称
	//  - numbers: 100 和 999 之间的一个随机数
	"git.branchRandomName.dictionary": [
		"adjectives",
		"animals"
	],

	// 控制在创建新分支时是否生成随机名称。
	"git.branchRandomName.enable": false,

	// 控制分支的排列顺序。
	"git.branchSortOrder": "committerdate",

	// 用于验证新分支名称的正则表达式。
	"git.branchValidationRegex": "",

	// 用于替换新分支名称中的空格，以及用于分隔随机生成的分支名称区段的字符。
	"git.branchWhitespaceChar": "-",

	// 控制在运行“签出到…”时列出的 git 参考类型。
	//  - local: 本地分支
	//  - tags: 标记
	//  - remote: 远程分支
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// 控制在储藏、提交、放弃、暂存或取消暂存更改时，是否应自动关闭差异编辑器。
	"git.closeDiffOnOperation": false,

	// GIT 命令列表 (例如: commit、push)，这些命令的 `stdout` 将被记录到 [git 输出](command:git.showOutput)。如果 GIT 命令配置了客户端挂钩，那么客户端挂钩的 `stdout` 也将被记录到 [git 输出](command:git.showOutput)。
	"git.commandsToLog": [],

	// 始终确认为 "Git: Commit Empty" 命令创建空提交。
	"git.confirmEmptyCommits": true,

	// 控制在强制推送前是否进行确认。
	"git.confirmForcePush": true,

	// 控制是否在提交前要求确认而不进行验证。
	"git.confirmNoVerifyCommit": true,

	// 同步 Git 存储库前请先进行确认。
	"git.confirmSync": true,

	// 控制 Git 计数徽章。
	//  - all: 对所有更改计数。
	//  - tracked: 仅对跟踪的更改计数。
	//  - off: 关闭计数器。
	"git.countBadge": "all",

	// 控制 Git 是否在资源管理器和“打开编辑器”视图中添加颜色和小标。
	"git.decorations.enabled": true,

	// 克隆 Git 仓库的默认位置。
	"git.defaultCloneDirectory": null,

	// 控制是否自动检测 Git 子模块。
	"git.detectSubmodules": true,

	// 控制可检测到的 Git 子模块的限制。
	"git.detectSubmodulesLimit": 10,

	// 使用 GPG 或 x.509 启用提交签名。
	"git.enableCommitSigning": false,

	// 是否启用 Git。
	"git.enabled": true,

	// 在没有暂存的更改时提交所有更改。
	"git.enableSmartCommit": false,

	// 控制Git Sync命令是否出现在状态栏中。
	"git.enableStatusBarSync": true,

	// 启用后，在拉取时获取所有分支。否则，仅获取当前。
	"git.fetchOnPull": false,

	// 遵循“运行同步命令时推送所有标记”。
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// 要忽略的 Git 存储库列表。
	"git.ignoredRepositories": [],

	// 忽略“旧版 Git”警告。
	"git.ignoreLegacyWarning": false,

	// 忽略“仓库中存在大量更改”的警告。
	"git.ignoreLimitWarning": false,

	// 忽略“缺失 Git”的警告。
	"git.ignoreMissingGitWarning": false,

	// 忽略拉取时发出的分支似乎已变基的警告。
	"git.ignoreRebaseWarning": false,

	// 忽略对文件树中子模块的修改。
	"git.ignoreSubmodules": false,

	// 如果 Windows 上安装了 Git 2.25 - 2.26，则忽略警告。
	"git.ignoreWindowsGit27Warning": false,

	// 控制何时显示提交消息输入验证。
	"git.inputValidation": "warn",

	// 控制显示提交消息长度警告的长度阈值。
	"git.inputValidationLength": 72,

	// 控制显示警告的提交消息主题长度阈值。请取消设置它以继承 "config.inputValidationLength" 的值。
	"git.inputValidationSubjectLength": 50,

	// 指定要记录到 [git 输出](command:git.showOutput)的信息量(如果有)。
	//  - Trace: 记录所有信息
	//  - Debug: 仅记录调试、信息、警告、错误和关键信息
	//  - Info: 仅记录信息、警告、错误和关键信息
	//  - Warning: 仅记录警告、错误和关键信息
	//  - Error: 仅记录错误和关键信息
	//  - Critical: 仅记录关键信息
	//  - Off: 不记录任何内容
	"git.logLevel": "Info",

	// 打开当前处于冲突状态的文件的合并编辑器。
	"git.mergeEditor": false,

	// 控制是否在克隆后自动打开仓库。
	//  - always: 始终在当前窗口中打开。
	//  - alwaysNewWindow: 始终在新窗口中打开。
	//  - whenNoFolderOpen: 只有在没有打开任何文件夹时，才在当前窗口中打开。
	//  - prompt: 始终提示操作。
	"git.openAfterClone": "prompt",

	// 控制单击更改时是否应打开差异编辑器。否则将打开常规编辑器。
	"git.openDiffOnClick": true,

	// Git 可执行文件的路径和文件名，例如 "C:\Program Files\Git\bin\git.exe" (Windows)。这也可以是一个包含多个要查找的路径的字符串值数组。
	"git.path": null,

	// 成功提交后运行 git 命令。
	//  - none: 提交后不要运行任何命令。
	//  - push: 成功提交后运行 'git push'。
	//  - sync: 成功提交后运行 'git pull' 和 'git push' 命令。
	"git.postCommitCommand": "none",

	// 控制 Git 是否在提交之前检查未保存的文件。
	//  - always: 检查是否有任何未保存的文件。
	//  - staged: 只检查未保存的已暂存文件。
	//  - never: 禁用此检查。
	"git.promptToSaveFilesBeforeCommit": "always",

	// 控制 Git 是否在储藏更改之前检查未保存的文件。
	//  - always: 检查是否有任何未保存的文件。
	//  - staged: 只检查未保存的已暂存文件。
	//  - never: 禁用此检查。
	"git.promptToSaveFilesBeforeStash": "always",

	// 提取时修剪。
	"git.pruneOnFetch": false,

	// 拉取时提取所有标签。
	"git.pullTags": true,

	// 在运行“同步”命令时，强制 Git 使用“变基”。
	"git.rebaseWhenSync": false,

	// 记住提交后运行的最后一个 git 命令。
	"git.rememberPostCommitCommand": false,

	// 当 `git.autoRepositoryDetection` 设置为 `true` 或 `subFolders` 时扫描 Git 仓库时忽略的文件夹列表。
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],

	// 在将 `git.autoRepositoryDetection` 设置为 `true` 或 `subFolders` 时，控制扫描工作区文件夹以查找 Git 仓库时使用的深度。如果不进行限制，可以设置为 `-1`。
	"git.repositoryScanMaxDepth": 1,

	// 控制在是要求进行显式 Git 用户配置，还是允许 Git 在缺少配置时进行猜测。
	"git.requireGitUserConfig": true,

	// 在其中搜索 Git 存储库的路径的列表。
	"git.scanRepositories": [],

	// 控制操作按钮是否显示在“源代码管理”视图中。
	"git.showActionButton": {
		"commit": true,
		"publish": true,
		"sync": true
	},

	// 控制是否在 Git 源控制面板中显示提交输入。
	"git.showCommitInput": true,

	// 控制是否在 Git 更改视图中显示内联“打开文件”操作。
	"git.showInlineOpenFileAction": true,

	// 控制 Git 操作是否显示进度提示。
	"git.showProgress": true,

	// 控制在推送成功时是否显示通知。
	"git.showPushSuccessNotification": false,

	// 控制哪些更改由Smart Commit自动暂存。
	//  - all: 自动暂存所有更改。
	//  - tracked: 仅自动暂存跟踪的更改。
	"git.smartCommitChanges": "all",

	// 控制如何限制可从 Git 状态命令分析的更改数。可以设置为 0 表示无限制。
	"git.statusLimit": 10000,

	// 建议启用智能提交(在无暂存更改时提交所有更改)。
	"git.suggestSmartCommit": true,

	// 控制在运行同步操作时是否出现通知，允许用户取消操作。
	"git.supportCancellation": false,

	// 控制是否使 VS Code 成为集成终端中产生的 git 进程的身份验证处理程序。请注意: 需要重启终端才能选择此设置中的更改。
	"git.terminalAuthentication": true,

	// 控制是否使 VS Code 成为集成终端中产生的 git 进程的 git 编辑器。请注意: 需要重启终端才能选择此设置中的更改。
	"git.terminalGitEditor": false,

	// 控制在日程表视图中项目使用的日期。
	//  - committed: 使用提交日期
	//  - authored: 使用创作日期
	"git.timeline.date": "committed",

	// 控制是否在日程表视图中显示提交作者。
	"git.timeline.showAuthor": true,

	// 控制是否在时间线视图中显示未提交的更改。
	"git.timeline.showUncommitted": false,

	// 控制未跟踪的更改的行为。
	//  - mixed: 所有更改，无论是跟踪的还是未跟踪的，都会一起出现并表现出相同的行为。
	//  - separate: 未跟踪的更改单独显示在“源代码管理”视图中。它们也被排除在几个操作之外。
	//  - hidden: 未跟踪的更改被隐藏，并从多个操作中排除。
	"git.untrackedChanges": "mixed",

	// 控制是否将提交输入框中的消息用作默认储藏消息。
	"git.useCommitInputAsStashMessage": false,

	// 控制当提交输入框中未提供消息时，是否将使用全文编辑器来创作提交消息。
	"git.useEditorAsCommitInput": true,

	// 控制是否使用更安全的 force-with-lease 进行强制推送。
	"git.useForcePushWithLease": true,

	// 控制是否应覆盖 GIT_ASKPASS 以使用集成版本。
	"git.useIntegratedAskPass": true,

	// 启用`git.useEditorAsCommitInput`时启用详细输出。
	"git.verboseCommit": false,

	// 控制是否在 VS Code 中为 git 命令启用自动 GitHub 身份验证。
	"github.gitAuthentication": true,

	// 控制用于克隆 GitHub 仓库的协议
	"github.gitProtocol": "https",

	// URI of your GitHub Enterprise Instance
	"github-enterprise.uri": "",

	// Grunt 任务检测的控制启用。Grunt 任务检测可能会导致执行任何打开的工作区中的文件。
	"grunt.autoDetect": "off",

	// Gulp 任务检测的控制启用。Gulp 任务检测可能会导致执行任何打开的工作区中的文件。
	"gulp.autoDetect": "off",

	// 启用/禁用将图像粘贴到 ipynb 文件中的 markdown 单元格中。需要启用 `editor.experimental.pasteActions.enabled`。
	"ipynb.experimental.pasteImages.enabled": false,

	// Jake 任务检测的控制启用。Jake 任务检测可能会导致执行任何打开的工作区中的文件。
	"jake.autoDetect": "off",

	// 在内置 Markdown 预览中启用/禁用呈现数学。
	"markdown.math.enabled": true,

	// 是否在解决合并冲突后自动转到下一个合并冲突。
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// 为编辑器中的合并冲突区域创建 CodeLens。
	"merge-conflict.codeLens.enabled": true,

	// 为编辑器中的合并冲突区域创建提示小标。
	"merge-conflict.decorators.enabled": true,

	// 控件在比较合并冲突中的更改时应在何处打开差异视图。
	//  - Current: 在当前的编辑器组中打开差异视图。
	//  - Beside: 在当前编辑器组旁边打开差异视图。
	//  - Below: 在当前编辑器组下方打开差异视图。
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// 控制是否自动检测 npm 脚本。
	"npm.autoDetect": "on",

	// 从资源管理器上下文菜单中启用运行文件夹中包含的 NPM 脚本。
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// 在没有顶级 "package.json" 文件时，为 npm 脚本启用资源管理器视图。
	"npm.enableScriptExplorer": false,

	// 配置应从自动脚本检测中排除的文件夹的 glob 模式。
	"npm.exclude": "",

	// 从 https://registry.npmjs.org 和 https://registry.bower.io 获取数据，以提供自动补全和 npm 依赖项上的悬停功能信息。
	"npm.fetchOnlinePackageInfo": true,

	// 用于运行脚本的程序包管理器。
	//  - auto: 根据锁定文件和已安装的包管理器，自动检测用于运行脚本的包管理器。
	//  - npm: 使用 npm 作为运行脚本的包管理器。
	//  - yarn: 使用 yarn 作为运行脚本的包管理器。
	//  - pnpm: 使用 pnpm 作为运行脚本的包管理器。
	"npm.packageManager": "auto",

	// 使用 `--silent` 选项运行 npm 命令。
	"npm.runSilent": false,

	// npm 脚本资源管理器中使用的默认单击操作: "打开"或"运行"，默认值为"打开"。
	"npm.scriptExplorerAction": "open",

	// 正则表达式的数组，指示应从 NPM 脚本视图中排除哪些脚本。
	"npm.scriptExplorerExclude": [],

	// 使用脚本的“运行”和“调试”命令显示悬停。
	"npm.scriptHover": true,

	// 控制在选择代码信息指示器引用时是否调用“速览引用”或“查找引用”
	//  - peek: 在速览编辑器中显示引用。
	//  - view: 在单独的视图中显示引用。
	"references.preferredLocation": "peek",

	// 启用/禁用在简单浏览器中聚焦时显示的浮动指示器。
	"simpleBrowser.focusLockIndicator.enabled": true,

	// The C compiler path (e.g: /usr/bin/gcc or C:\MinGW\bin\gcc.exe)
	"c-cpp-compile-run.c-compiler": "gcc",

	// The C flags: e.g. -Wall. default: -Wall -Wextra
	"c-cpp-compile-run.c-flags": "-Wall -Wextra",

	// The Cpp compiler path (e.g: /usr/bin/g++ or C:\MinGW\bin\g++.exe)
	"c-cpp-compile-run.cpp-compiler": "g++",

	// The Cpp flags: e.g. -Wall. default: -Wall -Wextra
	"c-cpp-compile-run.cpp-flags": "-Wall -Wextra",

	// Where output file should be located
	"c-cpp-compile-run.output-location": "",

	// Whether should run in an external terminal
	"c-cpp-compile-run.run-args": "",

	// Whether should run in an external terminal
	"c-cpp-compile-run.run-in-external-terminal": false,

	// Whether should save the file before compiling
	"c-cpp-compile-run.save-before-compile": true,

	// Whether should show notifications
	"c-cpp-compile-run.should-show-notifications": true,

	// List of languages which suggestions are desired.
	"css.enabledLanguages": [
		"html"
	],

	// List of local or remote style sheets for suggestions.
	"css.styleSheets": [],

	// The path to the C Compiler (either gcc or clang).
	"C_Cpp_Runner.cCompilerPath": "gcc",

	// Additional compiler arguments.
	"C_Cpp_Runner.compilerArgs": [],

	// The path to the C++ Compiler (either g++ or clang++).
	"C_Cpp_Runner.cppCompilerPath": "g++",

	// C++ Standard for the C++ Compiler. (If empty, compiler's default is used)
	"C_Cpp_Runner.cppStandard": "",

	// C-Standard for the C Compiler. (If empty, compiler's default is used)
	"C_Cpp_Runner.cStandard": "",

	// The path to the debugger (either gdb or lldb).
	"C_Cpp_Runner.debuggerPath": "gdb",

	// Whether to enable checking warnings or not.
	"C_Cpp_Runner.enableWarnings": true,

	// Exclude glob patterns for folder selection. (Ran after include pattern)
	"C_Cpp_Runner.excludeSearch": [
		"**/build",
		"**/build/**",
		"**/.*",
		"**/.*/**",
		"**/.vscode",
		"**/.vscode/**"
	],

	// Additional include paths.
	"C_Cpp_Runner.includePaths": [],

	// Include glob patterns for folder selection. (Ran before exlcude pattern)
	"C_Cpp_Runner.includeSearch": [
		"*",
		"**/*"
	],

	// Additional linker arguments.
	"C_Cpp_Runner.linkerArgs": [],

	// The path to the MSVC batch file (Needed to use the Visual Studio Compiler).
	"C_Cpp_Runner.msvcBatchPath": "",

	// Whether to use MSVC compiler or to use GCC/LLDB instead.
	"C_Cpp_Runner.useMsvc": false,

	// Warnings to check by the compiler.
	"C_Cpp_Runner.warnings": [
		"-Wall",
		"-Wextra",
		"-Wpedantic"
	],

	// Whether to treat warnings as compiler errors or not.
	"C_Cpp_Runner.warningsAsError": false,

	// List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
	"python.autoComplete.extraPaths": [],

	// Path to the conda executable to use for activation (version 4.4+).
	"python.condaPath": "",

	// Path to default Python to use when extension loads up for the first time, no longer used once an interpreter is selected for the workspace. See https://aka.ms/AAfekmf to understand when this is used
	"python.defaultInterpreterPath": "python",

	// Enable source map support for meaningful stack traces in error logs.
	"python.diagnostics.sourceMapsEnabled": false,

	// Absolute path to a file containing environment variable definitions.
	"python.envFile": "${workspaceFolder}/.env",

	// Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
	"python.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optOutFrom": [],

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.autopep8Args": [],

	// Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
	"python.formatting.autopep8Path": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.blackArgs": [],

	// Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
	"python.formatting.blackPath": "black",

	// Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
	"python.formatting.provider": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.yapfArgs": [],

	// Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
	"python.formatting.yapfPath": "yapf",

	// Whether to install Python modules globally when not using an environment.
	"python.globalModuleInstallation": false,

	// Controls when to display information of selected interpreter in the status bar.
	//  - never: Never display information.
	//  - onPythonRelated: Only display information if Python-related files are opened.
	//  - always: Always display information.
	"python.interpreter.infoVisibility": "onPythonRelated",

	// Defines type of the language server.
	//  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
	//  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
	//  - Pylance: Use Pylance as a language server.
	//  - None: Disable language server capabilities.
	"python.languageServer": "Default",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.banditArgs": [],

	// Whether to lint Python files using bandit.
	"python.linting.banditEnabled": false,

	// Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
	"python.linting.banditPath": "bandit",

	// Optional working directory for linters.
	"python.linting.cwd": null,

	// Whether to lint Python files.
	"python.linting.enabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.flake8Args": [],

	// Severity of Flake8 message type 'E'.
	"python.linting.flake8CategorySeverity.E": "Error",

	// Severity of Flake8 message type 'F'.
	"python.linting.flake8CategorySeverity.F": "Error",

	// Severity of Flake8 message type 'W'.
	"python.linting.flake8CategorySeverity.W": "Warning",

	// Whether to lint Python files using flake8.
	"python.linting.flake8Enabled": false,

	// Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
	"python.linting.flake8Path": "flake8",

	// Patterns used to exclude files or folders from being linted.
	"python.linting.ignorePatterns": [
		"**/site-packages/**/*.py",
		".vscode/*.py"
	],

	// Whether to lint Python files when saved.
	"python.linting.lintOnSave": true,

	// Controls the maximum number of problems produced by the server.
	"python.linting.maxNumberOfProblems": 100,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.mypyArgs": [
		"--follow-imports=silent",
		"--ignore-missing-imports",
		"--show-column-numbers",
		"--no-pretty"
	],

	// Severity of Mypy message type 'Error'.
	"python.linting.mypyCategorySeverity.error": "Error",

	// %python.linting.mypyCategorySeverity.note.description%.
	"python.linting.mypyCategorySeverity.note": "Information",

	// Whether to lint Python files using mypy.
	"python.linting.mypyEnabled": false,

	// Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
	"python.linting.mypyPath": "mypy",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.prospectorArgs": [],

	// Whether to lint Python files using prospector.
	"python.linting.prospectorEnabled": false,

	// Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
	"python.linting.prospectorPath": "prospector",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pycodestyleArgs": [],

	// Severity of pycodestyle message type 'E'.
	"python.linting.pycodestyleCategorySeverity.E": "Error",

	// Severity of pycodestyle message type 'W'.
	"python.linting.pycodestyleCategorySeverity.W": "Warning",

	// Whether to lint Python files using pycodestyle.
	"python.linting.pycodestyleEnabled": false,

	// Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
	"python.linting.pycodestylePath": "pycodestyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pydocstyleArgs": [],

	// Whether to lint Python files using pydocstyle.
	"python.linting.pydocstyleEnabled": false,

	// Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
	"python.linting.pydocstylePath": "pydocstyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylamaArgs": [],

	// Whether to lint Python files using pylama.
	"python.linting.pylamaEnabled": false,

	// Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
	"python.linting.pylamaPath": "pylama",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylintArgs": [],

	// Severity of Pylint message type 'Convention/C'.
	"python.linting.pylintCategorySeverity.convention": "Information",

	// Severity of Pylint message type 'Error/E'.
	"python.linting.pylintCategorySeverity.error": "Error",

	// Severity of Pylint message type 'Error/F'.
	"python.linting.pylintCategorySeverity.fatal": "Error",

	// Severity of Pylint message type 'Refactor/R'.
	"python.linting.pylintCategorySeverity.refactor": "Hint",

	// Severity of Pylint message type 'Warning/W'.
	"python.linting.pylintCategorySeverity.warning": "Warning",

	// Whether to lint Python files using pylint.
	"python.linting.pylintEnabled": false,

	// Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
	"python.linting.pylintPath": "pylint",

	// The logging level the extension logs at, defaults to 'error'
	"python.logging.level": "error",

	// Path to the pipenv executable to use for activation.
	"python.pipenvPath": "pipenv",

	// Path to the poetry executable.
	"python.poetryPath": "poetry",

	// Determines if Pylance's experimental LSP notebooks support is used or not.
	"python.pylanceLspNotebooksEnabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.sortImports.args": [],

	// Path to isort script, default using inner version
	"python.sortImports.path": "",

	// Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
	"python.tensorBoard.logDirectory": "",

	// Activate Python Environment in the current Terminal on load of the Extension.
	"python.terminal.activateEnvInCurrentTerminal": false,

	// Activate Python Environment in Terminal created using the Extension.
	"python.terminal.activateEnvironment": true,

	// When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
	"python.terminal.executeInFileDir": false,

	// When launching a python process, whether to focus on the terminal.
	"python.terminal.focusAfterLaunch": false,

	// Python launch arguments to use when executing a file in the terminal.
	"python.terminal.launchArgs": [],

	// Enable auto run test discovery when saving a test file.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// Optional working directory for tests.
	"python.testing.cwd": null,

	// Port number used for debugging of tests.
	"python.testing.debugPort": 3000,

	// Prompt to configure a test framework if potential tests directories are discovered.
	"python.testing.promptToConfigure": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.pytestArgs": [],

	// Enable testing using pytest.
	"python.testing.pytestEnabled": false,

	// Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
	"python.testing.pytestPath": "pytest",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// Enable testing using unittest.
	"python.testing.unittestEnabled": false,

	// Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
	"python.venvFolders": [],

	// Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// Offer auto-import completions.
	"python.analysis.autoImportCompletions": true,

	// Automatically add common search paths like 'src'.
	"python.analysis.autoSearchPaths": true,

	// Add parentheses to function completions.
	"python.analysis.completeFunctionParens": false,

	// Analysis mode for diagnostics.
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",

	// Allows a user to override the severity levels for individual diagnostics.
	"python.analysis.diagnosticSeverityOverrides": {},

	// Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
	"python.analysis.exclude": [],

	// Allow using '.', '(' as commit characters when applicable.
	"python.analysis.extraCommitChars": true,

	// Additional import search resolution paths
	"python.analysis.extraPaths": [],

	// Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no value is provided, the value of python.linting.ignorePatterns (if set) will be used.
	"python.analysis.ignore": [],

	// Defines the default format for import module.
	//  - absolute: Use absolute import format when creating new import statement.
	//  - relative: Use relative import format when creating new import statement.
	"python.analysis.importFormat": "absolute",

	// Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
	"python.analysis.include": [],

	// Index installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.
	"python.analysis.indexing": false,

	// Enable/disable inlay hints for function return types:
	// ```python
	// def foo(x:int) ' -> int ':
	// 	return x
	// ```
	// 
	"python.analysis.inlayHints.functionReturnTypes": false,

	// Enable/disable inlay hints for variable types:
	// ```python
	// foo ' :list[str] ' = ["a"]
	//  
	// ```
	// 
	"python.analysis.inlayHints.variableTypes": false,

	// Specifies the level of logging for the Output panel
	"python.analysis.logLevel": "Information",

	// Path to directory containing custom type stub files.
	"python.analysis.stubPath": "typings",

	// Defines the default rule set for type checking.
	//  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
	//  - basic: All "off" rules + basic type checking rules.
	//  - strict: All "off" rules + all type checking rules.
	"python.analysis.typeCheckingMode": "off",

	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],

	// Use library implementations to extract type information when type stub is not present.
	"python.analysis.useLibraryCodeForTypes": true,

	// After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
	"jupyter.addGotoCodeLenses": true,

	// This setting is deprecated and will be removed in the next release.
	// Allows a user to import a jupyter notebook into a python file anytime one is opened.
	"jupyter.allowImportFromNotebook": true,

	// This setting is deprecated and will be removed in the next release.
	// Allow the inputting of python code directly into the Interactive window
	"jupyter.allowInput": true,

	// This setting is deprecated as Live Share support for the interactive window no longer exists in the Jupyter Extension.
	// Allow the Interactive window to be shared during a Live Share session
	"jupyter.allowLiveShare": true,

	// Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
	"jupyter.allowUnauthorizedRemoteConnection": false,

	// This setting is obsolete. Use the 'interactiveWindow.alwaysScrollOnNewCell' setting instead.
	// Automatically scroll the interactive window to show the output of the last statement executed. If false, the interactive window will only automatically scroll if the bottom of the prior cell is visible.
	"jupyter.alwaysScrollOnNewCell": false,

	// Warn the user before restarting a kernel.
	"jupyter.askForKernelRestart": true,

	// Warn the user before trying to open really large data frames.
	"jupyter.askForLargeDataFrames": true,

	// Set of commands to put as code lens above a cell.
	"jupyter.codeLenses": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",

	// Regular expression used to identify code cells. All code until the next match is considered part of this cell.
	"jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

	// This setting has been deprecated, please use `interactiveWindow.collapseCellInputCode` instead.
	// Collapse cell input code by default.
	"jupyter.collapseCellInputCodeByDefault": true,

	// This setting is deprecated and will be removed in an upcoming release.
	// Whether or not to use the theme's peek color as the background for the input box.
	"jupyter.colorizeInputBox": true,

	// Set of debug commands to put as code lens above a cell while debugging.
	"jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

	// When debugging, debug just my code.
	"jupyter.debugJustMyCode": true,

	// Path to debugpy bits for debugging cells.
	"jupyter.debugpyDistPath": "",

	// Draw a highlight behind the currently active cell.
	"jupyter.decorateCells": true,

	// Cell marker used for delineating a cell in a python file.
	"jupyter.defaultCellMarker": "# %%",

	// When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
	"jupyter.disableJupyterAutoStart": false,

	// Enables moving to the next cell when clicking on a 'Run Cell' code lens.
	"jupyter.enableAutoMoveToNextCell": true,

	// Enables code lens for 'cells' in a python file.
	"jupyter.enableCellCodeLens": true,

	// Enables Jedi support for extended IntelliSense completions in running Jupyter kernels (see this [setting](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi)). This can greatly impact notebook cell execution performance. Use with caution.
	"jupyter.enableExtendedKernelCompletions": false,

	// This setting has been deprecated as Jupyter keyboard shortcuts have been moved into the ms-toolsai.jupyter-keymap extension. If you would like to disable Jupyter keyboard shortcuts, please uninstall or disable that extension instead.
	// Enables Jupyter style keyboard shortcuts for Notebooks.
	"jupyter.enableKeyboardShortcuts": true,

	// This setting is deprecated and will be removed in the next release.
	// Enables scrolling for large cell outputs in the Notebook Editor. This setting does not apply to the Interactive Window.
	"jupyter.enableScrollingForCellOutputs": true,

	// Add PYTHONNOUSERSITE to kernels before starting. This prevents global/user site-packages from being used in the PYTHONPATH of the kernel.
	"jupyter.excludeUserSitePackages": false,

	// Enables/disables A/B tests.
	"jupyter.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optOutFrom": [],

	// Enable exporting a python file into a jupyter notebook and run all cells when doing so.
	"jupyter.exportWithOutputEnabled": false,

	// Generate SVG output for notebook plots. This allows for better display in the plot viewer at the cost of generation speed and file size.
	"jupyter.generateSVGPlots": false,

	// This setting is deprecated and will be removed in the next release.
	// Don't use the VS Code theme in the Interactive window (requires reload of VS Code). This forces the Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
	"jupyter.ignoreVscodeTheme": false,

	// Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
	"jupyter.interactiveWindowMode": "multiple",

	// When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Jupyter Extension.
	"jupyter.jupyterCommandLineArguments": [],

	// Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
	"jupyter.jupyterInterruptTimeout": 10000,

	// Number of times to attempt to connect to the Jupyter Notebook
	"jupyter.jupyterLaunchRetries": 3,

	// Amount of time (in ms) to wait for the Jupyter Notebook server to start.
	"jupyter.jupyterLaunchTimeout": 60000,

	// List of Jupyter Kernels and/or Python environments that are to be excluded from the Kernel picker.
	"jupyter.kernels.filter": [],

	// This setting is deprecated and will be removed in the next release.
	// Amount of time to wait for guest connections to verify they have the Python Extension installed.
	"jupyter.liveShareConnectionTimeout": 1000,

	// The logging level the extension logs at.
	"jupyter.logging.level": "debug",

	// Creates separate output panels for kernels/jupyter server console output
	"jupyter.logKernelOutputSeparately": false,

	// Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
	"jupyter.magicCommandsAsComments": false,

	// Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
	"jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

	// This setting is deprecated and will be removed in the next release.
	// Maximum size (in pixels) of text output in the Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.
	"jupyter.maxOutputSize": 400,

	// Append a new empty cell to an interactive window file on running the currently last cell.
	"jupyter.newCellOnRunLast": true,

	// Set the root directory for running notebooks and the Interactive window.
	"jupyter.notebookFileRoot": "${fileDirname}",

	// Determines if Pylance manages notebook concat doc creation.
	"jupyter.pylanceHandlesNotebooks": true,

	// Characters which trigger auto completion on a python jupyter kernel.
	"jupyter.pythonCompletionTriggerCharacters": ".%'\"",

	// The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.
	"jupyter.pythonExportMethod": "direct",

	// When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.
	"jupyter.remoteDebuggerPort": -1,

	// A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.
	"jupyter.runStartupCommands": "",

	// This setting is deprecated and will be removed in the next release.
	// Search all installed Python interpreters for a Jupyter installation when starting the Interactive window
	"jupyter.searchForJupyter": true,

	// When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
	"jupyter.sendSelectionToInteractiveWindow": false,

	// This setting is deprecated and will be removed in the next release.
	// Show cell input code.
	"jupyter.showCellInputCode": true,

	// Show only one type of kernel in the kernel picker. This prevents local kernels and remote kernels from being shown at the same time in the kernel picker.
	"jupyter.showOnlyOneTypeOfKernel": "false",

	// Show the Outline button in the Jupyter notebook toolbar.
	"jupyter.showOutlineButtonInNotebookToolbar": true,

	// Bring up the Variable View when starting a Run by Line session.
	"jupyter.showVariableViewWhenDebugging": true,

	// Stop running cells if a cell throws an exception.
	"jupyter.stopOnError": true,

	// When debugging a cell, stop on the first line.
	"jupyter.stopOnFirstLineWhileDebugging": true,

	// This setting is deprecated in favor of `notebook.output.textLineLimit`. This setting will be removed in an upcoming release.
	// Limit the amount of text in Interactive cell text output to this value. 0 to allow any amount of characters.
	"jupyter.textOutputLimit": 20000,

	// In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
	"jupyter.themeMatplotlibPlots": false,

	// When running Jupyter locally, create a default empty Jupyter config for the Interactive window
	"jupyter.useDefaultConfigForJupyter": true,

	// Types to exclude from showing in the Interactive variable explorer
	"jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type",

	// Language to query mapping for returning the list of active variables in a Jupyter kernel. Used by the Variable Explorer in both the Interactive Window and Notebooks. Example:
	// ```
	// [
	//   {
	//     "language": "python",
	//     "query": "%who_ls",
	//     "parseExpr": "'(\\w+)'"
	//   }
	// ]
	// ```
	"jupyter.variableQueries": [],

	// Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
	//  - jsdelivr.com: Loads widget (javascript) scripts from https://www.jsdelivr.com/
	//  - unpkg.com: Loads widget (javascript) scripts from https://unpkg.com/
	"jupyter.widgetScriptSources": [],

	// 自定义工具包文件的路径数组
	"cmake.additionalKits": [],

	// 允许使用 JSON 扩展，如 CMakePresets.json 中的注释。请注意，如果使用非标准 JSON，则其他 IDE 或命令行可能认为 CMakePresets.json 文件无效。
	"cmake.allowCommentsInPresetsFile": false,

	// 自动选择活动文件夹。
	"cmake.autoSelectActiveFolder": true,

	// 要在生成时传递给 CMake 的其他参数。
	"cmake.buildArgs": [],

	// 请先生成目标然后再运行目标。
	"cmake.buildBeforeRun": true,

	// CMake 生成文件将转到其中的目录。
	"cmake.buildDirectory": "${workspaceFolder}/build",

	// 要在生成过程中传递给 CMake 的环境变量。
	"cmake.buildEnvironment": {},

	// 使用 tasks.json 生成，而非使用内部进程。
	"cmake.buildTask": false,

	// 要在生成时传递给基础生成工具的其他参数。
	"cmake.buildToolArgs": [],

	// 
	"cmake.cacheInit": null,

	// 在每次生成前清除生成输出。
	"cmake.clearOutputBeforeBuild": true,

	// 用于在扩展和 CMake 之间进行通信的协议
	"cmake.cmakeCommunicationMode": "automatic",

	// 要使用的 CMake 可执行文件的名称/路径。
	"cmake.cmakePath": "cmake",

	// 要在配置时传递给 CMake 的其他参数。
	"cmake.configureArgs": [],

	// 要在配置过程中传递给 CMake 的环境变量。
	"cmake.configureEnvironment": {},

	// 保存 cmake.sourceDirectory 或 CMakeLists.txt 内容时，自动配置 CMake 项目目录。
	"cmake.configureOnEdit": true,

	// 在 CMake 项目目录打开时自动对其进行配置。
	"cmake.configureOnOpen": null,

	// 要在命令行上设置的 CMake 变量。
	"cmake.configureSettings": {},

	// 成功配置后将 compile_commands.json 复制到此位置。
	"cmake.copyCompileCommands": null,

	// 并行测试作业的数量。使用零即可利用 cmake.parallelJobs 的值。
	"cmake.ctest.parallelJobs": 0,

	// 要传递给 CTest 的参数。
	"cmake.ctestArgs": [],

	// 默认情况下传递给 CTest 的参数。
	"cmake.ctestDefaultArgs": [
		"-T",
		"test",
		"--output-on-failure"
	],

	// CTest 可执行文件的路径。如果为 null，则从 cmake.cmakePath 推理(建议保留为 null)。
	"cmake.ctestPath": null,

	// 要在调试目标时使用的调试配置。
	"cmake.debugConfig": {},

	// 
	"cmake.defaultVariants": {
		"buildType": {
			"default": "debug",
			"description": "生成类型。",
			"choices": {
				"debug": {
					"short": "Debug",
					"long": "禁用优化 - 包括调试信息。",
					"buildType": "Debug"
				},
				"release": {
					"short": "Release",
					"long": "进行优化，提高速度 - 排除调试信息。",
					"buildType": "Release"
				},
				"minsize": {
					"short": "MinSizeRel",
					"long": "优化最小二进制大小 - 排除调试信息。",
					"buildType": "MinSizeRel"
				},
				"reldeb": {
					"short": "RelWithDebInfo",
					"long": "进行优化，提高速度 - 包括调试信息。",
					"buildType": "RelWithDebInfo"
				}
			}
		}
	},

	// 可在其中安装 Emscripten 的目录。
	"cmake.emscriptenSearchDirs": [],

	// 要使用的输出分析程序。支持的分析程序 `cmake`、`gcc`、`gnuld`(适用于 GNULD 样式的 inker 输出)、`msvc`(适用于 Microsoft Visual C++)、`ghs`(适用于 Green Hills 编译器，具有 --no_wrap_diagnostics --brief_diagnostics)，以及 `diab`(适用于 Wind River Diab 编译器)。
	"cmake.enabledOutputParsers": [
		"cmake",
		"gcc",
		"gnuld",
		"msvc",
		"ghs",
		"diab"
	],

	// 对文件和控制台启用跟踪日志记录(噪音很大)。
	"cmake.enableTraceLogging": false,

	// 要在运行 CMake 命令时设置的环境变量。
	"cmake.environment": {},

	// 启用导出 compile_commands.json。
	"cmake.exportCompileCommandsFile": true,

	// 要使用的 CMake 生成器。
	"cmake.generator": null,

	// 如果为 `true`，则当在工作区中找到 CMakeLists.txt 文件，但未在根文件夹中找到时，扩展将不会要求用户选择 CMakeLists.txt 文件以进行配置。
	"cmake.ignoreCMakeListsMissing": false,

	// 运行 CMake 命令时，请勿使用工具包环境变量。
	"cmake.ignoreKitEnv": false,

	// CMake 安装文件将转到其中的目录。
	"cmake.installPrefix": null,

	// 控制启动目标时启动终端将执行的操作。
	//  - reuseTerminal: 已重用启动终端实例，并且目标将在终端空闲时立即启动。
	//  - breakAndReuseTerminal: 已重用启动终端实例，并且将在启动目标之前发送“中断”命令以终止任何活动的前台进程。
	//  - newTerminal: 已创建新的终端实例，并且已在其中启动目标。系统不会自动清理现有终端。
	"cmake.launchBehavior": "reuseTerminal",

	// 
	"cmake.loggingLevel": "info",

	// 以递归方式收集和合并在 cmake.buildDirectory 中找到的所有compile_commands.json。
	"cmake.mergedCompileCommands": null,

	// 可在其中安装 MinGW 的目录。
	"cmake.mingwSearchDirs": [
		"${env:SystemDrive}/MinGW"
	],

	// 来自外部命令的输出的编码(例如 cmake -- build)。
	"cmake.outputLogEncoding": "auto",

	// 并行生成作业的数目。使用零来自动检测 CPU 数。将此值设为 1 则将禁用生成并行度。
	"cmake.parallelJobs": 0,

	// 分析编译器输出以查找警告和错误。
	"cmake.parseBuildDiagnostics": true,

	// 要在配置时使用的 CMake 平台。
	"cmake.platform": null,

	// 要在配置时使用的首选 CMake 生成器(按列表中的顺序尝试)。
	"cmake.preferredGenerators": [],

	// 配置用于显示日志并聚焦于输出通道的设置。
	//  - focus: 将显示日志，并且输出通道会占用光标焦点。
	//  - always: 将显示日志，但输出通道不会占用光标焦点。
	//  - never: 日志既不显示也不占据焦点。
	"cmake.revealLog": "always",

	// 在生成前保存打开的文件。
	"cmake.saveBeforeBuild": true,

	// 在多配置生成器上也设置 CMAKE_BUILD_TYPE
	"cmake.setBuildTypeOnMultiConfig": false,

	// 在工具包选择中包括系统工具包
	"cmake.showSystemKits": true,

	// 如果存在缓存，则跳过配置进程。
	"cmake.skipConfigureIfCachePresent": null,

	// 根文件 CMakeLists.txt 的目录。
	"cmake.sourceDirectory": "${workspaceFolder}",

	// 配置各个状态栏按钮的设置。这些设置将覆盖更常规的 "cmake.statusbar.visibility" 设置。
	"cmake.statusbar.advanced": {},

	// 配置扩展在状态栏中显示按钮的方式。
	"cmake.statusbar.visibility": "default",

	// 要传递给 CTest 的环境变量。
	"cmake.testEnvironment": {},

	// 要在配置时使用的 CMake 工具集。
	"cmake.toolset": null,

	// 
	"cmake.touchbar.advanced": {},

	// 配置扩展在 MacBook 触控栏上显示按钮的方式
	//  - default: 在支持的系统上显示触控栏按钮。
	//  - hidden: 不显示触控栏按钮。
	"cmake.touchbar.visibility": "default",

	// 使用 CMakepresets.json 配置驱动器 CMake 配置、生成和测试。使用 CMakepresets.json 时，将忽略工具包、变量和 settings.json 中的某些设置。
	"cmake.useCMakePresets": "auto",

	// 当来自 `nan` 和 `node-addon-api` 的包含路径为依赖项时，请将其添加。
	"C_Cpp.addNodeAddonIncludePaths": false,

	// 控制当文件为 C/C++ 文件中导航操作的目标时，其是否自动添加到 `files.associations`。
	"C_Cpp.autoAddFileAssociations": true,

	// 控制自动完成提供程序。如果“已禁用”，且你想要基于字词的补全，则还需要设置 `"[cpp]": {"editor.wordBasedSuggestions": true}`(对 `c` 和 `cuda-cpp` 语言同样执行此操作)。
	//  - default: 使用活动的 IntelliSense 引擎。
	//  - disabled: 使用 Visual Studio Code 提供的基于字词的补全。
	"C_Cpp.autocomplete": "default",

	// 如果为 `true`，则自动完成将在函数调用后自动添加 `(` ，在这种情况下，也可以添加 `(` ，具体取决于 `editor.autoClosingBrackets` 设置的值。
	"C_Cpp.autocompleteAddParentheses": false,

	// If set to `default`, the file system of the workspace is assumed to be case insensitive on Windows and case sensitive on macOS or Linux. If set to `enabled`, the file system of the workspace is assumed to be case sensitive on Windows.
	"C_Cpp.caseSensitiveFileSupport": "default",

	// 用作回退的预定义样式的名称，以防使用样式 `file` 调用 `clang-format` 但找不到 `.clang-format` 文件。可能的值为 `Visual Studio`、`LLVM`、 `Google`、`Chromium`、`Mozilla`、`WebKit`、 `Microsoft`、`GNU`、`none`，或使用 `{键: 值, ...}` 以设置特定参数。例如，`Visual Studio` 样式类似于: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`。
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// `clang-format` 可执行文件的完整路径。如果未指定，则 `clang-format` 在使用的环境路径中可用。如果在环境路径中找不到，则将使用与扩展捆绑的 `clang-format`。
	"C_Cpp.clang_format_path": "",

	// 如果设置，则替换由 `SortIncludes` 参数确定的包含排序行为。
	"C_Cpp.clang_format_sortIncludes": null,

	// 编码样式目前支持: `Visual Studio`、`LLVM`、 `Google`、`Chromium`、`Mozilla`、`WebKit`、 `Microsoft`、`GNU`。使用 `file` 从当前目录或父目录中的 `.clang-format` 文件加载样式。使用 `{键: 值, ...}` 以设置特定参数。例如，`Visual Studio` 样式类似于: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`。
	"C_Cpp.clang_format_style": "file",

	// 要传递给 `clang-tidy` 的其他命令行参数。这些优先于等效的 `C_Cpp.codeAnalysis.clangTidy.*` 设置。
	"C_Cpp.codeAnalysis.clangTidy.args": [],

	// 已禁用的 `clang-tidy` 检查列表。该值将追加到 `.clang-tidy` 文件中的 `Checks` 或 `C_Cpp.codeAnalysis.clangTidy.config` (如果有)。
	"C_Cpp.codeAnalysis.clangTidy.checks.disabled": [],

	// 已启用的 `clang-tidy` 检查列表。这些值将追加到 `.clang-tidy` 文件中的 `Checks` 或 `C_Cpp.codeAnalysis.clangTidy.config` (如果有)。除非显式禁用，否则始终使用默认检查 `clang-analyzer-*`。
	"C_Cpp.codeAnalysis.clangTidy.checks.enabled": [],

	// 如果为 `true`，则在 `修复` 代码操作更改的行上运行格式设置。
	"C_Cpp.codeAnalysis.clangTidy.codeAction.formatFixes": true,

	// 控制哪些“清除”代码分析问题代码操作选项可用。更改设置以显示更多选项可能需要重新运行代码分析。
	//  - None: 不显示“清除”代码操作。
	//  - AllOnly: 仅显示“全部清除”代码操作(如果只有一种类型，则显示“清除所有<type>”，如果只有一个问题，则显示“清除此项”)。
	//  - AllAndAllType: 如果存在多个问题类型，显示“全部清除”代码操作和“清除所有 <type>”代码操作(或如果<type>只有一个问题，显示“清除此项”)
	//  - AllAndAllTypeAndThis: 如果有多个问题类型，显示“全部清除”，如果有多个 <type> 问题，显示“清除所有 <type>”以及显示“清除此项”代码操作
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showClear": "AllAndAllTypeAndThis",

	// 如果为`true`，`禁用'代码操作将在可用时显示(下次运行代码分析时)。使用`禁用'代码操作时，它会将警告代码添加到 `C_Cpp.codeAnalysis.clangTidy.checks.disabled`设置。
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable": true,

	// 如果为 `true`，“显示文档”代码操作将在可用时显示(下次运行代码分析时)。
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation": true,

	// 指定 YAML/JSON 格式的 `clang-tidy` 配置: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{键: x, 值: y}]}`。当值为空时，`clang-tidy` 将尝试为其父目录中的每个源文件查找名为 `.clang-tidy` 的文件。
	"C_Cpp.codeAnalysis.clangTidy.config": "",

	// 如果为 `true`，则在 `C_Cpp.codeAnalysis.runAutomatically` 为 `true` (默认值)时，将启用并自动运行使用 `clang-tidy` 的代码分析。
	"C_Cpp.codeAnalysis.clangTidy.enabled": false,

	// 指定 YAML/JSON 格式的 `clang-tidy` 配置，以在未设置 `C_Cpp.codeAnalysis.clangTidy.config`，并且未找到 `.clang-tidy` 文件: `{Checks: '-*,clang-analyzer-*', CheckOptions: [{键: x, 值: y}]}` 时将其用作回退。
	"C_Cpp.codeAnalysis.clangTidy.fallbackConfig": "",

	// 与要从中输出诊断的标头名称匹配的 POSIX 扩展正则表达式 (ERE)。始终显示来自每个翻译单元的主文件的诊断。支持 `${workspaceFolder}` 变量(如果不存在 `.clang-tidy` 文件，则该变量将用作默认回退值)。如果此选项不是 `null` (空)，则将替代 `.clang-tidy` 文件中的 `HeaderFilterRegex` 选项(如果有)。
	"C_Cpp.codeAnalysis.clangTidy.headerFilter": null,

	// `clang-tidy` 可执行文件的完整路径。如果未指定，并且 `clang-tidy` 在环境路径中可用，则使用该路径。如果在环境路径中找不到，则将使用与扩展捆绑的 `clang-tidy`。
	"C_Cpp.codeAnalysis.clangTidy.path": "",

	// 如果设置了 `true` 和 `compileCommands`，则 `-p=<build-path>` 参数将传递给 `clang-tidy`，而不是在 `--` 之后传递生成参数。如果未设置环境变量以便可以找到系统包含项，则此操作可能不起作用。
	"C_Cpp.codeAnalysis.clangTidy.useBuildPath": false,

	// 配置 glob 模式已排除用于代码分析的文件夹和文件。始终排除不在工作区文件夹下的文件。从 `files.exclude#` 和 `#C_Cpp.files.exclude` 继承值。详细了解 glob 模式 [此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)。
	"C_Cpp.codeAnalysis.exclude": {},

	// 用于代码分析的最大并发线程数。默认值 `null` (空)使用从 `C_Cpp.maxConcurrentThreads` 继承的值的一半。
	"C_Cpp.codeAnalysis.maxConcurrentThreads": null,

	// 超过此内存使用量(以 MB 为单位)后，将并发运行更少的代码分析进程。默认值 `null` (空)使用从 `C_Cpp.maxMemory` 继承的值。
	"C_Cpp.codeAnalysis.maxMemory": null,

	// 如果为 `true`，则代码分析将在文件打开或保存后自动在文件上运行。
	"C_Cpp.codeAnalysis.runAutomatically": true,

	// 控制在 `files.autoSave#` 为 `afterDelay` 且 `#C_Cpp.codeAnalysis.runAutomatically` 为 `true` 时从编辑触发保存后，代码分析开始处理之前的延迟(以毫秒为单位)。
	"C_Cpp.codeAnalysis.updateDelay": 2000,

	// 如果启用，则由语言服务器提供代码折叠范围。
	"C_Cpp.codeFolding": "enabled",

	// 定义在多行或单行注释块内按下 Enter 键时的编辑器行为。
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// 确定在配置提供程序扩展无法提供源文件配置时是否显示弹出通知。
	"C_Cpp.configurationWarnings": "enabled",

	// 如果为 `true`，则调试程序 shell 命令替换将使用过时的反引号 ``(`)``。
	"C_Cpp.debugger.useBacktickCommandSubstitution": false,

	// 显示 C++ 文件编辑器标题栏中的“运行和调试”播放按钮和“添加调试配置”齿轮。
	"C_Cpp.debugShortcut": true,

	// `browse.databaseFilename` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.browse.databaseFilename": "",

	// `browse.limitSymbolsToIncludedHeaders` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// 未指定 `browse.path` 时要在配置中使用的值，或 `browse.path` 中存在 `${default}` 时要插入的值。
	"C_Cpp.default.browse.path": null,

	// `compileCommands` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.compileCommands": "",

	// `compilerArgs` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.compilerArgs": [],

	// `compilerPath` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.compilerPath": null,

	// `configurationProvider` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.configurationProvider": "",

	// `cppStandard` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.cppStandard": "",

	// `cStandard` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.cStandard": "",

	// 未设置 `customConfigurationVariables` 时要在配置中使用的值，或 `${default}` 在 `customConfigurationVariables` 中作为键存在时要插入的值。
	"C_Cpp.default.customConfigurationVariables": null,

	// 未指定 `defines` 时要在配置中使用的值，或 `defines` 中存在 `${default}` 时要插入的值。
	"C_Cpp.default.defines": [],

	// 未指定 `dotConfig` 时要在配置中使用的值，或 `dotConfig` 中存在 `${default}` 时要插入的值。
	"C_Cpp.default.dotConfig": null,

	// 控制扩展是否将报告在 `c_cpp_properties.json` 中检测到的错误。
	"C_Cpp.default.enableConfigurationSquiggles": true,

	// 未指定 `forcedInclude` 时要在配置中使用的值，或 `forcedInclude` 中存在 `${default}` 时要插入的值。
	"C_Cpp.default.forcedInclude": [],

	// 未在 `c_cpp_properties.json` 中指定 `includePath` 时要在配置中使用的值。如果已指定 `includePath`，请将 `${default}` 添加到数组以插入此设置中的值。通常，此不应包含系统包含；请改为设置 `C_Cpp.default.compilerPath`。
	"C_Cpp.default.includePath": [],

	// `intelliSenseMode` 未指定或设置为 `${default}` 时要在配置中使用的值。
	"C_Cpp.default.intelliSenseMode": "",

	// 未指定 `macFrameworkPath` 时要在配置中使用的值，或 `macFrameworkPath` 中存在 `${default}` 时要插入的值。
	"C_Cpp.default.macFrameworkPath": [],

	// 设置为 `true` 以将包含路径、定义和强制包含与来自配置提供程序的包含路径、定义和强制包含合并。
	"C_Cpp.default.mergeConfigurations": false,

	// 要用于系统包含路径的值。如果设置，则其将替换通过 `compilerPath` 和 `compileCommands` 设置获取的系统包含路径。
	"C_Cpp.default.systemIncludePath": [],

	// 要在 Windows 上使用的 Windows SDK 包含路径的版本，例如 `10.0.17134.0`。
	"C_Cpp.default.windowsSdkVersion": "",

	// 控制非活动预处理程序块的颜色是否与活动代码不同。如果禁用了 IntelliSense 或使用“默认高对比度”主题，则此设置不起任何作用。
	"C_Cpp.dimInactiveRegions": true,

	// 用作 Doxygen 注释起始行的字符串。
	"C_Cpp.doxygen.generatedStyle": "///",

	// 控制在键入所选注释样式后是否自动插入 Doxygen 注释。
	"C_Cpp.doxygen.generateOnType": true,

	// 如果启用，则根据 IntelliSense 对代码进行着色。仅当 `C_Cpp.intelliSenseEngine` 设置为 `Default` 时，此设置才适用。
	"C_Cpp.enhancedColorization": "enabled",

	// 控制是否将 IntelliSense 引擎检测到的可疑编译错误报告回编辑器。还控制是否报告代码分析警告(如果找不到包含)。标记分析器引擎将忽略此设置。
	"C_Cpp.errorSquiggles": "enabledIfIncludesResolve",

	// 当扩展在确定哪些文件应添加到代码导航数据库，并遍历 `browse.path` 数组中的路径时，指示其使用 `files.exclude#` (和 `#C_Cpp.files.exclude#`)设置的时间。如果 `#files.exclude` 设置仅包含文件夹，则 `checkFolders` 为最佳选择，且将提高扩展可以初始化代码导航数据库的速度。
	//  - checkFolders: 排除筛选器将仅对每个文件夹进行一次评估(不检查单个文件)。
	//  - checkFilesAndFolders: 将针对每个遇到的文件和文件夹评估排除筛选器。
	"C_Cpp.exclusionPolicy": "checkFolders",

	// 控制“实验性”功能是否可用。
	"C_Cpp.experimentalFeatures": "disabled",

	// 为排除文件夹(以及文件 - 如果更改了 `C_Cpp.exclusionPolicy#`)配置 glob 模式。这些特定于 C/C++ 扩展，并且是 `#files.exclude#` 的补充，但与 `#files.exclude` 不同，它们也适用于当前工作区文件夹之外的路径，并且不会从资源管理器视图中删除。[此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)。
	"C_Cpp.files.exclude": {
		"**/.vscode": true,
		"**/.vs": true
	},

	// 配置格式设置引擎。
	//  - clangFormat: `clang-format` 将用于格式代码。
	//  - vcFormat: 将使用 Visual C++ 格式设置引擎来设置代码的格式。
	//  - default: 默认情况下，`clang-format` 将用于格式化代码。但是，如果找到具有相关设置的 `.editorconfig` 文件接近于所格式化的代码，且 `C_Cpp.clang_format_style` 为默认值: `file`，则将使用 Visual C++ 格式化引擎。
	//  - disabled: 将禁用代码格式设置。
	"C_Cpp.formatting": "default",

	// 控制非活动预处理程序块的背景颜色。输入的格式为十六进制颜色代码或有效的主题颜色。如果未设置，则默认为透明。此设置仅在启用了非活动区域变暗时适用。
	"C_Cpp.inactiveRegionBackgroundColor": "",

	// 控制非活动预处理程序块的字体颜色。输入的格式为十六进制颜色代码或有效的主题颜色。如果未设置，则默认为编辑器的语法颜色方案。此设置仅在启用非活动区域变暗时适用。
	"C_Cpp.inactiveRegionForegroundColor": "",

	// 控制非活动预处理器块的不透明度。在 `0.1` 和 `1.0` 之间进行缩放。仅当启用非活动区域暗化时，此设置才适用。
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// 在声明中使用 `auto` 时显示推导类型的内嵌提示:
	// ```cpp 
	// 
	//  auto index /* : int */ = 0;
	// ```
	"C_Cpp.inlayHints.autoDeclarationTypes.enabled": false,

	// 在标识符左侧声明中使用 `auto` 时显示推导类型的内嵌提示:
	// ```cpp 
	// 
	//  auto /* int */ index = 0;
	// ```
	"C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft": false,

	// 显示参数名称的内嵌提示:
	// ```cpp 
	// 
	//  int a = getArea(/* width: */ x, /* height: */ y);
	// ```
	"C_Cpp.inlayHints.parameterNames.enabled": false,

	// 在参数名称提示中隐藏开头的 `_`。
	"C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores": true,

	// 当参数文本或内联注释包含参数名称时，抑制参数名称提示:
	// ```cpp 
	// 
	//  int a = getArea(width, /* height: */ y);
	// ```
	"C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName": true,

	// 显示非常量引用传递的参数的内嵌提示引用运算符 `&`:
	// ```cpp 
	// 
	//  swap(/* &first: */ str1, /* &last: */ str2);
	// ```
	"C_Cpp.inlayHints.referenceOperator.enabled": false,

	// 控制在 `&` 后是否显示非常量引用传递的参数的空格:
	// ```cpp 
	// 
	//  swap(/* & first: */ str1, /* & last: */ str2);
	// ```
	"C_Cpp.inlayHints.referenceOperator.showSpace": false,

	// 要继续运行的最大 IntelliSense 进程数。默认值 `null` (空)使用从 `C_Cpp.maxCachedProcesses` 继承的值。
	"C_Cpp.intelliSense.maxCachedProcesses": null,

	// 超过此内存使用量(以 MB 为单位)后，在创建新进程之前，旧的 IntelliSense 进程将关闭。默认值 `null` (空)使用从 `C_Cpp.maxMemory` 继承的值。
	"C_Cpp.intelliSense.maxMemory": null,

	// 定义 IntelliSense 使用的缓存预编译标头的文件夹路径。默认缓存路径为 Windows 上的`%LocalAppData%/Microsoft/vscode-cpptools`， Linux 上的 `$XDG_CACHE_HOME/vscode-cpptools/` (如果未定义 `XDG_CACHE_HOME`，则为`$HOME/.cache/vscode-cpptools/`) 和 macOS 上的 `$HOME/Library/Caches/vscode-cpptools/`。如果未指定路径或指定的路径无效，则将使用默认路径。
	"C_Cpp.intelliSenseCachePath": "",

	// 缓存预编译标头的每个工作区硬盘空间的最大大小(以兆字节(MB)为单位)；实际使用量可能围绕此值波动。默认大小为 `5120` MB。当大小为 `0` 时，将禁用预编译标头缓存。
	"C_Cpp.intelliSenseCacheSize": 5120,

	// 控制 IntelliSense 提供程序。
	//  - default: 通过单独的 IntelliSense 流程提供上下文感知结果。
	//  - Tag Parser: 提供非上下文感知的“模糊”结果。
	//  - disabled: 关闭 C/C++ 语言服务功能。
	"C_Cpp.intelliSenseEngine": "default",

	// 控制 IntelliSense 引擎是否将自动切换为包含 `#include` 错误的翻译单元的标记分析器。
	"C_Cpp.intelliSenseEngineFallback": "disabled",

	// IntelliSense 流程的内存使用限制，以兆字节 (MB)为单位。默认为 `4096`，最大为 `16384`。当扩展超出限制时，其将关闭并重启 IntelliSense 流程。
	"C_Cpp.intelliSenseMemoryLimit": 4096,

	// 控制修改之后到 IntelliSense 开始更新之间的延迟(以毫秒为单位)。
	"C_Cpp.intelliSenseUpdateDelay": 2000,

	// 启用 v1.10.0 以前的行为，以了解在编译器参数设置中如何处理 shell 转义。从 v1.10.0 开始，参数数组在默认情况下不再需要或支持 shell 转义。
	"C_Cpp.legacyCompilerArgsBehavior": false,

	// 输出面板中日志记录的详细程度。从最不详细到最详细的级别顺序为: `None` < `Error` < `Warning` < `Information` < `Debug`。
	"C_Cpp.loggingLevel": "Error",

	// 用于语言服务处理的最大缓存进程数。默认值 `null` (空)使用可用逻辑处理器数的两倍。
	"C_Cpp.maxCachedProcesses": null,

	// 用于语言服务处理的最大并发线程数。该值是一个提示，且不能始终使用。默认值 `null` (空)使用可用的逻辑处理器数。
	"C_Cpp.maxConcurrentThreads": null,

	// 可用于语言服务处理的最大内存(以 MB 为单位)。超过此内存使用量后，将缓存且并发运行较少的进程。默认值 `null` (空)使用系统的空闲内存。
	"C_Cpp.maxMemory": null,

	// 用作 `#include` 自动完成结果的路径分隔符的字符。
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// “查找所有引用”和“重命名”的要保留在内存中的最大进程数。默认值 `0` 将禁用此功能。值为 `null` (空)则使用从 `C_Cpp.maxCachedProcesses` 继承的值。
	"C_Cpp.references.maxCachedProcesses": 0,

	// 用于“查找所有引用”和“重命名”的最大并发线程数。默认值 `null` (空)使用从 `C_Cpp.maxConcurrentThreads` 继承的值。
	"C_Cpp.references.maxConcurrentThreads": null,

	// 超过此内存使用量(以 MB 为单位)后，将缓存且并发运行更少的“查找所有引用”和“重命名”进程。默认值 `null` (空)使用从 `C_Cpp.maxMemory` 继承的值。
	"C_Cpp.references.maxMemory": null,

	// 如果为 `true`，则“重命名符号”将需要有效的 C/C++ 标识符。
	"C_Cpp.renameRequiresIdentifier": true,

	// 如果为 `true`，则悬停和自动完成的工具提示将仅显示结构化注释的某些标签。否则，将显示所有注释。
	"C_Cpp.simplifyStructuredComments": true,

	// Controls whether the SSH Targets view is visible. By default, enable the view when an SSH command is invoked.
	"C_Cpp.sshTargetsView": "default",

	// 如果为 `true`，则由语言服务器提供片段。
	"C_Cpp.suggestSnippets": true,

	// 此设置已弃用。预发行版扩展现在可通过市场获得。
	// 设置为 `Insiders` 以自动下载并安装扩展的最新预览体验版本，其中包含即将推出的功能和 bug 修复。
	"C_Cpp.updateChannel": "Default",

	// 按 `editor.tabSize` 设置中指定的量缩进访问说明符(相对于类或结构定义)。
	"C_Cpp.vcFormat.indent.accessSpecifiers": false,

	// 按 `editor.tabSize` 设置中指定的量缩进大括号。
	"C_Cpp.vcFormat.indent.braces": false,

	// 按 `editor.tabSize` 设置中指定的量缩进 `case` 块内的代码(相对于其标签)。
	"C_Cpp.vcFormat.indent.caseContents": true,

	// 按 `editor.tabSize` 设置中指定的量缩进 case 语句后的大括号。
	"C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,

	// 按 `editor.tabSize` 设置中指定的量缩进标签(相对于开关语句)。
	"C_Cpp.vcFormat.indent.caseLabels": false,

	// goto 标签的位置。
	//  - oneLeft: 按 `editor.tabSize` 设置中指定的量将 goto 标签置于当前代码缩进的左侧。
	//  - leftmostColumn: 将 goto 标签置于代码的最左侧边缘。
	//  - none: 不会格式化 goto 标签。
	"C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",

	// 按 `editor.tabSize` 设置中指定的量，对用作函数参数的 Lambda 大括号进行缩进(相对于语句开头)。
	"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,

	// 确定相对于哪个新行缩进。
	//  - outermostParenthesis: 相对于最外侧的左括号缩进新行。
	//  - innermostParenthesis: 相对于最内侧的左括号缩进新行。
	//  - statementBegin: 相对于当前语句的开头缩进新行。
	"C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",

	// 按 `editor.tabSize` 设置中指定的量缩进代码(相对于其封闭命名空间)。
	"C_Cpp.vcFormat.indent.namespaceContents": true,

	// 预处理器指令的位置。
	//  - oneLeft: 按 `editor.tabSize` 设置中指定的量将预处理器指令放置在当前代码缩进的左侧。
	//  - leftmostColumn: 预处理器指令位于代码的最左侧边缘。
	//  - none: 不会格式化预处理器指令。
	"C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",

	// 在格式设置操作过程中未更改注释的缩进。
	"C_Cpp.vcFormat.indent.preserveComments": false,

	// 在现有代码中，保留括号内新行现有的缩进对齐方式。
	"C_Cpp.vcFormat.indent.preserveWithinParentheses": false,

	// 键入新行时，其会在左括号下或根据 `C_Cpp.vcFormat.indent.multiLineRelativeTo` 进行对齐。
	//  - alignToParenthesis: 新行对齐到左括号下。
	//  - indent: 根据 `C_Cpp.vcFormat.indent.multiLineRelativeTo` 缩进新行。
	"C_Cpp.vcFormat.indent.withinParentheses": "indent",

	// 将 `catch` 和类似关键字放置在新行上。
	"C_Cpp.vcFormat.newLine.beforeCatch": true,

	// 将 `else` 置于新行。
	"C_Cpp.vcFormat.newLine.beforeElse": true,

	// 控制块左大括号的位置。
	//  - newLine: 将左大括号移动到新行。
	//  - sameLine: 左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。
	//  - ignore: 左大括号没有格式化。
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",

	// 函数左大括号的位置。
	//  - newLine: 将左大括号移动到新行。
	//  - sameLine: 左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。
	//  - ignore: 左大括号没有格式化。
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",

	// Lambda 函数左大括号的位置。
	//  - newLine: 将左大括号移动到新行。
	//  - sameLine: 左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。
	//  - ignore: 左大括号没有格式化。
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",

	// 命名空间左大括号的位置。
	//  - newLine: 将左大括号移动到新行。
	//  - sameLine: 左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。
	//  - ignore: 左大括号没有格式化。
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",

	// 类型定义左大括号的位置。
	//  - newLine: 将左大括号移动到新行。
	//  - sameLine: 左大括号保留在同一行上，并在每个左大括号的前面添加一个空格。
	//  - ignore: 左大括号没有格式化。
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",

	// 将 `while` 置于新行上的 `do`-`while` 循环中。
	"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,

	// 对于空的函数体，将右大括号移动到左大括号所在的同一行。
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,

	// 对于空类型，将右大括号移动到左大括号所在的同一行。
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,

	// 在单独的行上放置用于范围的左大括号和右大括号。
	"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,

	// 在 C 样式的强制转换的右括号后面添加一个空格。
	"C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,

	// 在每个逗号后面添加一个空格。
	"C_Cpp.vcFormat.space.afterComma": true,

	// 在关键字与控制流语句中的左括号之间添加一个空格。
	"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,

	// 赋值运算符周围的空格。
	//  - insert: 在运算符的前后添加一个空格。
	//  - remove: 移除运算符前后的空格。
	//  - ignore: 保留输入的空格。
	"C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",

	// 二进制运算符周围的空格。
	//  - insert: 在运算符的前后添加一个空格。
	//  - remove: 移除运算符前后的空格。
	//  - ignore: 保留输入的空格。
	"C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",

	// 条件运算符周围的空格。
	//  - insert: 在运算符的前后添加一个空格。
	//  - remove: 移除运算符前后的空格。
	//  - ignore: 保留输入的空格。
	"C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",

	// 在范围块的左大括号前面添加一个空格。
	"C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,

	// 在每个逗号前添加一个空格。
	"C_Cpp.vcFormat.space.beforeComma": false,

	// 在构造函数定义中的冒号前面添加一个空格。
	"C_Cpp.vcFormat.space.beforeConstructorColon": true,

	// 当方括号为空时，在左方括号前面添加一个空格。
	"C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,

	// 函数名称与参数列表的左括号之间的间距。
	//  - insert: 在函数的左括号前面添加一个空格。
	//  - remove: 删除函数左括号前的空格。
	//  - ignore: 保留输入的空格。
	"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",

	// 在类定义中继承的类型的冒号前面添加一个空格。
	"C_Cpp.vcFormat.space.beforeInheritanceColon": true,

	// 在统一初始化和初始值设定项列表的左大括号前面添加一个空格。
	"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,

	// 在 lambda 参数列表的左括号前面添加一个空格。
	"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,

	// 在左方括号之前添加一个空格。
	"C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,

	// 当大括号为空且位于同一行时，在它们之间插入一个空格。
	"C_Cpp.vcFormat.space.betweenEmptyBraces": false,

	// 当方括号为空时，在方括号之间插入一个空格。
	"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,

	// 当函数参数列表为空时，在其括号之间插入一个空格。
	"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,

	// 当方括号为空时，在方括号之间插入一个空格。
	"C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,

	// 对于多维数组，删除方括号之间的所有空格。控制空格的其他设置将被重写。
	"C_Cpp.vcFormat.space.groupSquareBrackets": true,

	// 在每个分号后面插入一个空格。
	"C_Cpp.vcFormat.space.insertAfterSemicolon": false,

	// 指针和引用运算符周围的空格。
	//  - left: 指针和引用运算符左对齐。
	//  - center: 指针和引用运算符居中对齐。
	//  - right: 指针和引用运算符右对齐。
	//  - ignore: 指针和引用运算符没有格式化。
	"C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",

	// 在统一初始化和初始值设定项列表中，逗号两侧的空格会保留。
	"C_Cpp.vcFormat.space.preserveInInitializerList": true,

	// 成员访问运算符、指向成员的指针运算符和范围解析运算符前后的空格会被删除。
	"C_Cpp.vcFormat.space.removeAroundMemberOperators": true,

	// 移除一元运算符和操作数之间的空格。
	"C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,

	// 将移除每个分号前的空格。
	"C_Cpp.vcFormat.space.removeBeforeSemicolon": true,

	// 在 C 样式的强制转换的左括号后面和右括号前面添加一个空格。
	"C_Cpp.vcFormat.space.withinCastParentheses": false,

	// 在控制流语句的左括号后面和右括号前面添加一个空格。
	"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,

	// 在带圆括号的表达式的左括号后面和右括号前面添加一个空格。
	"C_Cpp.vcFormat.space.withinExpressionParentheses": false,

	// 在统一初始化和初始值设定项列表的左大括号后面和右大括号前面添加一个空格。
	"C_Cpp.vcFormat.space.withinInitializerListBraces": true,

	// 在左方括号后面和右方括号前面添加一个空格。
	"C_Cpp.vcFormat.space.withinLambdaBrackets": false,

	// 在函数参数列表中的左括号后面和右括号前面添加一个空格。
	"C_Cpp.vcFormat.space.withinParameterListParentheses": false,

	// 在左方括号后面和右方括号前面添加一个空格。
	"C_Cpp.vcFormat.space.withinSquareBrackets": false,

	// 块的换行选项。
	//  - oneLiners: 在一行中输入的完整代码块会保留在一行上，不考虑`C_Cpp.vcFormat.newLine.*` 设置的值。
	//  - allOneLineScopes: 任何在一行中输入左大括号和右大括号的代码都会保留在一行上，不考虑任何 `C_Cpp.vcFormat.newLine.*` 设置的值。
	//  - never: 代码块始终基于 `C_Cpp.vcFormat.newLine.*` 设置的值进行格式化。
	"C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",

	// 为 [vcpkg 依存关系管理器](https://aka.ms/vcpkg/) 启用集成服务。
	"C_Cpp.vcpkg.enabled": true,

	// 控制分析非活动工作区文件是否使用睡眠以避免使用 100% CPU。值 `highest`/`high`/`medium`/`low` 对应于约 100/75/50/25% 的 CPU 使用率。
	"C_Cpp.workspaceParsingPriority": "highest",

	// 调用“转到工作区中的符号”时要包含在查询结果中的符号。
	"C_Cpp.workspaceSymbols": "Just My Code",

	// Enables various accessibility features, such as audio cues about what is happening in the session.
	"liveshare.accessibility.accessibilityFeaturesEnabled": false,

	// Output device to play audio in accessibility mode.
	"liveshare.accessibility.outputDevice": "Default",

	// Enables sound effects about activity.
	"liveshare.accessibility.soundsEnabled": true,

	// Controls the volume of sound audio in accessibility mode (between 0 and 100).
	"liveshare.accessibility.soundVolume": 100,

	// Controls the rate of speech in accessibility mode.
	"liveshare.accessibility.speechRate": 2,

	// The voice used for speech in accessibility mode.
	"liveshare.accessibility.voice": "en-US-Jenny",

	// Enables spoken announcements about activity.
	"liveshare.accessibility.voiceEnabled": true,

	// Controls the volume of voice audio in accessibility mode (between 0 and 100).
	"liveshare.accessibility.voiceVolume": 100,

	// Allow guests to start and stop debugging sessions.
	"liveshare.allowGuestDebugControl": false,

	// Allow guests to run and terminate workspace tasks.
	"liveshare.allowGuestTaskControl": false,

	// Specifies who to allow session invitations from.
	"liveshare.allowInvites": "contacts",

	// Ensures that the session's host is always followed.
	"liveshare.alwaysFollowHost": false,

	// Controls how to handle join requests from anonymous guests.
	"liveshare.anonymousGuestApproval": "prompt",

	// Controls whether web servers are automatically shared, when started from the integrated terminal or well-known extensions.
	"liveshare.autoShareServers": true,

	// Controls whether terminals are automatically shared with guests (read-only).
	"liveshare.autoShareTerminals": true,

	// Controls whether to show the CodeLens for starting a collaboration session.
	"liveshare.codeLens": true,

	// Controls whether to allow comments in collaboration sessions
	"liveshare.comments": true,

	// Type of connection used for collaboration; the default (auto) mode prefers a direct connection, but may fallback to a cloud relay if the direct connection failed.
	"liveshare.connectionMode": "auto",

	// Enables the Visual Studio Live Share output channel.
	"liveshare.diagnosticLogging": false,

	// Specifies the level of logging output from Visual Studio Live Share Extension
	"liveshare.diagnosticLoggingLevel": "Warning",

	// Enables diagnostic notifications and logs.
	"liveshare.diagnosticMode": false,

	// Controls set of active features. By selecting `insiders`, you agree to the [Pre-Release Software License Terms](https://aka.ms/vsls-license-preview) and [Privacy Statement](https://aka.ms/vsls-privacy).
	"liveshare.featureSet": "stable",

	// Specifies how to respond to focus requests from other participants.
	"liveshare.focusBehavior": "accept",

	// Controls whether the host needs to explicitly approve guest requests to join collaboration sessions.
	"liveshare.guestApprovalRequired": false,

	// Increases the guest limit from 5 to 30.
	"liveshare.increasedGuestLimit": true,

	// Controls how the participant will join incoming shared debug sessions.
	"liveshare.joinDebugSessionOption": "Automatic",

	// Sets the number of seconds to wait before sending keep-alive messages in an idle session, used to detect abnormal network disconnection. Set to -1 to disable sending keep-alive messages.
	"liveshare.keepAliveInterval": 20,

	// Allow guests to run arbitrary commands via Code Actions (“Quick Fixes”) and CodeLens
	"liveshare.languages.allowGuestCommandControl": false,

	// Specifies the client to launch when clicking on a Live Share URL.
	"liveshare.launcherClient": "web",

	// Controls when to display a participant's name tag instead of just their cursor.
	"liveshare.nameTagVisibility": "Activity",

	// Allow guests to run notebook cells
	"liveshare.notebooks.allowGuestExecuteCells": false,

	// Controls whether to automatically open shared servers in your default browser.
	"liveshare.openSharedServers": true,

	// Specifies when to automatically populate your Git commit message with guest attribution (using the Git-co-author trailer).
	"liveshare.populateGitCoAuthors": "always",

	// Controls whether to publish your presence to other users, and allow in-tool invites for collaboration sessions
	"liveshare.presence": false,

	// Controls whether to publish your current workspace folder to other users
	"liveshare.publishWorkspaceInfo": false,

	// Height of shared terminal window, characters.
	"liveshare.sharedTerminalHeight": 50,

	// Width of shared terminal window, characters.
	"liveshare.sharedTerminalWidth": 120,

	// Automatically share external files opened by the host during a collaboration session.
	"liveshare.shareExternalFiles": true,

	// Show or hide the Live Share status bar items.
	"liveshare.showInStatusBar": "always",

	// Controls visibility of the cursor and highlights for read-only users.
	"liveshare.showReadOnlyUsersInEditor": "whileFollowing",

	// Controls whether to show verbose notifications, such as when a guest joins and leaves a session.
	"liveshare.showVerboseNotifications": true,

	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,

	// Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order. This setting prevents this from occurring.
	"java.codeAction.sortMembers.avoidVolatileChanges": true,

	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,

	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,

	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,

	// Specifies the insertion location of the code generated by source actions.
	//  - afterCursor: Insert the generated code after the member where the cursor is located.
	//  - beforeCursor: Insert the generated code before the member where the cursor is located.
	//  - lastMember: Insert the generated code as the last member of the target type.
	"java.codeGeneration.insertionLocation": "afterCursor",

	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,

	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,

	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,

	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,

	// Specify the Nonnull annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in your project dependencies.
	"java.compile.nullAnalysis.nonnull": [
		"javax.annotation.Nonnull",
		"org.eclipse.jdt.annotation.NonNull",
		"org.springframework.lang.NonNull"
	],

	// Specify the Nullable annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in your project dependencies.
	"java.compile.nullAnalysis.nullable": [
		"javax.annotation.Nullable",
		"org.eclipse.jdt.annotation.Nullable",
		"org.springframework.lang.Nullable"
	],

	// Enable/disable code completion support
	"java.completion.enabled": true,

	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],

	// Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
	"java.completion.filteredTypes": [
		"java.awt.*",
		"com.sun.*",
		"sun.*",
		"jdk.*",
		"org.graalvm.*",
		"io.micrometer.shaded.*"
	],

	// When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
	"java.completion.guessMethodArguments": true,

	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group. As a result, the empty string (e.g. '') can be used to group all other imports. Static imports are prefixed with a '#'
	"java.completion.importOrder": [
		"#",
		"java",
		"javax",
		"org",
		"com",
		""
	],

	// Maximum number of completion results (not including snippets).
	// `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
	"java.completion.maxResults": 0,

	// Please use 'java.import.generatesMetadataFilesAtProjectRoot' to control whether to generate the project metadata files at the project root. And use 'files.exclude' to control whether to hide the project metadata files from the file explorer.
	// Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": false,

	// Path to Maven's global settings.xml
	"java.configuration.maven.globalSettings": null,

	// Specifies severity if the plugin execution is not covered by Maven build lifecycle.
	"java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",

	// Path to Maven's user settings.xml
	"java.configuration.maven.userSettings": null,

	// Map Java Execution Environments to local JDKs.
	"java.configuration.runtimes": [],

	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",

	// The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed.
	"java.configuration.workspaceCacheLimit": 90,

	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,

	// Enable/disable download of Maven source artifacts for Eclipse projects.
	"java.eclipse.downloadSources": false,

	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",

	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,

	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,

	// Enable/disable default Java formatter
	"java.format.enabled": true,

	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,

	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,

	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,

	// This setting is deprecated, please use 'java.jdt.ls.java.home' instead.
	// Specifies the folder path to the JDK (17 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk-17.0_3"
	"java.home": null,

	// Enable/disable the implementations code lens.
	"java.implementationsCodeLens.enabled": false,

	// Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],

	// Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.
	"java.import.generatesMetadataFilesAtProjectRoot": false,

	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,

	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,

	// Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
	"java.import.gradle.home": null,

	// The location to the JVM used to run the Gradle daemon.
	"java.import.gradle.java.home": null,

	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,

	// Enable/disable the Gradle offline mode.
	"java.import.gradle.offline.enabled": false,

	// Setting for GRADLE_USER_HOME.
	"java.import.gradle.user.home": null,

	// Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,

	// Use Gradle from the 'gradle-wrapper.properties' file.
	"java.import.gradle.wrapper.enabled": true,

	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,

	// Enable/disable the Maven offline mode.
	"java.import.maven.offline.enabled": false,

	// Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
	"java.imports.gradle.wrapper.checksums": [],

	// Enable/disable inlay hints for parameter names:
	// ```java
	// 
	// Integer.valueOf(/* s: */ '123', /* radix: */ 10)
	//  
	// ```
	//  `java.inlayHints.parameterNames.exclusions` can be used to disable the inlay hints for methods.
	//  - none: Disable parameter name hints
	//  - literals: Enable parameter name hints only for literal arguments
	//  - all: Enable parameter name hints for literal and non-literal arguments
	"java.inlayHints.parameterNames.enabled": "literals",

	// The patterns for the methods that will be disabled to show the inlay hints. Supported pattern examples:
	//  - `java.lang.Math.*` - All the methods from java.lang.Math.
	//  - `*.Arrays.asList` - Methods named as 'asList' in the types named as 'Arrays'.
	//  - `*.println(*)` - Methods named as 'println'.
	//  - `(from, to)` - Methods with two parameters named as 'from' and 'to'.
	//  - `(arg*)` - Methods with one parameter whose name starts with 'arg'.
	"java.inlayHints.parameterNames.exclusions": [],

	// [Experimental] Specify whether to enable Android project importing. When set to `auto`, the Android support will be enabled in Visual Studio Code - Insiders.
	// 
	// **Note:** Only works for Android Gradle Plugin `3.2.0` or higher.
	"java.jdt.ls.androidSupport.enabled": "auto",

	// Specifies the folder path to the JDK (17 or more recent) used to launch the Java Language Server. This setting will replace the Java extension's embedded JRE to start the Java Language Server. 
	// 
	// On Windows, backslashes must be escaped, i.e.
	// "java.jdt.ls.java.home":"C:\\Program Files\\Java\\jdk-17.0_3"
	"java.jdt.ls.java.home": null,

	// Whether to load lombok processors from project classpath
	"java.jdt.ls.lombokSupport.enabled": true,

	// Specify whether to automatically add Protobuf output source directories to the classpath.
	// 
	// **Note:** Only works for Gradle `com.google.protobuf` plugin `0.8.4` or higher.
	"java.jdt.ls.protobufSupport.enabled": true,

	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable` to optimize memory usage with the parallel garbage collector
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable",

	// Enable/disable download of Maven source artifacts as part of importing Maven projects.
	"java.maven.downloadSources": false,

	// Force update of Snapshots/Releases.
	"java.maven.updateSnapshots": false,

	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,

	// [Experimental] Enable/disable progress reports from background processes on the server.
	"java.progressReports.enabled": true,

	// Project encoding settings
	//  - ignore: Ignore project encoding settings
	//  - warning: Show warning if a project has no explicit encoding set
	//  - setDefault: Set the default workspace encoding settings
	"java.project.encoding": "ignore",

	// Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
	"java.project.importHint": true,

	// Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
	"java.project.importOnFirstTimeStartup": "automatic",

	// A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.outputPath": "",

	// Configure glob patterns for referencing local libraries to a Java project.
	"java.project.referencedLibraries": [
		"lib/**/*.jar"
	],

	// Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules","\.git"] will exclude all files and folders named 'node_modules' or '.git'. Pattern expressions must be compatible with `java.util.regex.Pattern`. Defaults to ["node_modules","\.git"].
	"java.project.resourceFilters": [
		"node_modules",
		"\\.git"
	],

	// Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.sourcePaths": [],

	// Show quickfixes at the problem or line level.
	"java.quickfix.showAt": "line",

	// Show the recommended Dependency Analytics extension.
	"java.recommendations.dependency.analytics.show": true,

	// Include getter, setter and builder/constructor when finding references.
	"java.references.includeAccessors": true,

	// Include the decompiled sources when finding references.
	"java.references.includeDecompiledSources": true,

	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,

	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,

	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,

	// The launch mode for the Java extension
	//  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
	//  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
	//  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
	"java.server.launchMode": "Hybrid",

	// Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
	"java.settings.url": null,

	// Automatically show build status on startup.
	"java.showBuildStatusOnStart.enabled": "notification",

	// Enable/disable to show the description in signature help.
	"java.signatureHelp.description.enabled": false,

	// Enable/disable the signature help.
	"java.signatureHelp.enabled": true,

	// Specifies the number of imports added before a star-import declaration is used.
	"java.sources.organizeImports.starThreshold": 99,

	// Specifies the number of static imports added before a star-import declaration is used.
	"java.sources.organizeImports.staticStarThreshold": 99,

	// Include method declarations from source files in symbol search.
	"java.symbols.includeSourceMethodDeclarations": false,

	// Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.fileHeader": [],

	// Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.typeComment": [],

	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",

	// Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
	"java.typeHierarchy.lazyLoad": false,

	// Default program working directory.
	"lldb.launch.cwd": "${workspaceFolder}",

	// Debug server port.
	"lldb.launch.debugServer": 4711,

	// Additional environment variables merged with 'env' individual launch configurations.
	"lldb.launch.env": {},

	// Commands executed *after* exitCommands in individual launch configurations.
	"lldb.launch.exitCommands": [],

	// The default evaluator type used for expressions.
	"lldb.launch.expressions": "simple",

	// Commands executed *before* initCommands in individual launch configurations.
	"lldb.launch.initCommands": [],

	// Commands executed *before* postRunCommands in individual launch configurations.
	"lldb.launch.postRunCommands": [],

	// Commands executed *before* preRunCommands in individual launch configurations.
	"lldb.launch.preRunCommands": [],

	// Default base directory used for resolution of relative source paths.  Defaults to "${workspaceFolder}".
	"lldb.launch.relativePathBase": "",

	// A list of source languages to enable language-specific features for.
	"lldb.launch.sourceLanguages": [
		"cpp",
		"rust"
	],

	// Additional entries that will be merged with 'sourceMap's of individual launch configurations.
	"lldb.launch.sourceMap": {},

	// Default destination for stdio streams: null = send to debugger console or a terminal, "<path>" = attach to a file/tty/fifo.
	"lldb.launch.stdio": null,

	// Default terminal type.
	//  - integrated: Use integrated terminal in VSCode.
	//  - external: Use external terminal window.
	//  - console: Use VScode Debug Console for stdout and stderr. Stdin will be unavailable.
	"lldb.launch.terminal": "console",

	// Controls whether the debug console input is by default treated as debugger commands or as expressions to evaluate.
	//  - commands: Treat debug console input as debugger commands.  In order to evaluate an expression, prefix it with '?' (question mark).
	//  - evaluate: Treat debug console input as expressions.  In order to execute a debugger command, prefix it with '`' (backtick).
	//  - split: (experimental) Use the debug console for warningevaluation of expressions, open a separate terminal for input of LLDB commands.
	"lldb.consoleMode": "commands",

	// Common user-defined settings that can be inserted into launch configurations using ${dbgconfig:name} syntax.
	"lldb.dbgconfig": {},

	// Whether to show the numeric value of pointers, or a summary of the pointee.
	"lldb.dereferencePointers": true,

	// Default format for displayed variable values.
	"lldb.displayFormat": "auto",

	// Timeout for expression evaluation, in seconds.
	"lldb.evaluationTimeout": 5,

	// When to show disassembly.
	//  - auto: Only when source is not available.
	//  - never: Never show.
	//  - always: Always show, even if source is available.
	"lldb.showDisassembly": "auto",

	// Suppress VSCode's missing source file errors (requires probing for existence of the source file).
	"lldb.suppressMissingSourceFiles": true,

	// Extra environment variables for the debug adapter.
	"lldb.adapterEnv": {},

	// Name of the command to invoke as Cargo.
	"lldb.cargo": "cargo",

	// Enable command completions in debug console.
	"lldb.commandCompletions": true,

	// Enable value preview when cursor is hovering over a variable.
	"lldb.evaluateForHovers": true,

	// Which LLDB library to use.
	// 
	// This can be either a file path (recommended) or a directory, in which case platform-specific heuristics will be used to locate the actual library file.
	"lldb.library": "",

	// Enable capture of a [reproducer](https://lldb.llvm.org/design/reproducers.html).
	// May also contain a path of the directory to save the reproducer in.
	"lldb.reproducer": false,

	// Start an RPC server that will accept debug configuration requests.
	"lldb.rpcServer": null,

	// Don't show extension update notifications.
	"lldb.suppressUpdateNotifications": false,

	// A sequence of strings sent to the terminal in order to clear its command prompt.
	"lldb.terminalPromptClear": null,

	// Turns on verbose logging.
	"lldb.verboseLogging": false,

	// Logging level for console
	"intellicodeApiExamples.loggingLevel": "INFO",

	// Enable API Usage Examples for Python files
	"intellicodeApiExamples.python.enabled": true,

	// Enable API Usage Examples for Typescript/Javascript files
	"intellicodeApiExamples.typescript.enabled": true,

	// 
	"vsintellicode.features.python.deepLearning": "default",

	// Enable Visual Studio IntelliCode completions for Java
	"vsintellicode.java.completionsEnabled": true,

	// Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
	"vsintellicode.modelDownloadPath": null,

	// Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
	//  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
	//  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
	//  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
	//  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Enable Visual Studio IntelliCode completions for Python
	"vsintellicode.python.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for MSSQL
	"vsintellicode.sql.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
	"vsintellicode.typescript.completionsEnabled": true,

	// Java调试器的日志级别。
	"java.debug.logLevel": "warn",

	// 指定的控制台用于启动Java程序。如果要为特定的调试会话自定义控制台，请修改launch.json中的“console”配置。
	//  - internalConsole: VS Code调试控制台（不支持输入流）。
	//  - integratedTerminal: VS Code集成终端。
	//  - externalTerminal: 外部终端（可在用户设置中修改）。
	"java.debug.settings.console": "integratedTerminal",

	// 在main方法上启用CodeLens标记。
	"java.debug.settings.enableRunDebugCodeLens": true,

	// 当发生异常时，跳过指定的类。你可以使用内置变量，如'$JDK'和'$Libraries'来跳过一组类，或者添加一个特定的类名表达式，如java.*，*.Foo。
	"java.debug.settings.exceptionBreakpoint.skipClasses": [],

	// 在启动java程序之前强制编译整个工作空间。
	"java.debug.settings.forceBuildBeforeLaunch": true,

	// 在调试期间重新加载已更改的Java类。确保未禁用'java.autobuild.enabled'。
	"java.debug.settings.hotCodeReplace": "manual",

	// 实验性的：控制是否允许调试器以异步方式发送JDWP命令。异步模式可以提高高延迟网络上的远程调试响应速度。
	"java.debug.settings.jdwp.async": "auto",

	// 一次JDWP请求中可以请求的变量或字段的最大数量。该值越高，在展开变量视图时，请求debuggee的频率就越低。同时数量过大也会导致JDWP请求超时。
	"java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,

	// 调试器与目标JVM通信时JDWP请求的超时时间（ms）。
	"java.debug.settings.jdwp.requestTimeout": 3000,

	// 设定“变量”或“调试控制台”视图中显示的字符串最大长度，长度超过部分将被剪掉。如果值为0，则不执行修剪。
	"java.debug.settings.maxStringLength": 0,

	// The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
	"java.debug.settings.numericPrecision": 0,

	// Force to proceed when build fails
	"java.debug.settings.onBuildFailureProceed": false,

	// 在“变量”视图中以十六进制格式显示数值。
	"java.debug.settings.showHex": false,

	// 在“变量”视图中显示Collection和Map类的逻辑结构。
	"java.debug.settings.showLogicalStructure": true,

	// 在“变量”视图中显示类的全名。
	"java.debug.settings.showQualifiedNames": false,

	// 在“变量”视图中显示静态变量。
	"java.debug.settings.showStaticVariables": false,

	// 在“变量”视图中显示所有重载过'toString'方法的类的'toString()'值。
	"java.debug.settings.showToString": true,

	// Step时跳过指定的类。你可以使用内置变量，如'$JDK'和'$Libraries'来跳过一组类，或者添加一个特定的类名表达式，如java.*，*.Foo。
	"java.debug.settings.stepping.skipClasses": [],

	// Step时跳过构造函数。
	"java.debug.settings.stepping.skipConstructors": false,

	// Step时跳过静态初始化方法。
	"java.debug.settings.stepping.skipStaticInitializers": false,

	// Step时跳过合成方法。
	"java.debug.settings.stepping.skipSynthetics": false,

	// 启动Java程序的默认VM参数。例如，使用'-Xmx1G -ea'将堆大小增加到1GB并启用断言。如果要为特定的调试会话定制VM参数，请修改launch.json中的'vmArgs'配置。
	"java.debug.settings.vmArgs": "",

	// 控制是否可以使用通知来报告进度。如果为真，则使用状态栏来报告进度。
	"java.silentNotification": false,

	// 在 Java 项目管理器中自动同步修改
	"java.dependency.autoRefresh": true,

	// Java 包显示方式: 平行显示或者分层显示
	"java.dependency.packagePresentation": "flat",

	// 控制 Java 项目管理器刷新的延迟时间 (毫秒)
	"java.dependency.refreshDelay": 2000,

	// 在 Java 项目管理器中显示成员
	"java.dependency.showMembers": false,

	// 在 Java 项目管理器中同步关联当前打开的文件
	"java.dependency.syncWithFolderExplorer": true,

	// 导出 Jar 文件的路径。您可以将此选项置为空串来手动选择 jar 文件的导出路径。
	"java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",

	// Whether to send back detailed information from error logs for diagnostic purpose.
	"java.help.collectErrorLog": false,

	// Sets the default view which is presented during the first use.
	//  - auto: Automatically pick the first experience view
	//  - overview: Present the Java Overview page
	//  - gettingStarted: Present the Java Beginner Tips page
	//  - welcome: Present the Java Help Center page
	//  - none: Do not show any view
	"java.help.firstView": "auto",

	// Show release notes of Extension Pack for Java on startup.
	"java.help.showReleaseNotes": true,

	// 设定运行测试的配置信息。
	"java.test.config": {},

	// 设定默认测试配置项的名称。
	"java.test.defaultConfig": "",

	// 指定是否在 POM 文件中显示依赖冲突。
	"maven.dependency.enableConflictDiagnostics": "true",

	// 指定搜索 Maven 项目时要排除的文件夹。
	"maven.excludedFolders": [
		"**/.*",
		"**/node_modules",
		"**/target",
		"**/bin",
		"**/archetype-resources"
	],

	// 指定所有mvn命令的默认选项。
	"maven.executable.options": "",

	// 指定mvn可执行文件的绝对路径。当此值为空时，它会根据 maven.executable.preferMavenWrapper 的值尝试使用 mvn 或 mvnw 。
	"maven.executable.path": "",

	// 指定是否优先使用 Maven Wrapper。如果为 true，则尝试向上遍历父文件夹寻找 mvnw 作为可执行文件；如果为 false，或者找不到 mvnw，则尝试使用系统 PATH 中的 mvn。
	"maven.executable.preferMavenWrapper": "true",

	// Maven 项目名称的显示格式。
	"maven.explorer.projectName": "${project.name}",

	// 指定是否自动更新 Effective POM。
	"maven.pomfile.autoUpdateEffectivePOM": false,

	// 指定用于查找 POM 文件的 glob 模式。
	"maven.pomfile.globPattern": "**/pom.xml",

	// 指定是否在启动时预加载 Effective POM。
	"maven.pomfile.prefetchEffectivePom": false,

	// 新建项目的默认打开方式。
	"maven.projectOpenBehavior": "Interactive",

	// 指定 maven 配置文件的绝对路径, 默认是 ~/.m2/settings.xml
	"maven.settingsFile": null,

	// 如果此值为 true ，将会在文件浏览器的文件夹右键菜单中增加一个命令，用来新建 Maven 项目。
	"maven.showInExplorerContextMenu": "true",

	// 自定义环境变量。在首次执行 Maven 之前，这些环境变量值将被添加到终端会话中。
	"maven.terminal.customEnv": [],

	// 指定要执行的偏好命令。
	"maven.terminal.favorites": [],

	// 如果此值为 true ，并且配置项 java.home 具有值，则在创建新的终端窗口时，将环境变量 JAVA_HOME 设置为 java.home 的值。
	"maven.terminal.useJavaHome": false,

	// 指定 Maven 项目的视图方式。
	"maven.view": "flat",

}